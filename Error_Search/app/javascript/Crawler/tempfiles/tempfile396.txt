Reentrant Lock in Java - GeeksforGeeksSkip to content TutorialsPractice DS & Algo.Must Do QuestionsDSA Topic-wiseDSA Company-wiseAlgorithmsAnalysis of AlgorithmsAsymptotic AnalysisWorst, Average and Best CasesAsymptotic NotationsLittle o and little omega notationsLower and Upper Bound TheoryAnalysis of LoopsSolving RecurrencesAmortized AnalysisWhat does 'Space Complexity' mean ?Pseudo-polynomial AlgorithmsPolynomial Time Approximation SchemeA Time Complexity QuestionSearching AlgorithmsSorting AlgorithmsGraph AlgorithmsPattern SearchingGeometric AlgorithmsMathematicalBitwise AlgorithmsRandomized AlgorithmsGreedy AlgorithmsDynamic ProgrammingDivide and ConquerBacktrackingBranch and BoundAll AlgorithmsData StructuresArraysLinked ListStackQueueBinary TreeBinary Search TreeHeapHashingGraphAdvanced Data StructureMatrixStringsAll Data StructuresInterview CornerCompany PreparationTop TopicsPractice Company QuestionsInterview ExperiencesExperienced InterviewsInternship InterviewsCompetititve ProgrammingDesign PatternsSystem Design TutorialMultiple Choice QuizzesLanguagesCC++JavaPythonC#JavaScriptjQuerySQLPHPScalaPerlGo LanguageHTMLCSSKotlinCS SubjectsMathematicsOperating SystemDBMSComputer NetworksComputer Organization and ArchitectureTheory of ComputationCompiler DesignDigital LogicSoftware EngineeringGATEGATE Computer Science NotesLast Minute NotesGATE CS Solved PapersGATE CS Original Papers and Official KeysGATE 2021 DatesGATE CS 2021 SyllabusImportant Topics for GATE CSWeb TechnologiesHTMLCSSJavaScriptAngularJSReactJSNodeJSBootstrapjQueryPHPSoftware DesignsSoftware Design PatternsSystem Design TutorialSchool LearningSchool ProgrammingMathematicsNumber SystemAlgebraTrigonometryStatisticsProbabilityGeometryMensurationCalculusMaths Notes (Class 8-12)Class 8 NotesClass 9 NotesClass 10 NotesClass 11 NotesClass 12 NotesNCERT SolutionsClass 8 Maths SolutionClass 9 Maths SolutionClass 10 Maths SolutionClass 11 Maths SolutionClass 12 Maths SolutionRD Sharma SolutionsClass 8 Maths SolutionClass 9 Maths SolutionClass 10 Maths SolutionClass 11 Maths SolutionClass 12 Maths SolutionPhysics Notes (Class 8-11)Class 8 NotesClass 9 NotesClass 10 NotesClass 11 NotesISRO CSISRO CS Solved PapersISRO CS Original Papers and Official KeysISRO CS Syllabus for Scientist/Engineer ExamUGC NET CSUGC NET CS Notes Paper IIUGC NET CS Notes Paper IIIUGC NET CS Solved PapersStudentCampus Ambassador ProgramSchool Ambassador ProgramProjectGeek of the MonthCampus Geek of the MonthPlacement CourseCompetititve ProgrammingTestimonialsGeek on the TopCareersInternshipJobsApply for JobsPost a JobCourses WriteCome write articles for us and get featuredPracticeLearn and code with the best industry expertsPremiumGet access to ad-free content, doubt assistance and more!JobsCome and find your dream job with usGeeks DigestQuizzesGeeks CampusGblog ArticlesIDECampus Mantri HomeSaved VideosCoursesGBlogPuzzlesWhat's New ? Change Language Data StructuresAlgorithmsInterview PreparationTopic-wise PracticeC++JavaPythonCompetitive ProgrammingMachine LearningWeb DevelopmentPuzzlesProject IdeasGFG School Related Articles ▲Related ArticlesThread Pools in JavaSemaphore in JavaJava.util.concurrent.Semaphore class in JavaCountDownLatch in JavaDeadlock in Java MultithreadingDaemon Thread in JavaReentrant Lock in JavaJava.util.concurrent.CyclicBarrier in JavaCallable and Future in JavaJava.lang.Runtime class in JavaOutput of Java program | Set 16 (Threads)Multithreading in JavaLifecycle and States of a Thread in JavaMain thread in JavaJava Concurrency – yield(), sleep() and join() MethodsInter-thread Communication in JavaJava.lang.Thread Class in JavaWhat does start() function do in multithreading in Java?Java Thread Priority in MultithreadingJoining Threads in JavaNaming a thread and fetching name of current thread in JavaSynchronization in JavaMethod and Block Synchronization in JavaProducer-Consumer solution using threads in JavaTable of ContentsThread Pools in JavaSemaphore in JavaJava.util.concurrent.Semaphore class in JavaCountDownLatch in JavaDeadlock in Java MultithreadingDaemon Thread in JavaReentrant Lock in JavaJava.util.concurrent.CyclicBarrier in JavaCallable and Future in JavaJava.lang.Runtime class in JavaOutput of Java program | Set 16 (Threads)Multithreading in JavaLifecycle and States of a Thread in JavaMain thread in JavaJava Concurrency – yield(), sleep() and join() MethodsInter-thread Communication in JavaJava.lang.Thread Class in JavaWhat does start() function do in multithreading in Java?Java Thread Priority in MultithreadingJoining Threads in JavaNaming a thread and fetching name of current thread in JavaSynchronization in JavaMethod and Block Synchronization in JavaProducer-Consumer solution using threads in JavaImprove Article Save Article Like Article Reentrant Lock in JavaDifficulty Level : MediumLast Updated : 04 Feb, 2021BackgroundThe traditional way to achieve thread synchronization in Java is by the use of synchronized keyword. While it provides a certain basic synchronization, the synchronized keyword is quite rigid in its use. For example, a thread can take a lock only once. Synchronized blocks don’t offer any mechanism of a waiting queue and after the exit of one thread, any thread can take the lock. This could lead to starvation of resources for some other thread for a very long period of time. Reentrant Locks are provided in Java to provide synchronization with greater flexibility. What are Reentrant Locks?The ReentrantLock class implements the Lock interface and provides synchronization to methods while accessing shared resources. The code which manipulates the shared resource is surrounded by calls to lock and unlock method. This gives a lock to the current working thread and blocks all other threads which are trying to take a lock on the shared resource. As the name says, ReentrantLock allows threads to enter into the lock on a resource more than once. When the thread first enters into the lock, a hold count is set to one. Before unlocking the thread can re-enter into lock again and every time hold count is incremented by one. For every unlocks request, hold count is decremented by one and when hold count is 0, the resource is unlocked. Reentrant Locks also offer a fairness parameter, by which the lock would abide by the order of the lock request i.e. after a thread unlocks the resource, the lock would go to the thread which has been waiting for the longest time. This fairness mode is set up by passing true to the constructor of the lock. These locks are used in the following way: Javapublic void some_method(){ reentrantlock.lock(); try { //Do some work } catch(Exception e) { e.printStackTrace(); } finally { reentrantlock.unlock(); } } Unlock statement is always called in the finally block to ensure that the lock is released even if an exception is thrown in the method body(try block).ReentrantLock() Methods lock(): Call to the lock() method increments the hold count by 1 and gives the lock to the thread if the shared resource is initially free.unlock(): Call to the unlock() method decrements the hold count by 1. When this count reaches zero, the resource is released.tryLock(): If the resource is not held by any other thread, then call to tryLock() returns true and the hold count is incremented by one. If the resource is not free, then the method returns false, and the thread is not blocked, but exits.tryLock(long timeout, TimeUnit unit): As per the method, the thread waits for a certain time period as defined by arguments of the method to acquire the lock on the resource before exiting.lockInterruptibly(): This method acquires the lock if the resource is free while allowing for the thread to be interrupted by some other thread while acquiring the resource. It means that if the current thread is waiting for the lock but some other thread requests the lock, then the current thread will be interrupted and return immediately without acquiring the lock.getHoldCount(): This method returns the count of the number of locks held on the resource.isHeldByCurrentThread(): This method returns true if the lock on the resource is held by the current thread.ReentrantLock() ExampleIn the following tutorial, we will look at a basic example of Reentrant Locks.Steps to be followed 1. Create an object of ReentrantLock 2. Create a worker(Runnable Object) to execute and pass the lock to the object 3. Use the lock() method to acquire the lock on shared resource 4. After completing work, call unlock() method to release the lock Below is the implementation of problem statement:Java// Java code to illustrate Reentrant Locksimport java.text.SimpleDateFormat;import java.util.Date;import java.util.concurrent.ExecutorService;import java.util.concurrent.Executors;import java.util.concurrent.locks.ReentrantLock; class worker implements Runnable{ String name; ReentrantLock re; public worker(ReentrantLock rl, String n) { re = rl; name = n; } public void run() { boolean done = false; while (!done) { //Getting Outer Lock boolean ans = re.tryLock(); // Returns True if lock is free if(ans) { try { Date d = new Date(); SimpleDateFormat ft = new SimpleDateFormat("hh:mm:ss"); System.out.println("task name - "+ name + " outer lock acquired at " + ft.format(d) + " Doing outer work"); Thread.sleep(1500); // Getting Inner Lock re.lock(); try { d = new Date(); ft = new SimpleDateFormat("hh:mm:ss"); System.out.println("task name - "+ name + " inner lock acquired at " + ft.format(d) + " Doing inner work"); System.out.println("Lock Hold Count - "+ re.getHoldCount()); Thread.sleep(1500); } catch(InterruptedException e) { e.printStackTrace(); } finally { //Inner lock release System.out.println("task name - " + name + " releasing inner lock"); re.unlock(); } System.out.println("Lock Hold Count - " + re.getHoldCount()); System.out.println("task name - " + name + " work done"); done = true; } catch(InterruptedException e) { e.printStackTrace(); } finally { //Outer lock release System.out.println("task name - " + name + " releasing outer lock"); re.unlock(); System.out.println("Lock Hold Count - " + re.getHoldCount()); } } else { System.out.println("task name - " + name + " waiting for lock"); try { Thread.sleep(1000); } catch(InterruptedException e) { e.printStackTrace(); } } } }} public class test{ static final int MAX_T = 2; public static void main(String[] args) { ReentrantLock rel = new ReentrantLock(); ExecutorService pool = Executors.newFixedThreadPool(MAX_T); Runnable w1 = new worker(rel, "Job1"); Runnable w2 = new worker(rel, "Job2"); Runnable w3 = new worker(rel, "Job3"); Runnable w4 = new worker(rel, "Job4"); pool.execute(w1); pool.execute(w2); pool.execute(w3); pool.execute(w4); pool.shutdown(); }}Sample Execution Output: task name - Job2 waiting for lock task name - Job1 outer lock acquired at 09:49:42 Doing outer work task name - Job2 waiting for lock task name - Job1 inner lock acquired at 09:49:44 Doing inner work Lock Hold Count - 2 task name - Job2 waiting for lock task name - Job2 waiting for lock task name - Job1 releasing inner lock Lock Hold Count - 1 task name - Job1 work done task name - Job1 releasing outer lock Lock Hold Count - 0 task name - Job3 outer lock acquired at 09:49:45 Doing outer work task name - Job2 waiting for lock task name - Job3 inner lock acquired at 09:49:47 Doing inner work Lock Hold Count - 2 task name - Job2 waiting for lock task name - Job2 waiting for lock task name - Job3 releasing inner lock Lock Hold Count - 1 task name - Job3 work done task name - Job3 releasing outer lock Lock Hold Count - 0 task name - Job4 outer lock acquired at 09:49:48 Doing outer work task name - Job2 waiting for lock task name - Job4 inner lock acquired at 09:49:50 Doing inner work Lock Hold Count - 2 task name - Job2 waiting for lock task name - Job2 waiting for lock task name - Job4 releasing inner lock Lock Hold Count - 1 task name - Job4 work done task name - Job4 releasing outer lock Lock Hold Count - 0 task name - Job2 outer lock acquired at 09:49:52 Doing outer work task name - Job2 inner lock acquired at 09:49:53 Doing inner work Lock Hold Count - 2 task name - Job2 releasing inner lock Lock Hold Count - 1 task name - Job2 work done task name - Job2 releasing outer lock Lock Hold Count - 0Important Points One can forget to call the unlock() method in the finally block leading to bugs in the program. Ensure that the lock is released before the thread exits.The fairness parameter used to construct the lock object decreases the throughput of the program.The ReentrantLock is a better replacement for synchronization, which offers many features not provided by synchronized. However, the existence of these obvious benefits are not a good enough reason to always prefer ReentrantLock to synchronize. Instead, make the decision on the basis of whether you need the flexibility offered by a ReentrantLock.This article is contributed by Abhishek. If you like GeeksforGeeks and would like to contribute, you can also write an article using contribute.geeksforgeeks.org or mail your article to contribute@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above. Attention reader! Don’t stop learning now. Get hold of all the important Java Foundation and Collections concepts with the Fundamentals of Java and Java Collections Course at a student-friendly price and become industry ready. To complete your preparation from learning a language to DS Algo and many more, please refer Complete Interview Preparation Course.My Personal Notes arrow_drop_upSave LikePreviousDaemon Thread in JavaNext Java.util.concurrent.CyclicBarrier in JavaRecommended ArticlesPage :Object Level Lock vs Class Level Lock in Java24, Mar 21Lock framework vs Thread synchronization in Java27, Feb 19AtomicInteger for Lock Free Algorithms in Java15, Sep 20Lock Free Stack using Java15, Sep 20What is Lock Striping in Java Concurrency?09, Oct 20Object Level Lock in Java17, Mar 21How to Check if a Thread Holds Lock on a Particular Object in Java?27, Aug 21Difference Between Lock and Monitor in Java Concurrency15, Aug 21Class Level Lock in Java17, Mar 21Difference Between java.sql.Time, java.sql.Timestamp and java.sql.Date in Java07, Apr 21How to Convert java.sql.Date to java.util.Date in Java?02, Feb 21Different Ways to Convert java.util.Date to java.time.LocalDate in Java05, Jan 21How to Convert java.util.Date to java.sql.Date in Java?23, Mar 21Java.util.BitSet class methods in Java with Examples | Set 218, Nov 16Java.Lang.Float class in Java27, Mar 17Java.io.BufferedInputStream class in Java20, Jan 17Java.io.ObjectInputStream Class in Java | Set 102, Feb 17Java.util.BitSet class in Java with Examples | Set 116, Nov 16Java.io.BufferedWriter class methods in Java29, Dec 16Java.io.DataOutputStream in Java06, Jan 17Java.io.StreamTokenizer Class in Java | Set 106, Jan 17Java.io.InputStream Class in Java09, Jan 17Java.io.SequenceInputStream in Java06, Jan 17Java.io.StreamTokenizer Class in Java | Set 209, Jan 17Article Contributed By :GeeksforGeeksVote for difficultyCurrent difficulty : MediumEasy Normal Medium Hard ExpertImproved By :payelsenapatinayanArticle Tags :Java-MultithreadingJavaPractice Tags :JavaReport IssueWriting code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load CommentsWhat's NewJava Backend Development- LIVE ClassesView DetailsComplete Interview PreparationView DetailsSystem Design-Live Classes for Working ProfessionalsView DetailsMost popular in JavaArrays in JavaObject Oriented Programming (OOPs) Concept in JavaSplit() String method in Java with examplesFor-each loop in JavaArrays.sort() in Java with examplesMore related articles in JavaReverse a string in JavaArrayList in JavaHashMap in Java with ExamplesMultidimensional Arrays in JavaInitialize an ArrayList in Java× 5th Floor, A-118,Sector-136, Noida, Uttar Pradesh - 201305 feedback@geeksforgeeks.orgCompanyAbout UsCareersPrivacy PolicyContact UsCopyright PolicyLearnAlgorithmsData StructuresLanguagesCS SubjectsVideo TutorialsWeb DevelopmentWeb TutorialsHTMLCSSJavaScriptBootstrapContributeWrite an ArticleWrite Interview ExperienceInternshipsVideos@geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It ! Start Your Coding Journey Now!Login Register