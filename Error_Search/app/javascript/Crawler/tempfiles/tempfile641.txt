File Handling in Java with CRUD operations - GeeksforGeeksSkip to content TutorialsPractice DS & Algo.Must Do QuestionsDSA Topic-wiseDSA Company-wiseAlgorithmsAnalysis of AlgorithmsAsymptotic AnalysisWorst, Average and Best CasesAsymptotic NotationsLittle o and little omega notationsLower and Upper Bound TheoryAnalysis of LoopsSolving RecurrencesAmortized AnalysisWhat does 'Space Complexity' mean ?Pseudo-polynomial AlgorithmsPolynomial Time Approximation SchemeA Time Complexity QuestionSearching AlgorithmsSorting AlgorithmsGraph AlgorithmsPattern SearchingGeometric AlgorithmsMathematicalBitwise AlgorithmsRandomized AlgorithmsGreedy AlgorithmsDynamic ProgrammingDivide and ConquerBacktrackingBranch and BoundAll AlgorithmsData StructuresArraysLinked ListStackQueueBinary TreeBinary Search TreeHeapHashingGraphAdvanced Data StructureMatrixStringsAll Data StructuresInterview CornerCompany PreparationTop TopicsPractice Company QuestionsInterview ExperiencesExperienced InterviewsInternship InterviewsCompetititve ProgrammingDesign PatternsSystem Design TutorialMultiple Choice QuizzesLanguagesCC++JavaPythonC#JavaScriptjQuerySQLPHPScalaPerlGo LanguageHTMLCSSKotlinCS SubjectsMathematicsOperating SystemDBMSComputer NetworksComputer Organization and ArchitectureTheory of ComputationCompiler DesignDigital LogicSoftware EngineeringGATEGATE Computer Science NotesLast Minute NotesGATE CS Solved PapersGATE CS Original Papers and Official KeysGATE 2021 DatesGATE CS 2021 SyllabusImportant Topics for GATE CSWeb TechnologiesHTMLCSSJavaScriptAngularJSReactJSNodeJSBootstrapjQueryPHPSoftware DesignsSoftware Design PatternsSystem Design TutorialSchool LearningSchool ProgrammingMathematicsNumber SystemAlgebraTrigonometryStatisticsProbabilityGeometryMensurationCalculusMaths Notes (Class 8-12)Class 8 NotesClass 9 NotesClass 10 NotesClass 11 NotesClass 12 NotesNCERT SolutionsClass 8 Maths SolutionClass 9 Maths SolutionClass 10 Maths SolutionClass 11 Maths SolutionClass 12 Maths SolutionRD Sharma SolutionsClass 8 Maths SolutionClass 9 Maths SolutionClass 10 Maths SolutionClass 11 Maths SolutionClass 12 Maths SolutionPhysics Notes (Class 8-11)Class 8 NotesClass 9 NotesClass 10 NotesClass 11 NotesISRO CSISRO CS Solved PapersISRO CS Original Papers and Official KeysISRO CS Syllabus for Scientist/Engineer ExamUGC NET CSUGC NET CS Notes Paper IIUGC NET CS Notes Paper IIIUGC NET CS Solved PapersStudentCampus Ambassador ProgramSchool Ambassador ProgramProjectGeek of the MonthCampus Geek of the MonthPlacement CourseCompetititve ProgrammingTestimonialsGeek on the TopCareersInternshipJobsApply for JobsPost a JobCourses WriteCome write articles for us and get featuredPracticeLearn and code with the best industry expertsPremiumGet access to ad-free content, doubt assistance and more!JobsCome and find your dream job with usGeeks DigestQuizzesGeeks CampusGblog ArticlesIDECampus Mantri HomeSaved VideosCoursesGBlogPuzzlesWhat's New ? Change Language Data StructuresAlgorithmsInterview PreparationTopic-wise PracticeC++JavaPythonCompetitive ProgrammingMachine LearningWeb DevelopmentPuzzlesProject IdeasGFG School Related Articles ▲Related ArticlesBasicsJava Programming LanguageIntroduction to JavaSetting up the environment in JavaJava Basic SyntaxJava Hello World ProgramCommand Line arguments in JavaHow JVM Works – JVM Architecture?Differences between JDK, JRE and JVMJava IdentifiersData types in JavaVariables in JavaComments in JavaOperators in JavaWays to read input from console in JavaFlow ControlDecision Making in Java (if, if-else, switch, break, continue, jump)Loops in JavaJava For loop with ExamplesFor-each loop in JavaJava while loop with ExamplesSwitch Statement in JavaContinue Statement in JavaBreak statement in JavaStringsStrings in JavaString class in Java | Set 1StringBuffer class in JavaStringBuilder Class in Java with ExamplesArraysArrays in JavaMultidimensional Arrays in JavaJagged Array in JavaArray Copy in JavaHow to convert an Array to String in Java?How to compare two arrays in Java?MethodsMethods in JavaParameter Passing Techniques in Java with ExamplesReturning Multiple values in JavaDifferent ways of Method Overloading in JavaScope of Variables In JavaConstructorsConstructors in JavaCopy Constructor in JavaConstructor Overloading in JavaConstructor Chaining In Java with ExamplesPrivate Constructors and Singleton Classes in JavaOOP ConceptsClasses and Objects in JavaInheritance in JavaEncapsulation in JavaPolymorphism in JavaAbstraction in JavaOverriding in JavaOverloading in JavaException HandlingExceptions in JavaTypes of Exception in Java with ExamplesChecked vs Unchecked Exceptions in Javathrow and throws in JavaUser-defined Custom Exception in JavaInterfaces & Abstract ClassesInterfaces in JavaNested Interface in JavaMarker interface in JavaAbstract Classes in JavaDifference between Abstract Class and Interface in JavaFunctional Interfaces in JavaComparator Interface in Java with ExamplesCollectionsCollections in JavaCollections Class in JavaCollection vs Collections in Java with ExampleJava | Implementing Iterator and Iterable InterfaceList Interface in Java with ExamplesArrayList in JavaVector Class in JavaStack Class in JavaLinkedList in JavaQueue Interface In JavaPriorityQueue in JavaDeque interface in Java with ExampleArrayDeque in JavaSet in JavaHashSet in JavaLinkedHashSet in Java with ExamplesSortedSet Interface in Java with ExamplesNavigableSet in Java with ExamplesTreeSet in JavaMap Interface in JavaHashMap in Java with ExamplesHashtable in JavaLinkedHashMap in JavaSortedMap Interface in Java with ExamplesTreeMap in JavaMultithreadingMultithreading in JavaLifecycle and States of a Thread in JavaMain thread in JavaJava Thread Priority in MultithreadingSynchronization in JavaFile HandlingFile Handling in Java with CRUD operationsJava.io.InputStream Class in JavaJava.io.OutputStream class in JavaJava.io.File Class in JavaFile Permissions in JavaCopying file using FileStreams in JavaDelete a file using JavaTable of ContentsBasicsJava Programming LanguageIntroduction to JavaSetting up the environment in JavaJava Basic SyntaxJava Hello World ProgramCommand Line arguments in JavaHow JVM Works – JVM Architecture?Differences between JDK, JRE and JVMJava IdentifiersData types in JavaVariables in JavaComments in JavaOperators in JavaWays to read input from console in JavaFlow ControlDecision Making in Java (if, if-else, switch, break, continue, jump)Loops in JavaJava For loop with ExamplesFor-each loop in JavaJava while loop with ExamplesSwitch Statement in JavaContinue Statement in JavaBreak statement in JavaStringsStrings in JavaString class in Java | Set 1StringBuffer class in JavaStringBuilder Class in Java with ExamplesArraysArrays in JavaMultidimensional Arrays in JavaJagged Array in JavaArray Copy in JavaHow to convert an Array to String in Java?How to compare two arrays in Java?MethodsMethods in JavaParameter Passing Techniques in Java with ExamplesReturning Multiple values in JavaDifferent ways of Method Overloading in JavaScope of Variables In JavaConstructorsConstructors in JavaCopy Constructor in JavaConstructor Overloading in JavaConstructor Chaining In Java with ExamplesPrivate Constructors and Singleton Classes in JavaOOP ConceptsClasses and Objects in JavaInheritance in JavaEncapsulation in JavaPolymorphism in JavaAbstraction in JavaOverriding in JavaOverloading in JavaException HandlingExceptions in JavaTypes of Exception in Java with ExamplesChecked vs Unchecked Exceptions in Javathrow and throws in JavaUser-defined Custom Exception in JavaInterfaces & Abstract ClassesInterfaces in JavaNested Interface in JavaMarker interface in JavaAbstract Classes in JavaDifference between Abstract Class and Interface in JavaFunctional Interfaces in JavaComparator Interface in Java with ExamplesCollectionsCollections in JavaCollections Class in JavaCollection vs Collections in Java with ExampleJava | Implementing Iterator and Iterable InterfaceList Interface in Java with ExamplesArrayList in JavaVector Class in JavaStack Class in JavaLinkedList in JavaQueue Interface In JavaPriorityQueue in JavaDeque interface in Java with ExampleArrayDeque in JavaSet in JavaHashSet in JavaLinkedHashSet in Java with ExamplesSortedSet Interface in Java with ExamplesNavigableSet in Java with ExamplesTreeSet in JavaMap Interface in JavaHashMap in Java with ExamplesHashtable in JavaLinkedHashMap in JavaSortedMap Interface in Java with ExamplesTreeMap in JavaMultithreadingMultithreading in JavaLifecycle and States of a Thread in JavaMain thread in JavaJava Thread Priority in MultithreadingSynchronization in JavaFile HandlingFile Handling in Java with CRUD operationsJava.io.InputStream Class in JavaJava.io.OutputStream class in JavaJava.io.File Class in JavaFile Permissions in JavaCopying file using FileStreams in JavaDelete a file using JavaImprove Article Save Article Like Article File Handling in Java with CRUD operationsDifficulty Level : HardLast Updated : 08 Mar, 2021So far the operations using Java programs are done on a prompt/terminal which is not stored anywhere. But in the software industry, most of the programs are written to store the information fetched from the program. One such way is to store the fetched information in a file.What is File Handling in Java?A file is a container that is used to store various types of information. Data is permanently stored in secondary memory by creating a file with a unique name. A file may consist of text, image or any other document. Different operations that can be performed on a file are: Creation of a new fileOpening an existing fileReading from fileWriting to a fileMoving to a specific location in a fileClosing a fileDifferent classes that can be used in Java for File Handling: InputStreamOutputStreamFilterOutputStreamFileOutputStreamByteArrayOutputStreamByteArrayInputStreamFileInputStreamFilterInputStreamStringBufferInputStreamSequenceInputStreamBufferedOutputStreamStringBufferInputStreamDataOutputStreamPrintStreamBufferedInputStreamDataInputStreamPushbackInputStreamIn this article, we will learn how Java ByteStreams are used to perform input and output of 8-bits(1 byte) using class RandomAccessFile which consists of method writeBytes() and readBytes() to write and read the data in the form of bytes.Various Methods used to perform File operation: writeBytes(String s): Writes the string to the file as a sequence of bytes.readLine(): Reads the next line of text from this file.getFilePointer(): Returns the current offset in this file.length(): Returns the length of this file and return type is long.close(): Closes this random access file stream and releases any system resources associated with the stream.setLength(long newLength): Sets the length of this file.seek(long pos): Sets the file-pointer offset, measured from the beginning of this file, at which the next read or write occurs.File opening modes in Java: ValueMeaning“r”Open for reading only. Invoking any of the write methods of the resulting object will cause an IOException to be thrown.“rw”Open to reading and writing. If the file does not already exist then an attempt will be made to create it.“rws”Open for reading and writing, as with “rw”, and also require that every update to the file’s content or metadata be written synchronously to the underlying storage device.“rwd”Open for reading and writing, as with “rw”, and also require that every update to the file’s content be written synchronously to the underlying storage device.Syntax of Opening File using RandomAccessFile: File file = new File( filename ) RandomAccessFile raf = new RandomAccessFile(file, mode)CRUD operations using File Handling in JavaExample: Consider that you want to keep records of your friend’s contact number in a file. To distinguish between your friend’s name and contact number you need a separator. To do, so you need to select a separator such as ‘!’ or ‘$’ or some special symbol which does not appear in your friend’s name. Then we will form a string consist of a name, special symbol and number to insert into the file.Syntax of a Contact in the file friendsContact.txt: Name!NumberHow to Create a File in Java? Java// Java program to create a file "friendsContact.txt"// and add a new contact in the file import java.io.File;import java.io.IOException;import java.io.RandomAccessFile;import java.lang.NumberFormatException; class AddFriend { public static void main(String data[]) { try { // Get the name of the contact to be updated // from the Command line argument String newName = data[0]; // Get the number to be updated // from the Command line argument long newNumber = Long.parseLong(data[1]); String nameNumberString; String name; long number; int index; // Using file pointer creating the file. File file = new File("friendsContact.txt"); if (!file.exists()) { // Create a new file if not exists. file.createNewFile(); } // Opening file in reading and write mode. RandomAccessFile raf = new RandomAccessFile(file, "rw"); boolean found = false; // Checking whether the name // of contact already exists. // getFilePointer() give the current offset // value from start of the file. while (raf.getFilePointer() < raf.length()) { // reading line from the file. nameNumberString = raf.readLine(); // splitting the string to get name and // number String[] lineSplit = nameNumberString.split("!"); // separating name and number. name = lineSplit[0]; number = Long.parseLong(lineSplit[1]); // if condition to find existence of record. if (name == newName || number == newNumber) { found = true; break; } } if (found == false) { // Enter the if block when a record // is not already present in the file. nameNumberString = newName + "!" + String.valueOf(newNumber); // writeBytes function to write a string // as a sequence of bytes. raf.writeBytes(nameNumberString); // To insert the next record in new line. raf.writeBytes(System.lineSeparator()); // Print the message System.out.println(" Friend added. "); // Closing the resources. raf.close(); } // The contact to be updated // could not be found else { // Closing the resources. raf.close(); // Print the message System.out.println(" Input name" + " does not exists. "); } } catch (IOException ioe) { System.out.println(ioe); } catch (NumberFormatException nef) { System.out.println(nef); } }}Output:Compiling and Adding the contact in the newly created file: javac AddFriend.java java AddFriend abc 1111111111 Friend added java AddFriend pqr 1111111111 Input name or number already existFile:How to Read a File in Java? Java// Java program to read from file "friendsContact.txt"// and display the contacts import java.io.File;import java.io.IOException;import java.io.RandomAccessFile;import java.lang.NumberFormatException; class DisplayFriends { public static void main(String data[]) { try { String nameNumberString; String name; long number; int index; // Using file pointer creating the file. File file = new File("friendsContact.txt"); if (!file.exists()) { // Create a new file if not exists. file.createNewFile(); } // Opening file in reading and write mode. RandomAccessFile raf = new RandomAccessFile(file, "rw"); boolean found = false; // Traversing the file // getFilePointer() give the current offset // value from start of the file. while (raf.getFilePointer() < raf.length()) { // reading line from the file. nameNumberString = raf.readLine(); // splitting the string to get name and // number String[] lineSplit = nameNumberString.split("!"); // separating name and number. name = lineSplit[0]; number = Long.parseLong(lineSplit[1]); // Print the contact data System.out.println( "Friend Name: " + name + "\n" + "Contact Number: " + number + "\n"); } catch (IOException ioe) { System.out.println(ioe); } catch (NumberFormatException nef) { System.out.println(nef); } } }Output:Compiling and reading the contacts from the file: javac DisplayFriends.java java DisplayFriends Friend Name: abc Contact Number: 1234567890 Friend Name: lmn Contact Number: 3333333333 Friend Name: xyz Contact Number: 4444444444File: How to Update a File in Java?Java// Java program to update in the file "friendsContact.txt"// and change the number of an old contact import java.io.File;import java.io.IOException;import java.io.RandomAccessFile;import java.lang.NumberFormatException; class UpdateFriend { public static void main(String data[]) { try { // Get the name of the contact to be updated // from the Command line argument String newName = data[0]; // Get the number to be updated // from the Command line argument long newNumber = Long.parseLong(data[1]); String nameNumberString; String name; long number; int index; // Using file pointer creating the file. File file = new File("friendsContact.txt"); if (!file.exists()) { // Create a new file if not exists. file.createNewFile(); } // Opening file in reading and write mode. RandomAccessFile raf = new RandomAccessFile(file, "rw"); boolean found = false; // Checking whether the name // of contact already exists. // getFilePointer() give the current offset // value from start of the file. while (raf.getFilePointer() < raf.length()) { // reading line from the file. nameNumberString = raf.readLine(); // splitting the string to get name and // number String[] lineSplit = nameNumberString.split("!"); // separating name and number. name = lineSplit[0]; number = Long.parseLong(lineSplit[1]); // if condition to find existence of record. if (name == newName || number == newNumber) { found = true; break; } } // Update the contact if record exists. if (found == true) { // Creating a temporary file // with file pointer as tmpFile. File tmpFile = new File("temp.txt"); // Opening this temporary file // in ReadWrite Mode RandomAccessFile tmpraf = new RandomAccessFile(tmpFile, "rw"); // Set file pointer to start raf.seek(0); // Traversing the friendsContact.txt file while (raf.getFilePointer() < raf.length()) { // Reading the contact from the file nameNumberString = raf.readLine(); index = nameNumberString.indexOf('!'); name = nameNumberString.substring( 0, index); // Check if the fetched contact // is the one to be updated if (name.equals(inputName)) { // Update the number of this contact nameNumberString = name + "!" + String.valueOf(newNumber); } // Add this contact in the temporary // file tmpraf.writeBytes(nameNumberString); // Add the line separator in the // temporary file tmpraf.writeBytes( System.lineSeparator()); } // The contact has been updated now // So copy the updated content from // the temporary file to original file. // Set both files pointers to start raf.seek(0); tmpraf.seek(0); // Copy the contents from // the temporary file to original file. while (tmpraf.getFilePointer() < tmpraf.length()) { raf.writeBytes(tmpraf.readLine()); raf.writeBytes(System.lineSeparator()); } // Set the length of the original file // to that of temporary. raf.setLength(tmpraf.length()); // Closing the resources. tmpraf.close(); raf.close(); // Deleting the temporary file tmpFile.delete(); System.out.println(" Friend updated. "); } // The contact to be updated // could not be found else { // Closing the resources. raf.close(); // Print the message System.out.println(" Input name" + " does not exists. "); } } catch (IOException ioe) { System.out.println(ioe); } catch (NumberFormatException nef) { System.out.println(nef); } }}Output:Compiling and updating the contact in the file: javac UpdateFriend.java java UpdateFriend abc 1234567890 Friend updated. java UpdateFriend tqr Input name does not exists.File:How to Delete a File in Java? Java// Java program to delete a contact// from the file "friendsContact.txt" import java.io.File;import java.io.IOException;import java.io.RandomAccessFile;import java.lang.NumberFormatException; class DeleteFriend { public static void main(String data[]) { try { // Get the name of the contact to be updated // from the Command line argument String newName = data[0]; String nameNumberString; String name; long number; int index; // Using file pointer creating the file. File file = new File("friendsContact.txt"); if (!file.exists()) { // Create a new file if not exists. file.createNewFile(); } // Opening file in reading and write mode. RandomAccessFile raf = new RandomAccessFile(file, "rw"); boolean found = false; // Checking whether the name of contact exists. // getFilePointer() give the current offset // value from start of the file. while (raf.getFilePointer() < raf.length()) { // reading line from the file. nameNumberString = raf.readLine(); // splitting the string to get name and // number String[] lineSplit = nameNumberString.split("!"); // separating name and number. name = lineSplit[0]; number = Long.parseLong(lineSplit[1]); // if condition to find existence of record. if (name == newName) { found = true; break; } } // Delete the contact if record exists. if (found == true) { // Creating a temporary file // with file pointer as tmpFile. File tmpFile = new File("temp.txt"); // Opening this temporary file // in ReadWrite Mode RandomAccessFile tmpraf = new RandomAccessFile(tmpFile, "rw"); // Set file pointer to start raf.seek(0); // Traversing the friendsContact.txt file while (raf.getFilePointer() < raf.length()) { // Reading the contact from the file nameNumberString = raf.readLine(); index = nameNumberString.indexOf('!'); name = nameNumberString.substring( 0, index); // Check if the fetched contact // is the one to be deleted if (name.equals(inputName)) { // Skip inserting this contact // into the temporary file continue; } // Add this contact in the temporary // file tmpraf.writeBytes(nameNumberString); // Add the line separator in the // temporary file tmpraf.writeBytes( System.lineSeparator()); } // The contact has been deleted now // So copy the updated content from // the temporary file to original file. // Set both files pointers to start raf.seek(0); tmpraf.seek(0); // Copy the contents from // the temporary file to original file. while (tmpraf.getFilePointer() < tmpraf.length()) { raf.writeBytes(tmpraf.readLine()); raf.writeBytes(System.lineSeparator()); } // Set the length of the original file // to that of temporary. raf.setLength(tmpraf.length()); // Closing the resources. tmpraf.close(); raf.close(); // Deleting the temporary file tmpFile.delete(); System.out.println(" Friend deleted. "); } // The contact to be deleted // could not be found else { // Closing the resources. raf.close(); // Print the message System.out.println(" Input name" + " does not exists. "); } } catch (IOException ioe) { System.out.println(ioe); } }}Output:Compiling and deleting the contact in the file: javac DeleteFriend.java java DeleteFriend pqr Friend deleted. java DeleteFriend tqr Input name does not exists.File: Create// Java program to create a file "friendsContact.txt"// and add a new contact in the file import java.io.File;import java.io.IOException;import java.io.RandomAccessFile;import java.lang.NumberFormatException; class AddFriend { public static void main(String data[]) { try { // Get the name of the contact to be updated // from the Command line argument String newName = data[0]; // Get the number to be updated // from the Command line argument long newNumber = Long.parseLong(data[1]); String nameNumberString; String name; long number; int index; // Using file pointer creating the file. File file = new File("friendsContact.txt"); if (!file.exists()) { // Create a new file if not exists. file.createNewFile(); } // Opening file in reading and write mode. RandomAccessFile raf = new RandomAccessFile(file, "rw"); boolean found = false; // Checking whether the name // of contact already exists. // getFilePointer() give the current offset // value from start of the file. while (raf.getFilePointer() < raf.length()) { // reading line from the file. nameNumberString = raf.readLine(); // splitting the string to get name and // number String[] lineSplit = nameNumberString.split("!"); // separating name and number. name = lineSplit[0]; number = Long.parseLong(lineSplit[1]); // if condition to find existence of record. if (name == newName || number == newNumber) { found = true; break; } } if (found == false) { // Enter the if block when a record // is not already present in the file. nameNumberString = newName + "!" + String.valueOf(newNumber); // writeBytes function to write a string // as a sequence of bytes. raf.writeBytes(nameNumberString); // To insert the next record in new line. raf.writeBytes(System.lineSeparator()); // Print the message System.out.println(" Friend added. "); // Closing the resources. raf.close(); } // The contact to be updated // could not be found else { // Closing the resources. raf.close(); // Print the message System.out.println(" Input name" + " does not exists. "); } } catch (IOException ioe) { System.out.println(ioe); } catch (NumberFormatException nef) { System.out.println(nef); } }}Read// Java program to read from file "friendsContact.txt"// and display the contacts import java.io.File;import java.io.IOException;import java.io.RandomAccessFile;import java.lang.NumberFormatException; class DisplayFriends { public static void main(String data[]) { try { String nameNumberString; String name; long number; int index; // Using file pointer creating the file. File file = new File("friendsContact.txt"); if (!file.exists()) { // Create a new file if not exists. file.createNewFile(); } // Opening file in reading and write mode. RandomAccessFile raf = new RandomAccessFile(file, "rw"); boolean found = false; // Traversing the file // getFilePointer() give the current offset // value from start of the file. while (raf.getFilePointer() < raf.length()) { // reading line from the file. nameNumberString = raf.readLine(); // splitting the string to get name and // number String[] lineSplit = nameNumberString.split("!"); // separating name and number. name = lineSplit[0]; number = Long.parseLong(lineSplit[1]); // Print the contact data System.out.println( "Friend Name: " + name + "\n" + "Contact Number: " + number + "\n"); } catch (IOException ioe) { System.out.println(ioe); } catch (NumberFormatException nef) { System.out.println(nef); } } }Update// Java program to update in the file "friendsContact.txt"// and change the number of an old contact import java.io.File;import java.io.IOException;import java.io.RandomAccessFile;import java.lang.NumberFormatException; class UpdateFriend { public static void main(String data[]) { try { // Get the name of the contact to be updated // from the Command line argument String newName = data[0]; // Get the number to be updated // from the Command line argument long newNumber = Long.parseLong(data[1]); String nameNumberString; String name; long number; int index; // Using file pointer creating the file. File file = new File("friendsContact.txt"); if (!file.exists()) { // Create a new file if not exists. file.createNewFile(); } // Opening file in reading and write mode. RandomAccessFile raf = new RandomAccessFile(file, "rw"); boolean found = false; // Checking whether the name // of contact already exists. // getFilePointer() give the current offset // value from start of the file. while (raf.getFilePointer() < raf.length()) { // reading line from the file. nameNumberString = raf.readLine(); // splitting the string to get name and // number String[] lineSplit = nameNumberString.split("!"); // separating name and number. name = lineSplit[0]; number = Long.parseLong(lineSplit[1]); // if condition to find existence of record. if (name == newName || number == newNumber) { found = true; break; } } // Update the contact if record exists. if (found == true) { // Creating a temporary file // with file pointer as tmpFile. File tmpFile = new File("temp.txt"); // Opening this temporary file // in ReadWrite Mode RandomAccessFile tmpraf = new RandomAccessFile(tmpFile, "rw"); // Set file pointer to start raf.seek(0); // Traversing the friendsContact.txt file while (raf.getFilePointer() < raf.length()) { // Reading the contact from the file nameNumberString = raf.readLine(); index = nameNumberString.indexOf('!'); name = nameNumberString.substring( 0, index); // Check if the fetched contact // is the one to be updated if (name.equals(inputName)) { // Update the number of this contact nameNumberString = name + "!" + String.valueOf(newNumber); } // Add this contact in the temporary // file tmpraf.writeBytes(nameNumberString); // Add the line separator in the // temporary file tmpraf.writeBytes( System.lineSeparator()); } // The contact has been updated now // So copy the updated content from // the temporary file to original file. // Set both files pointers to start raf.seek(0); tmpraf.seek(0); // Copy the contents from // the temporary file to original file. while (tmpraf.getFilePointer() < tmpraf.length()) { raf.writeBytes(tmpraf.readLine()); raf.writeBytes(System.lineSeparator()); } // Set the length of the original file // to that of temporary. raf.setLength(tmpraf.length()); // Closing the resources. tmpraf.close(); raf.close(); // Deleting the temporary file tmpFile.delete(); System.out.println(" Friend updated. "); } // The contact to be updated // could not be found else { // Closing the resources. raf.close(); // Print the message System.out.println(" Input name" + " does not exists. "); } } catch (IOException ioe) { System.out.println(ioe); } catch (NumberFormatException nef) { System.out.println(nef); } }}Delete// Java program to delete a contact// from the file "friendsContact.txt" import java.io.File;import java.io.IOException;import java.io.RandomAccessFile;import java.lang.NumberFormatException; class DeleteFriend { public static void main(String data[]) { try { // Get the name of the contact to be updated // from the Command line argument String newName = data[0]; String nameNumberString; String name; long number; int index; // Using file pointer creating the file. File file = new File("friendsContact.txt"); if (!file.exists()) { // Create a new file if not exists. file.createNewFile(); } // Opening file in reading and write mode. RandomAccessFile raf = new RandomAccessFile(file, "rw"); boolean found = false; // Checking whether the name of contact exists. // getFilePointer() give the current offset // value from start of the file. while (raf.getFilePointer() < raf.length()) { // reading line from the file. nameNumberString = raf.readLine(); // splitting the string to get name and // number String[] lineSplit = nameNumberString.split("!"); // separating name and number. name = lineSplit[0]; number = Long.parseLong(lineSplit[1]); // if condition to find existence of record. if (name == newName) { found = true; break; } } // Delete the contact if record exists. if (found == true) { // Creating a temporary file // with file pointer as tmpFile. File tmpFile = new File("temp.txt"); // Opening this temporary file // in ReadWrite Mode RandomAccessFile tmpraf = new RandomAccessFile(tmpFile, "rw"); // Set file pointer to start raf.seek(0); // Traversing the friendsContact.txt file while (raf.getFilePointer() < raf.length()) { // Reading the contact from the file nameNumberString = raf.readLine(); index = nameNumberString.indexOf('!'); name = nameNumberString.substring( 0, index); // Check if the fetched contact // is the one to be deleted if (name.equals(inputName)) { // Skip inserting this contact // into the temporary file continue; } // Add this contact in the temporary // file tmpraf.writeBytes(nameNumberString); // Add the line separator in the // temporary file tmpraf.writeBytes( System.lineSeparator()); } // The contact has been deleted now // So copy the updated content from // the temporary file to original file. // Set both files pointers to start raf.seek(0); tmpraf.seek(0); // Copy the contents from // the temporary file to original file. while (tmpraf.getFilePointer() < tmpraf.length()) { raf.writeBytes(tmpraf.readLine()); raf.writeBytes(System.lineSeparator()); } // Set the length of the original file // to that of temporary. raf.setLength(tmpraf.length()); // Closing the resources. tmpraf.close(); raf.close(); // Deleting the temporary file tmpFile.delete(); System.out.println(" Friend deleted. "); } // The contact to be deleted // could not be found else { // Closing the resources. raf.close(); // Print the message System.out.println(" Input name" + " does not exists. "); } } catch (IOException ioe) { System.out.println(ioe); } }}My Personal Notes arrow_drop_upSave LikePreviousSynchronization in JavaNext Java.io.InputStream Class in JavaRecommended ArticlesPage :How to Perform CRUD Operations in Room Database in Android?07, Feb 21Spring Boot - CRUD Operations13, Dec 21Spring Boot - CRUD Operations using MySQL Database21, Dec 21Spring Boot - CRUD Operations using MongoDB27, Dec 21CRUD Operation in MySQL Using PHP, Volley Android - Read Data06, Apr 21CRUD Operation in MySQL Using PHP, Volley Android - Insert Data06, Apr 21User Authentication and CRUD Operation with Firebase Realtime Database in Android11, Aug 21File handling in Java using FileWriter and FileReader27, Nov 16File Handling in Java01, Jan 22Different Ways to Copy Content From One File to Another File in Java23, Oct 20Java Program to Read Content From One File and Write it into Another File27, Jan 21How to Convert a Kotlin Source File to a Java Source File in Android?17, Nov 21Output of Java program | Set 12(Exception Handling)22, May 17Exception Handling with Method Overriding in Java10, Dec 18Java | Handling TLE While Using Arrays.sort() Function28, Aug 19Version Enhancements in Exception Handling introduced in Java SE 703, Apr 20Java - Exception Handling With Constructors in Inheritance05, Sep 21Event Handling in Java14, Nov 21Nested try blocks in Exception Handling in Java21, Oct 18Comparison of Exception Handling in C++ and Java10, Dec 10Exception handling in JSP09, Jul 18Java Program to Extract Content from a Java's .class File01, Nov 20java.nio.file.attribute.FileTime Class in Java07, Mar 21java.nio.file.SimpleFileVisitor Class in Java09, Mar 21Article Contributed By :rakesh797@rakesh797Vote for difficultyCurrent difficulty : HardEasy Normal Medium Hard ExpertImproved By :RishabhPrabhusivarahulArticle Tags :java-file-handlingJava-FunctionsJavaJava ProgramsPractice Tags :JavaReport IssueWriting code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load CommentsWhat's NewJava Backend Development- LIVE ClassesView DetailsComplete Interview PreparationView DetailsSystem Design-Live Classes for Working ProfessionalsView DetailsMost popular in JavaObject Oriented Programming (OOPs) Concept in JavaSplit() String method in Java with examplesArrays.sort() in Java with examplesReverse a string in JavaHow to iterate any Map in JavaMost visited in Java ProgramsConvert a String to Character array in JavaInitializing a List in JavaJava Programming ExamplesConvert Double to Integer in JavaImplementing a Linked List in Java using Class× 5th Floor, A-118,Sector-136, Noida, Uttar Pradesh - 201305 feedback@geeksforgeeks.orgCompanyAbout UsCareersPrivacy PolicyContact UsCopyright PolicyLearnAlgorithmsData StructuresLanguagesCS SubjectsVideo TutorialsWeb DevelopmentWeb TutorialsHTMLCSSJavaScriptBootstrapContributeWrite an ArticleWrite Interview ExperienceInternshipsVideos@geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It ! Start Your Coding Journey Now!Login Register