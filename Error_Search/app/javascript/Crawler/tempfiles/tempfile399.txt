Autoboxing and Unboxing in Java - GeeksforGeeksSkip to content TutorialsPractice DS & Algo.Must Do QuestionsDSA Topic-wiseDSA Company-wiseAlgorithmsAnalysis of AlgorithmsAsymptotic AnalysisWorst, Average and Best CasesAsymptotic NotationsLittle o and little omega notationsLower and Upper Bound TheoryAnalysis of LoopsSolving RecurrencesAmortized AnalysisWhat does 'Space Complexity' mean ?Pseudo-polynomial AlgorithmsPolynomial Time Approximation SchemeA Time Complexity QuestionSearching AlgorithmsSorting AlgorithmsGraph AlgorithmsPattern SearchingGeometric AlgorithmsMathematicalBitwise AlgorithmsRandomized AlgorithmsGreedy AlgorithmsDynamic ProgrammingDivide and ConquerBacktrackingBranch and BoundAll AlgorithmsData StructuresArraysLinked ListStackQueueBinary TreeBinary Search TreeHeapHashingGraphAdvanced Data StructureMatrixStringsAll Data StructuresInterview CornerCompany PreparationTop TopicsPractice Company QuestionsInterview ExperiencesExperienced InterviewsInternship InterviewsCompetititve ProgrammingDesign PatternsSystem Design TutorialMultiple Choice QuizzesLanguagesCC++JavaPythonC#JavaScriptjQuerySQLPHPScalaPerlGo LanguageHTMLCSSKotlinCS SubjectsMathematicsOperating SystemDBMSComputer NetworksComputer Organization and ArchitectureTheory of ComputationCompiler DesignDigital LogicSoftware EngineeringGATEGATE Computer Science NotesLast Minute NotesGATE CS Solved PapersGATE CS Original Papers and Official KeysGATE 2021 DatesGATE CS 2021 SyllabusImportant Topics for GATE CSWeb TechnologiesHTMLCSSJavaScriptAngularJSReactJSNodeJSBootstrapjQueryPHPSoftware DesignsSoftware Design PatternsSystem Design TutorialSchool LearningSchool ProgrammingMathematicsNumber SystemAlgebraTrigonometryStatisticsProbabilityGeometryMensurationCalculusMaths Notes (Class 8-12)Class 8 NotesClass 9 NotesClass 10 NotesClass 11 NotesClass 12 NotesNCERT SolutionsClass 8 Maths SolutionClass 9 Maths SolutionClass 10 Maths SolutionClass 11 Maths SolutionClass 12 Maths SolutionRD Sharma SolutionsClass 8 Maths SolutionClass 9 Maths SolutionClass 10 Maths SolutionClass 11 Maths SolutionClass 12 Maths SolutionPhysics Notes (Class 8-11)Class 8 NotesClass 9 NotesClass 10 NotesClass 11 NotesISRO CSISRO CS Solved PapersISRO CS Original Papers and Official KeysISRO CS Syllabus for Scientist/Engineer ExamUGC NET CSUGC NET CS Notes Paper IIUGC NET CS Notes Paper IIIUGC NET CS Solved PapersStudentCampus Ambassador ProgramSchool Ambassador ProgramProjectGeek of the MonthCampus Geek of the MonthPlacement CourseCompetititve ProgrammingTestimonialsGeek on the TopCareersInternshipJobsApply for JobsPost a JobCourses WriteCome write articles for us and get featuredPracticeLearn and code with the best industry expertsPremiumGet access to ad-free content, doubt assistance and more!JobsCome and find your dream job with usGeeks DigestQuizzesGeeks CampusGblog ArticlesIDECampus Mantri HomeSaved VideosCoursesGBlogPuzzlesWhat's New ? Change Language Data StructuresAlgorithmsInterview PreparationTopic-wise PracticeC++JavaPythonCompetitive ProgrammingMachine LearningWeb DevelopmentPuzzlesProject IdeasGFG School Related Articles ▲Related ArticlesJava.Lang.Short class in JavaJava.Lang.Long class in JavaJava.Lang.Float class in JavaJava.Lang.Double class in JavaJava.lang.Boolean Class in JavaJava.lang.Character Class in JavaAutoboxing and Unboxing in JavaWrapper Classes in JavaPrimitive Wrapper Classes are Immutable in JavaJava.lang.Number Class in JavaJava.lang.Integer class in JavaJava.Lang.Byte class in JavaTable of ContentsJava.Lang.Short class in JavaJava.Lang.Long class in JavaJava.Lang.Float class in JavaJava.Lang.Double class in JavaJava.lang.Boolean Class in JavaJava.lang.Character Class in JavaAutoboxing and Unboxing in JavaWrapper Classes in JavaPrimitive Wrapper Classes are Immutable in JavaJava.lang.Number Class in JavaJava.lang.Integer class in JavaJava.Lang.Byte class in JavaImprove Article Save Article Like Article Autoboxing and Unboxing in JavaDifficulty Level : EasyLast Updated : 24 Jan, 2022In Java, primitive data types are treated differently so do there comes the introduction of wrapper classes where two components play a role namely Autoboxing and Unboxing. Autoboxing refers to the conversion of a primitive value into an object of the corresponding wrapper class is called autoboxing. For example, converting int to Integer class. The Java compiler applies autoboxing when a primitive value is: Passed as a parameter to a method that expects an object of the corresponding wrapper class.Assigned to a variable of the corresponding wrapper class.Unboxing on the other hand refers to converting an object of a wrapper type to its corresponding primitive value. For example conversion of Integer to int. The Java compiler applies to unbox when an object of a wrapper class is: Passed as a parameter to a method that expects a value of the corresponding primitive type.Assigned to a variable of the corresponding primitive type.Primitive TypeWrapper ClassbooleanBooleanbyteBytecharCharacterfloat Floatint IntegerlongLongshort ShortdoubleDoubleThe following table lists the primitive types and their corresponding wrapper classes, which are used by the Java compiler for autoboxing and unboxing. Now let us discuss a few advantages of autoboxing and unboxing in order to get why we are using it. Autoboxing and unboxing lets developers write cleaner code, making it easier to read.The technique lets us use primitive types and Wrapper class objects interchangeably and we do not need to perform any typecasting explicitly.Example 1:Java// Java program to illustrate the Concept// of Autoboxing and Unboxing // Importing required classesimport java.io.*; // Main classclass GFG { // Main driver method public static void main(String[] args) { // Creating an Integer Object // with custom value say it be 10 Integer i = new Integer(10); // Unboxing the Object int i1 = i; // Print statements System.out.println("Value of i:" + i); System.out.println("Value of i1: " + i1); // Autoboxing of character Character gfg = 'a'; // Auto-unboxing of Character char ch = gfg; // Print statements System.out.println("Value of ch: " + ch); System.out.println(" Value of gfg: " + gfg); }}Output:Let’s understand how the compiler did autoboxing and unboxing in the example of Collections in Java using generics.Example 2:Java// Java Program to Illustrate Autoboxing // Importing required classesimport java.io.*;import java.util.*; // Main classclass GFG { // Main driver method public static void main(String[] args) { // Creating an empty Arraylist of integer type ArrayList<Integer> al = new ArrayList<Integer>(); // Adding the int primitives type values // using add() method // Autoboxing al.add(1); al.add(2); al.add(24); // Printing the ArrayList elements System.out.println("ArrayList: " + al); }}OutputArrayList: [1, 2, 24]Output explanation: In the above example, we have created a list of elements of the Integer type. We are adding int primitive type values instead of Integer Object and the code is successfully compiled. It does not generate a compile-time error as the Java compiler creates an Integer wrapper Object from primitive int i and adds it to the list. Example 3:Java// Java Program to Illustrate Autoboxing // Importing required classesimport java.io.*;import java.util.*; // Main classclass GFG { // Main driver method public static void main(String[] args) { // Creating an empty ArrayList of integer type List<Integer> list = new ArrayList<Integer>(); // Adding the int primitives type values by // converting them into Integer wrapper object for (int i = 0; i < 10; i++) System.out.println( list.add(Integer.valueOf(i))); }}Outputtrue true true true true true true true true trueAnother example of auto and unboxing is to find the sum of odd numbers in a list. An important point in the program is that the operators remainder (%) and unary plus (+=) operators do not apply to Integer objects. But still, code compiles successfully because the unboxing of Integer Object to primitive int value is taking place by invoking intValue() method at runtime. Example 4:Java// Java Program to Illustrate Find Sum of Odd Numbers// using Autobxing and Unboxing // Importing required classesimport java.io.*;import java.util.*; // Main classclass GFG { // Method 1 // To sum odd numbers public static int sumOfOddNumber(List<Integer> list) { // Initially setting sum to zero int sum = 0; for (Integer i : list) { // Unboxing of i automatically if (i % 2 != 0) sum += i; // Unboxing of i is done automatically // using intvalue implicitly if (i.intValue() % 2 != 0) sum += i.intValue(); } // Returning the odd sum return sum; } // Method 2 // Main driver method public static void main(String[] args) { // Creating an empty ArrayList of integer type List<Integer> list = new ArrayList<Integer>(); // Adding the int primitives type values to List for (int i = 0; i < 10; i++) list.add(i); // Getting sum of all odd numbers in List int sumOdd = sumOfOddNumber(list); // Printing sum of odd numbers System.out.println("Sum of odd numbers = " + sumOdd); }}OutputSum of odd numbers = 50This article is contributed by Nitsdheerendra. If you like GeeksforGeeks and would like to contribute, you can also write an article using write.geeksforgeeks.org or mail your article to review-team@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks. Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.Attention reader! Don’t stop learning now. Get hold of all the important Java Foundation and Collections concepts with the Fundamentals of Java and Java Collections Course at a student-friendly price and become industry ready. To complete your preparation from learning a language to DS Algo and many more, please refer Complete Interview Preparation Course.My Personal Notes arrow_drop_upSave LikePreviousJava.lang.Character Class in JavaNext Wrapper Classes in JavaRecommended ArticlesPage :Output of Java programs | Autoboxing and Unboxing11, Jan 19Method Overloading with Autoboxing and Widening in Java10, Apr 17Difference Between java.sql.Time, java.sql.Timestamp and java.sql.Date in Java07, Apr 21How to Convert java.sql.Date to java.util.Date in Java?02, Feb 21Different Ways to Convert java.util.Date to java.time.LocalDate in Java05, Jan 21How to Convert java.util.Date to java.sql.Date in Java?23, Mar 21Java.util.TreeMap.descendingMap() and descendingKeyset() in Java30, Oct 17Java.util.TreeMap.containskey() and containsValue() in Java01, Nov 17Java.util.TreeMap.pollFirstEntry() and pollLastEntry() in Java20, Nov 17Java.util.TreeMap.put() and putAll() in Java24, Nov 17Java.util.TreeMap.floorEntry() and floorKey() in Java24, Nov 17Java Swing | Translucent and shaped Window in Java17, May 18Difference between Core Java and Advanced Java31, Dec 19Difference between a Java Application and a Java Applet27, Feb 20Difference between Java IO and Java NIO21, May 20Difference between Java and Core Java30, Jun 20Why java.lang.VerifyError Occurs in Java and How to Solve this?19, Feb 21Java.util.BitSet class methods in Java with Examples | Set 218, Nov 16Java.Lang.Float class in Java27, Mar 17Java.io.BufferedInputStream class in Java20, Jan 17Java.io.ObjectInputStream Class in Java | Set 102, Feb 17Java.util.BitSet class in Java with Examples | Set 116, Nov 16Java.io.BufferedWriter class methods in Java29, Dec 16Java.io.DataOutputStream in Java06, Jan 17Article Contributed By :GeeksforGeeksVote for difficultyCurrent difficulty : EasyEasy Normal Medium Hard ExpertImproved By :solankimayankArticle Tags :java-wrapper-classJavaPractice Tags :JavaReport IssueWriting code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load CommentsWhat's NewJava Backend Development- LIVE ClassesView DetailsComplete Interview PreparationView DetailsSystem Design-Live Classes for Working ProfessionalsView DetailsMost popular in JavaArrays in JavaObject Oriented Programming (OOPs) Concept in JavaSplit() String method in Java with examplesFor-each loop in JavaArrays.sort() in Java with examplesMore related articles in JavaReverse a string in JavaArrayList in JavaHashMap in Java with ExamplesMultidimensional Arrays in JavaInitialize an ArrayList in Java× 5th Floor, A-118,Sector-136, Noida, Uttar Pradesh - 201305 feedback@geeksforgeeks.orgCompanyAbout UsCareersPrivacy PolicyContact UsCopyright PolicyLearnAlgorithmsData StructuresLanguagesCS SubjectsVideo TutorialsWeb DevelopmentWeb TutorialsHTMLCSSJavaScriptBootstrapContributeWrite an ArticleWrite Interview ExperienceInternshipsVideos@geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It ! Start Your Coding Journey Now!Login Register