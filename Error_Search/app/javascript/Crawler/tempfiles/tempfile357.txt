Throwable Class in Java with Examples - GeeksforGeeksSkip to content TutorialsPractice DS & Algo.Must Do QuestionsDSA Topic-wiseDSA Company-wiseAlgorithmsAnalysis of AlgorithmsAsymptotic AnalysisWorst, Average and Best CasesAsymptotic NotationsLittle o and little omega notationsLower and Upper Bound TheoryAnalysis of LoopsSolving RecurrencesAmortized AnalysisWhat does 'Space Complexity' mean ?Pseudo-polynomial AlgorithmsPolynomial Time Approximation SchemeA Time Complexity QuestionSearching AlgorithmsSorting AlgorithmsGraph AlgorithmsPattern SearchingGeometric AlgorithmsMathematicalBitwise AlgorithmsRandomized AlgorithmsGreedy AlgorithmsDynamic ProgrammingDivide and ConquerBacktrackingBranch and BoundAll AlgorithmsData StructuresArraysLinked ListStackQueueBinary TreeBinary Search TreeHeapHashingGraphAdvanced Data StructureMatrixStringsAll Data StructuresInterview CornerCompany PreparationTop TopicsPractice Company QuestionsInterview ExperiencesExperienced InterviewsInternship InterviewsCompetititve ProgrammingDesign PatternsSystem Design TutorialMultiple Choice QuizzesLanguagesCC++JavaPythonC#JavaScriptjQuerySQLPHPScalaPerlGo LanguageHTMLCSSKotlinCS SubjectsMathematicsOperating SystemDBMSComputer NetworksComputer Organization and ArchitectureTheory of ComputationCompiler DesignDigital LogicSoftware EngineeringGATEGATE Computer Science NotesLast Minute NotesGATE CS Solved PapersGATE CS Original Papers and Official KeysGATE 2021 DatesGATE CS 2021 SyllabusImportant Topics for GATE CSWeb TechnologiesHTMLCSSJavaScriptAngularJSReactJSNodeJSBootstrapjQueryPHPSoftware DesignsSoftware Design PatternsSystem Design TutorialSchool LearningSchool ProgrammingMathematicsNumber SystemAlgebraTrigonometryStatisticsProbabilityGeometryMensurationCalculusMaths Notes (Class 8-12)Class 8 NotesClass 9 NotesClass 10 NotesClass 11 NotesClass 12 NotesNCERT SolutionsClass 8 Maths SolutionClass 9 Maths SolutionClass 10 Maths SolutionClass 11 Maths SolutionClass 12 Maths SolutionRD Sharma SolutionsClass 8 Maths SolutionClass 9 Maths SolutionClass 10 Maths SolutionClass 11 Maths SolutionClass 12 Maths SolutionPhysics Notes (Class 8-11)Class 8 NotesClass 9 NotesClass 10 NotesClass 11 NotesISRO CSISRO CS Solved PapersISRO CS Original Papers and Official KeysISRO CS Syllabus for Scientist/Engineer ExamUGC NET CSUGC NET CS Notes Paper IIUGC NET CS Notes Paper IIIUGC NET CS Solved PapersStudentCampus Ambassador ProgramSchool Ambassador ProgramProjectGeek of the MonthCampus Geek of the MonthPlacement CourseCompetititve ProgrammingTestimonialsGeek on the TopCareersInternshipJobsApply for JobsPost a JobCourses WriteCome write articles for us and get featuredPracticeLearn and code with the best industry expertsPremiumGet access to ad-free content, doubt assistance and more!JobsCome and find your dream job with usGeeks DigestQuizzesGeeks CampusGblog ArticlesIDECampus Mantri HomeSaved VideosCoursesGBlogPuzzlesWhat's New ? Change Language Data StructuresAlgorithmsInterview PreparationTopic-wise PracticeC++JavaPythonCompetitive ProgrammingMachine LearningWeb DevelopmentPuzzlesProject IdeasGFG School Related Articles ▲Related ArticlesProtractorView in AndroidThrowable getSuppressed() method in Java with ExamplesThrowable initCause() method in Java with ExamplesThrowable Class in Java with Examplesthrow and throws in JavaUser-defined Custom Exception in JavaInfinity or Exception in Java when divide by 0?Java Multiple Catch BlockChained Exceptions in JavaNull Pointer Exception In JavaOutput of Java program | Set 12(Exception Handling)Java | Exception Handling | Question 1Java | Exception Handling | Question 2Java | Exception Handling | Question 3Java | Exception Handling | Question 4Java | Exception Handling | Question 8Java | Exception Handling | Question 6Java | Exception Handling | Question 7Java | Exception Handling | Question 8Nested try blocks in Exception Handling in JavaFlow control in try catch finally in JavaTypes of Exception in Java with ExamplesChecked vs Unchecked Exceptions in JavaExceptions in JavaArrays in JavaSplit() String method in Java with examplesArrays.sort() in Java with examplesFor-each loop in JavaReverse a string in JavaHow to iterate any Map in JavaTable of ContentsProtractorView in AndroidThrowable getSuppressed() method in Java with ExamplesThrowable initCause() method in Java with ExamplesThrowable Class in Java with Examplesthrow and throws in JavaUser-defined Custom Exception in JavaInfinity or Exception in Java when divide by 0?Java Multiple Catch BlockChained Exceptions in JavaNull Pointer Exception In JavaOutput of Java program | Set 12(Exception Handling)Java | Exception Handling | Question 1Java | Exception Handling | Question 2Java | Exception Handling | Question 3Java | Exception Handling | Question 4Java | Exception Handling | Question 8Java | Exception Handling | Question 6Java | Exception Handling | Question 7Java | Exception Handling | Question 8Nested try blocks in Exception Handling in JavaFlow control in try catch finally in JavaTypes of Exception in Java with ExamplesChecked vs Unchecked Exceptions in JavaExceptions in JavaArrays in JavaSplit() String method in Java with examplesArrays.sort() in Java with examplesFor-each loop in JavaReverse a string in JavaHow to iterate any Map in JavaImprove Article Save Article Like Article Throwable Class in Java with ExamplesLast Updated : 24 Sep, 2021Classes and Objects are basic concepts of Object-Oriented Programming which revolve around the real-life entities. A class is a user-defined blueprint or prototype from which objects are created. It represents the set of properties or methods that are common to all objects of one type. In this article, we will discuss the Throwable class, its constructors and different methods available in this class. The Throwable class is the superclass of every error and exception in the Java language. Only objects that are one of the subclasses this class are thrown by any “Java Virtual Machine” or may be thrown by the Java throw statement. For the motives of checking of exceptions during compile-time, Throwable and any subclass of Throwable which is not also a subclass of either Error or RuntimeException are considered as checked exceptions.Throwable class is the root class of Java Exception Hierarchy and is inherited by two subclasses: 1.Exception 2.Error The throwable class implements Serializable Interface and the direct known classes to Throwable are Error and Exception. Throwable contains a snapshot of the execution stack of its thread at the time it was created. It can also contain a message string that gives more information about the error. It can also suppress other throwables from being propagated. If a user wants to create his own, custom throwable, then he/she can extend Throwable class. Example: Class MyThrowable extends Throwable{ //Here the user can create his own custom throwable }Class GFG{ Public void test() throws MyThrowable{ // the custom throwable created can be used as follows throw new MyThrowable(); } } The class declaration for java.lang.Throwable class is as follows: Javapublic class Throwable extends Object implements SerializableConstructors: Any class can have any one of the three or all the three types of constructors. They are default, parameterized and non-parameterized constructors. This class primarily has the following constructors defined: Public Constructors Throwable(): It is a non-parameterized constructor which constructs a new Throwable with null as its detailed message.Throwable(String message): It is a parameterized constructor which constructs a new Throwable with the specific detailed message.Throwable(String message, Throwable cause): It is a parameterized constructor which constructs a new Throwable with the specific detailed message and a cause.Throwable(Throwable cause): It is a parameterized constructor which constructs a new Throwable with the specific cause and a detailed message of the cause by converting the case to the String using toString() method.Protected constructors 1. Throwable(String message, Throwable cause, boolean enableSuppression, boolean writableStackTrace):It Constructs a new throwable with the specified detail message, cause, suppression enabled or disabled, and writable stack trace enabled or disabled.The parameters are:- message – the detail message. cause – the cause. (A null value is permitted, and indicates that the cause is nonexistent or unknown.) enableSuppression – whether or not suppression is enabled or disabled writableStackTrace – whether or not the stack trace should be writable.Methods: Apart from the above mentioned constructors, there are also many predefined methods available in the throwable class. They are: 1. addSuppressed(Throwable exception): This method appends the specified exception to the exceptions that were suppressed in order to deliver this exception. Syntax: Public final void addSuppressed(Throwable exception) Returns: This method does not returns anything.2. fillInStackTrace():Fills in the execution stack trace. This method records information about the current state of the stack frames for the current thread within the current Throwable object. Syntax: public Throwable fillInStackTrace () Returns: a reference to the current Throwable instance.3. getCause(): It returns the cause that was supplied via one of the constructors requiring a Throwable , or that was set after creation with the initCause() method. Syntax: public Throwable getCause () Returns: the cause of current Throwable. If the cause is nonexistent or unknown, it returns null.4. getLocalizedMessage(): This method creates a localized description of current Throwable. Syntax: public String getLocalizedMessage () Returns: The localized description of current Throwable5. getMessage():Returns the detail message string of current throwable. Syntax: public String getMessage () Returns: the detailed message string of current Throwable instance( may also return null)6. getStackTrace(): This method provides programmatic access to the stack trace information printed by printStackTrace(). It returns an array of stack trace elements, each representing one stack frame. The zeroth element of the array (assume that the array’s length is non-zero) is the last method invocation in the sequence. It also represents as the top of the stack and is the point at which this throwable was created and thrown. The last element of the array (assuming the array’s length is non-zero) is the first method invocation in the sequence and it represents the bottom of the stack. Syntax: public StackTraceElement[] getStackTrace () Returns: an array of stack trace elements representing the stack trace related to current Throwable.7. getSuppressed():Returns an array containing all of the exceptions that were suppressed, in order to deliver this exception. If no exceptions were suppressed or suppression is disabled, an empty array is returned. Syntax: public final Throwable[] getSuppressed () Returns: an array containing all of the exceptions that were suppressed to deliver this exception.8. initCause(Throwable cause):Initializes the cause of current Throwable to the specified value. This method can be called at most once. It is generally called from within the constructor, or immediately after creating the throwable. Syntax: public Throwable initCause (Throwable cause) Parameters: Throwable cause- the cause of current Throwable. Throws: 1.IllegalArgumentException: This exception is thrown if cause is the current throwable, because a throwable cannot be its own cause. 2. IllegalStateException: It occurs if this method has already been called on current throwable. Returns: a reference to current Throwable instance.9. printStackTrace():Prints the current throwable and its backtrace to the standard error stream. Syntax: public void printStackTrace ()Returns: This method returns nothing.10. printStackTrace(PrintWriter s):Prints current throwable and its backtrace to the specified print writer. Syntax: public void printStackTrace (PrintWriter s) Parameters: PrintWriter- It is the PrintWriter to use for output Returns: This method returns nothing.11. printStackTrace(PrintStream s):Prints current throwable and its backtrace to the specified print stream. Syntax: public void printStackTrace (PrintStream s) Parameters: PrintStream- It is the PrintStream to use for output Returns: This method returns nothing.12. setStackTrace(StackTraceElement[] stackTrace):This method sets the stack trace elements that will be returned by getStackTrace() and printed by printStackTrace() and related methods. Syntax: public void setStackTrace (StackTraceElement[] stackTrace) Parameter: StackTraceElement- These are the stack trace elements to be associated with current Throwable. Throws: NullPointerException- if stackTrace is null or if any of the elements of stackTrace are null Returns: This method returns nothing.13. toString(): This method returns a short description of current throwable. Syntax: public String toString ()Returns: a string representation of current throwable.Below program demonstrates the toString() method of Throwable class:Java// Java program to demonstrate// the toString() Method. import java.io.*; class GFG { // Main Method public static void main(String[] args) throws Exception { try { testException(); } catch (Throwable e) { // Print using tostring() System.out.println("Exception: " + e.toString()); } } // Method which throws Exception public static void testException() throws Exception { throw new Exception( "New Exception Thrown"); }}Output: Exception: java.lang.Exception: New Exception Thrown Below program demonstrate the getMessage() method of java.lang.Throwable Class: Java// Java program to demonstrate// the getMessage() Method. import java.io.*; class GFG { // Main Method public static void main(String[] args) throws Exception { try { // Divide the numbers divide(2, 0); } catch (ArithmeticException e) { System.out.println( "Message String = " + e.getMessage()); } } // Method which divides two numbers public static void divide(int a, int b) throws ArithmeticException { int c = a / b; System.out.println("Result:" + c); }}Output: Message String = / by zero Reference: https://docs.oracle.com/javase/9/docs/api/java/lang/Throwable.html/ Attention reader! Don’t stop learning now. Get hold of all the important Java Foundation and Collections concepts with the Fundamentals of Java and Java Collections Course at a student-friendly price and become industry ready. To complete your preparation from learning a language to DS Algo and many more, please refer Complete Interview Preparation Course.My Personal Notes arrow_drop_upSave LikePreviousThrowable initCause() method in Java with ExamplesNext throw and throws in JavaRecommended ArticlesPage :Throwable printStackTrace() method in Java with Examples25, Oct 18Throwable toString() method in Java with Examples25, Oct 18Throwable getCause() method in Java with Examples22, Oct 18Throwable getLocalizedMessage() method in Java with Examples22, Oct 18Throwable getMessage() method in Java with Examples22, Oct 18Throwable getStackTrace() method in Java with Examples24, Oct 18Throwable getSuppressed() method in Java with Examples24, Oct 18Throwable initCause() method in Java with Examples24, Oct 18Throwable addSuppressed() method in Java with Examples26, Oct 18Throwable setStackTrace() method in Java with Examples26, Oct 18Throwable fillInStackTrace() method in Java31, Aug 18Java.lang.Class class in Java | Set 130, Mar 17Java.lang.Class class in Java | Set 203, Apr 17Java.util.BitSet class methods in Java with Examples | Set 218, Nov 16Java.util.BitSet class in Java with Examples | Set 116, Nov 16Java.util.concurrent.RecursiveAction class in Java with Examples17, Jun 19Java.util.concurrent.Phaser class in Java with Examples22, Apr 19Java.util.concurrent.RecursiveTask class in Java with Examples27, Jun 19Java class dependency analyzer in Java 8 with Examples29, Jan 20Java.awt.image.RescaleOp Class in Java with Examples17, Jul 19Implement Pair Class with Unit Class in Java using JavaTuples20, Sep 18Implement Triplet Class with Pair Class in Java using JavaTuples20, Sep 18Implement Quintet Class with Quartet Class in Java using JavaTuples20, Sep 18Implement Quartet Class with Triplet Class in Java using JavaTuples20, Sep 18Article Contributed By :Slash_IT@Slash_ITVote for difficultyEasy Normal Medium Hard ExpertImproved By :aman1699anikakapoorArticle Tags :Java-ClassesJava-lang packagejava-ThrowableJavaPractice Tags :JavaReport IssueWriting code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load CommentsWhat's NewJava Backend Development- LIVE ClassesView DetailsComplete Interview PreparationView DetailsSystem Design-Live Classes for Working ProfessionalsView DetailsMost popular in JavaObject Oriented Programming (OOPs) Concept in JavaArrayList in JavaHashMap in Java with ExamplesMultidimensional Arrays in JavaInitialize an ArrayList in JavaMore related articles in JavaHow to add an element to an Array in Java?Overriding in JavaLinkedList in JavaInterfaces in JavaStack Class in Java× 5th Floor, A-118,Sector-136, Noida, Uttar Pradesh - 201305 feedback@geeksforgeeks.orgCompanyAbout UsCareersPrivacy PolicyContact UsCopyright PolicyLearnAlgorithmsData StructuresLanguagesCS SubjectsVideo TutorialsWeb DevelopmentWeb TutorialsHTMLCSSJavaScriptBootstrapContributeWrite an ArticleWrite Interview ExperienceInternshipsVideos@geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It ! Start Your Coding Journey Now!Login Register