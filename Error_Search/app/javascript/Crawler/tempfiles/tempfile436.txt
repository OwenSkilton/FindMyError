Difference Between Lock and Monitor in Java Concurrency - GeeksforGeeksSkip to content TutorialsPractice DS & Algo.Must Do QuestionsDSA Topic-wiseDSA Company-wiseAlgorithmsAnalysis of AlgorithmsAsymptotic AnalysisWorst, Average and Best CasesAsymptotic NotationsLittle o and little omega notationsLower and Upper Bound TheoryAnalysis of LoopsSolving RecurrencesAmortized AnalysisWhat does 'Space Complexity' mean ?Pseudo-polynomial AlgorithmsPolynomial Time Approximation SchemeA Time Complexity QuestionSearching AlgorithmsSorting AlgorithmsGraph AlgorithmsPattern SearchingGeometric AlgorithmsMathematicalBitwise AlgorithmsRandomized AlgorithmsGreedy AlgorithmsDynamic ProgrammingDivide and ConquerBacktrackingBranch and BoundAll AlgorithmsData StructuresArraysLinked ListStackQueueBinary TreeBinary Search TreeHeapHashingGraphAdvanced Data StructureMatrixStringsAll Data StructuresInterview CornerCompany PreparationTop TopicsPractice Company QuestionsInterview ExperiencesExperienced InterviewsInternship InterviewsCompetititve ProgrammingDesign PatternsSystem Design TutorialMultiple Choice QuizzesLanguagesCC++JavaPythonC#JavaScriptjQuerySQLPHPScalaPerlGo LanguageHTMLCSSKotlinCS SubjectsMathematicsOperating SystemDBMSComputer NetworksComputer Organization and ArchitectureTheory of ComputationCompiler DesignDigital LogicSoftware EngineeringGATEGATE Computer Science NotesLast Minute NotesGATE CS Solved PapersGATE CS Original Papers and Official KeysGATE 2021 DatesGATE CS 2021 SyllabusImportant Topics for GATE CSWeb TechnologiesHTMLCSSJavaScriptAngularJSReactJSNodeJSBootstrapjQueryPHPSoftware DesignsSoftware Design PatternsSystem Design TutorialSchool LearningSchool ProgrammingMathematicsNumber SystemAlgebraTrigonometryStatisticsProbabilityGeometryMensurationCalculusMaths Notes (Class 8-12)Class 8 NotesClass 9 NotesClass 10 NotesClass 11 NotesClass 12 NotesNCERT SolutionsClass 8 Maths SolutionClass 9 Maths SolutionClass 10 Maths SolutionClass 11 Maths SolutionClass 12 Maths SolutionRD Sharma SolutionsClass 8 Maths SolutionClass 9 Maths SolutionClass 10 Maths SolutionClass 11 Maths SolutionClass 12 Maths SolutionPhysics Notes (Class 8-11)Class 8 NotesClass 9 NotesClass 10 NotesClass 11 NotesISRO CSISRO CS Solved PapersISRO CS Original Papers and Official KeysISRO CS Syllabus for Scientist/Engineer ExamUGC NET CSUGC NET CS Notes Paper IIUGC NET CS Notes Paper IIIUGC NET CS Solved PapersStudentCampus Ambassador ProgramSchool Ambassador ProgramProjectGeek of the MonthCampus Geek of the MonthPlacement CourseCompetititve ProgrammingTestimonialsGeek on the TopCareersInternshipJobsApply for JobsPost a JobCourses WriteCome write articles for us and get featuredPracticeLearn and code with the best industry expertsPremiumGet access to ad-free content, doubt assistance and more!JobsCome and find your dream job with usGeeks DigestQuizzesGeeks CampusGblog ArticlesIDECampus Mantri HomeSaved VideosCoursesGBlogPuzzlesWhat's New ? Change Language Data StructuresAlgorithmsInterview PreparationTopic-wise PracticeC++JavaPythonCompetitive ProgrammingMachine LearningWeb DevelopmentPuzzlesProject IdeasGFG School Related Articles ▲Related ArticlesArrays in JavaSplit() String method in Java with examplesArrays.sort() in Java with examplesFor-each loop in JavaReverse a string in JavaHow to iterate any Map in JavaObject Oriented Programming (OOPs) Concept in JavaHashMap in Java with ExamplesInitialize an ArrayList in JavaMultidimensional Arrays in JavaStack Class in JavaArrayList in JavaHow to add an element to an Array in Java?Overriding in JavaCollections.sort() in Java with ExamplesLinkedList in JavaSingleton Class in JavaQueue Interface In JavaInterfaces in JavaSet in JavaInheritance in JavaClasses and Objects in JavaCollections in JavaMath pow() method in Java with ExampleHow to determine length or size of an Array in Java?Difference Between == and .equals() Method in JavaCompare two Strings in JavaInitializing a List in JavaPolymorphism in JavaMultithreading in JavaTable of ContentsArrays in JavaSplit() String method in Java with examplesArrays.sort() in Java with examplesFor-each loop in JavaReverse a string in JavaHow to iterate any Map in JavaObject Oriented Programming (OOPs) Concept in JavaHashMap in Java with ExamplesInitialize an ArrayList in JavaMultidimensional Arrays in JavaStack Class in JavaArrayList in JavaHow to add an element to an Array in Java?Overriding in JavaCollections.sort() in Java with ExamplesLinkedList in JavaSingleton Class in JavaQueue Interface In JavaInterfaces in JavaSet in JavaInheritance in JavaClasses and Objects in JavaCollections in JavaMath pow() method in Java with ExampleHow to determine length or size of an Array in Java?Difference Between == and .equals() Method in JavaCompare two Strings in JavaInitializing a List in JavaPolymorphism in JavaMultithreading in JavaImprove Article Save Article Like Article Difference Between Lock and Monitor in Java ConcurrencyDifficulty Level : EasyLast Updated : 18 Dec, 2021Java Concurrency basically deals with concepts like multithreading and other concurrent operations. This is done to ensure maximum and efficient utilization of CPU performance thereby reducing its idle time in general. Locks have been in existence to implement multithreading much before the monitors have come to usage. Back then locks (or mutex) were parts of threads inside the program that worked on flag mechanisms to synchronize with other threads. They have always been working as a tool to provide synchronous access control over resources and shared objects. With further advancements, the use of monitors started as a mechanism to handle access and coordinate threads which proved to be more efficient, error-free, and compatible in object-oriented programs. Before we move on to find the differences between the two let’s have a closer look into each of them.Overview of Lock (or Mutex)Lock originally has been used in the logical section of the threads that were used to provide synchronized access control between the threads. Threads checked the availability of access control over shared objects through flags attached to the object that indicated whether or not the shared resource is free (unlocked) or busy (locked). Now the concurrency API provides support of using locks explicitly using Lock Interface in java. The explicit method has a finer control mechanism as compared to the implicit implementation of locks using monitors. Before we move on to discuss monitors let us look at an illustration that demonstrates the functioning of basic locks.Monitor – OverviewMonitor in Java Concurrency is a synchronization mechanism that provides the fundamental requirements of multithreading namely mutual exclusion between various threads and cooperation among threads working at common tasks. Monitors basically ‘monitor’ the access control of shared resources and objects among threads. Using this construct only one thread at a time gets access control over the critical section at the resource while other threads are blocked and made to wait until certain conditions. In Java, monitors are implemented using synchronized keyword (synchronized blocks, synchronized methods or classes). For example, let’s see how two threads t1 and t2 are synchronized to use a shared data printer object. Java// Java Program to Illustrate Monitoe in Java Concurrency // Importing input output classesimport java.io.*; // Class 1// Helepr classclass SharedDataPrinter { // Monitor implementation is carried on by // Using synchronous method // Method (synchronised) synchronized public void display(String str) { for (int i = 0; i < str.length(); i++) { System.out.print(str.charAt(i)); // Try-catch bloc kfor exceptions as we are // using sleep() method try { // Making thread to sleep for very // nanoseconds as passed in the arguments Thread.sleep(100); } catch (Exception e) { } } }} // Class 2// Helper class extending the Thread classclass Thread1 extends Thread { SharedDataPrinter p; // Thread public Thread1(SharedDataPrinter p) { // This keyword refers to current instance itself this.p = p; } // run() method for this thread invoked as // start() method is called in the main() method public void run() { // Print statement p.display("Geeks"); }} // Class 2 (similar to class 1)// Helper class extending the Thread classclass Thread2 extends Thread { SharedDataPrinter p; public Thread2(SharedDataPrinter p) { this.p = p; } public void run() { // Print statement p.display(" for Geeks"); }} // Class 3// Main classclass GFG { // Main driver method public static void main(String[] args) { // Instance of a shared resource used to print // strings (single character at a time) SharedDataPrinter printer = new SharedDataPrinter(); // Thread objects sharing data printer Thread1 t1 = new Thread1(printer); Thread2 t2 = new Thread2(printer); // Calling start methods for both threads // using the start() method t1.start(); t2.start(); }}Output:Finally wrapping off with the article let us discuss the major differences between Lock and Monitor in concurrency in java that is pictorially depicted in the image below shown as follows: Lock (Mutex)MonitorHave been used since the coining of Multithreading concepts.Came into existence with later developments in the field.Usually in the form of a data field or flag that helps implement coordination. Synchronicity is implemented via a construct mechanism.A similarCritical Section (the lock/unlock functions and other operations on the shared object) is a part of the thread itself. Similar mechanism of lock/unlock for synchronization along with operational functions (such as read/write) is present with the shared object only.Implementation of mutual exclusion (execution of one thread preventing others’ execution) and cooperation (threads working on a common task) is the responsibility of the threads. Mutual Exclusion between different set of threads and cooperation (if needed) is all handled by the shared resource itself.Loosely linked mechanism as all the threads are independent and handle their synchronization in access control themselves.The mechanism is quite robust and reliable as everything is managed at the resource side only.This method is highly prone to errors when locking time and the constructed mechanism use thread synchronization operation time slice are comparable. There is a good chance that while a thread puts a lock its time slice gets over and the other thread starts working on the resource.The monitors are well designed to work with small thread pools and perform very efficiently unless inter thread communication becomes a necessity.Ready queue or thread pools are either not present or else handled by the operating system.Threads wait in queues managed by the shared object they all are trying to access control over.Locks independently are not much in use and are implemented much less widely. Monitors intrinsically use inter-thread locks only and are much more in usage. Note: As we see monitors themselves are implemented with the necessary support of locks, it is often said that they are not different but complementary in the nature of their existence are operating Attention reader! Don’t stop learning now. Get hold of all the important Java Foundation and Collections concepts with the Fundamentals of Java and Java Collections Course at a student-friendly price and become industry ready. To complete your preparation from learning a language to DS Algo and many more, please refer Complete Interview Preparation Course.My Personal Notes arrow_drop_upSave LikePreviousHow to Take Input From User Separated By Space in Java ?Next How to Install Java on Arch Linux?Recommended ArticlesPage :What is Lock Striping in Java Concurrency?09, Oct 20Object Level Lock vs Class Level Lock in Java24, Mar 21Difference between Monitor and Television07, Apr 20How to Monitor a Thread's Status in Java?26, Apr 21How to Install and Use Scout_Realtime to Monitor Server and Process Metrics in Linux?19, Mar 21Java Concurrency - yield(), sleep() and join() Methods27, Apr 17Monitor and Find Statistics for Linux Procesess Using pidstat Tool30, Jan 21Monitor Linux Daemon, Filesystem, CPU, Network and Files Using Monit09, Feb 21How to Install and Use bmon Real Time Bandwidth Monitor in Linux?09, Feb 21saidar Utility - Monitor the Linux Box30, Jan 21How to Make a Process Monitor in Python?16, Mar 21How to Monitor Linux Commands Executed by System Users in Real-time?03, Mar 21Installing atop Tool To Monitor the System Process in Linux10, Mar 21How to Monitor Processor, Memory, Network Performance using dstat in Linux?24, Mar 21How to Use Glances to Monitor Remote Linux in Web Server Mode?07, May 21Logcheck Tool - Monitor Kali Linux System Log Activity16, May 21Using htop to Monitor System Processes on Linux28, Jun 21Python script to monitor website changes22, Jan 21Microsoft Azure - Configuring an Alert Rule with Azure Monitor13, Dec 21Lock framework vs Thread synchronization in Java27, Feb 19AtomicInteger for Lock Free Algorithms in Java15, Sep 20Lock Free Stack using Java15, Sep 20Object Level Lock in Java17, Mar 21How to Check if a Thread Holds Lock on a Particular Object in Java?27, Aug 21Article Contributed By :taoist_lee@taoist_leeVote for difficultyCurrent difficulty : EasyEasy Normal Medium Hard ExpertImproved By :simmytarika5surinderdawra388as5853535Article Tags :PickedJavaPractice Tags :JavaReport IssueWriting code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load CommentsWhat's NewJava Backend Development- LIVE ClassesView DetailsComplete Interview PreparationView DetailsSystem Design-Live Classes for Working ProfessionalsView DetailsMost popular in JavaJava Programming ExamplesStream In JavaStrings in JavaSystem.out.println in JavaIntroduction to JavaMore related articles in JavaScanner Class in JavaDifferent ways of Reading a text file in JavaFunctional Interfaces in JavaComparator Interface in Java with ExamplesStringBuilder Class in Java with Examples× 5th Floor, A-118,Sector-136, Noida, Uttar Pradesh - 201305 feedback@geeksforgeeks.orgCompanyAbout UsCareersPrivacy PolicyContact UsCopyright PolicyLearnAlgorithmsData StructuresLanguagesCS SubjectsVideo TutorialsWeb DevelopmentWeb TutorialsHTMLCSSJavaScriptBootstrapContributeWrite an ArticleWrite Interview ExperienceInternshipsVideos@geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It ! Start Your Coding Journey Now!Login Register