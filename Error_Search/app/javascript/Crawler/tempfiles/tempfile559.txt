Collections Class in Java - GeeksforGeeksSkip to content TutorialsPractice DS & Algo.Must Do QuestionsDSA Topic-wiseDSA Company-wiseAlgorithmsAnalysis of AlgorithmsAsymptotic AnalysisWorst, Average and Best CasesAsymptotic NotationsLittle o and little omega notationsLower and Upper Bound TheoryAnalysis of LoopsSolving RecurrencesAmortized AnalysisWhat does 'Space Complexity' mean ?Pseudo-polynomial AlgorithmsPolynomial Time Approximation SchemeA Time Complexity QuestionSearching AlgorithmsSorting AlgorithmsGraph AlgorithmsPattern SearchingGeometric AlgorithmsMathematicalBitwise AlgorithmsRandomized AlgorithmsGreedy AlgorithmsDynamic ProgrammingDivide and ConquerBacktrackingBranch and BoundAll AlgorithmsData StructuresArraysLinked ListStackQueueBinary TreeBinary Search TreeHeapHashingGraphAdvanced Data StructureMatrixStringsAll Data StructuresInterview CornerCompany PreparationTop TopicsPractice Company QuestionsInterview ExperiencesExperienced InterviewsInternship InterviewsCompetititve ProgrammingDesign PatternsSystem Design TutorialMultiple Choice QuizzesLanguagesCC++JavaPythonC#JavaScriptjQuerySQLPHPScalaPerlGo LanguageHTMLCSSKotlinCS SubjectsMathematicsOperating SystemDBMSComputer NetworksComputer Organization and ArchitectureTheory of ComputationCompiler DesignDigital LogicSoftware EngineeringGATEGATE Computer Science NotesLast Minute NotesGATE CS Solved PapersGATE CS Original Papers and Official KeysGATE 2021 DatesGATE CS 2021 SyllabusImportant Topics for GATE CSWeb TechnologiesHTMLCSSJavaScriptAngularJSReactJSNodeJSBootstrapjQueryPHPSoftware DesignsSoftware Design PatternsSystem Design TutorialSchool LearningSchool ProgrammingMathematicsNumber SystemAlgebraTrigonometryStatisticsProbabilityGeometryMensurationCalculusMaths Notes (Class 8-12)Class 8 NotesClass 9 NotesClass 10 NotesClass 11 NotesClass 12 NotesNCERT SolutionsClass 8 Maths SolutionClass 9 Maths SolutionClass 10 Maths SolutionClass 11 Maths SolutionClass 12 Maths SolutionRD Sharma SolutionsClass 8 Maths SolutionClass 9 Maths SolutionClass 10 Maths SolutionClass 11 Maths SolutionClass 12 Maths SolutionPhysics Notes (Class 8-11)Class 8 NotesClass 9 NotesClass 10 NotesClass 11 NotesISRO CSISRO CS Solved PapersISRO CS Original Papers and Official KeysISRO CS Syllabus for Scientist/Engineer ExamUGC NET CSUGC NET CS Notes Paper IIUGC NET CS Notes Paper IIIUGC NET CS Solved PapersStudentCampus Ambassador ProgramSchool Ambassador ProgramProjectGeek of the MonthCampus Geek of the MonthPlacement CourseCompetititve ProgrammingTestimonialsGeek on the TopCareersInternshipJobsApply for JobsPost a JobCourses WriteCome write articles for us and get featuredPracticeLearn and code with the best industry expertsPremiumGet access to ad-free content, doubt assistance and more!JobsCome and find your dream job with usGeeks DigestQuizzesGeeks CampusGblog ArticlesIDECampus Mantri HomeSaved VideosCoursesGBlogPuzzlesWhat's New ? Change Language Data StructuresAlgorithmsInterview PreparationTopic-wise PracticeC++JavaPythonCompetitive ProgrammingMachine LearningWeb DevelopmentPuzzlesProject IdeasGFG School Related Articles ▲Related ArticlesBasics of JavaJava TutorialIntroduction to JavaSimilarities and Difference between Java and C++Setting up the environment in JavaJava Basic SyntaxJava Hello World ProgramDifferences between JDK, JRE and JVMHow JVM Works – JVM Architecture?Java IdentifiersVariables & DataTypes in JavaVariables in JavaScope of Variables In JavaData types in JavaOperators in JavaOperators in JavaJava Arithmetic Operators with ExamplesJava Assignment Operators with ExamplesJava Unary Operator with ExamplesJava Relational Operators with ExamplesJava Logical Operators with ExamplesJava Ternary Operator with ExamplesBitwise Operators in JavaPackages in JavaPackages In JavaFlow Control in JavaDecision Making in Java (if, if-else, switch, break, continue, jump)Java if statement with ExamplesJava if-else statement with ExamplesJava if-else-if ladder with ExamplesLoops in JavaLoops in JavaJava For loop with ExamplesJava while loop with ExamplesJava do-while loop with ExamplesFor-each loop in JavaJump Statements in JavaContinue Statement in JavaBreak statement in Javareturn keyword in JavaArrays in JavaArrays in JavaMultidimensional Arrays in JavaJagged Array in JavaStrings in JavaStrings in JavaString class in Java | Set 1StringBuffer class in JavaStringBuilder Class in Java with ExamplesOOPS in JavaObject Oriented Programming (OOPs) Concept in JavaClasses and Objects in JavaMethods in JavaAccess Modifiers in JavaWrapper Classes in JavaNeed of Wrapper Classes in JavaConstructors in JavaConstructors in JavaCopy Constructor in JavaConstructor Chaining In Java with ExamplesPrivate Constructors and Singleton Classes in JavaInheritance & Polymorphism in JavaInheritance in JavaJava and Multiple InheritanceComparison of Inheritance in C++ and JavaPolymorphism in JavaDynamic Method Dispatch or Runtime Polymorphism in JavaMethod overloading & OveridingOverloading in JavaDifferent ways of Method Overloading in JavaOverriding in JavaDifference Between Method Overloading and Method Overriding in JavaAbstraction & EncapsulationAbstraction in JavaAbstract Classes in JavaDifference between Abstract Class and Interface in JavaEncapsulation in JavaInterfaces in JavaInterfaces in JavaNested Interface in JavaMarker interface in JavaFunctional Interfaces in JavaComparator Interface in Java with ExamplesKeywords in JavaList of all Java KeywordsSuper Keyword in Javafinal Keyword in Javaabstract keyword in javastatic Keyword in Java‘this’ reference in Javaenum in JavaException Handling in JavaExceptions in JavaTypes of Exception in Java with ExamplesChecked vs Unchecked Exceptions in JavaTry, catch, throw and throws in JavaFlow control in try catch finally in Javathrow and throws in JavaUser-defined Custom Exception in JavaCollection FrameworkCollections in JavaCollections Class in JavaList Interface in Java with ExamplesArrayList in JavaVector Class in JavaStack Class in JavaLinkedList in JavaQueue Interface In JavaPriorityQueue in JavaDeque interface in Java with ExampleArrayDeque in JavaSet in JavaHashSet in JavaLinkedHashSet in Java with ExamplesSortedSet Interface in Java with ExamplesNavigableSet in Java with ExamplesTreeSet in JavaMap Interface in JavaHashMap in Java with ExamplesHashtable in JavaLinkedHashMap in JavaSortedMap Interface in Java with ExamplesTreeMap in JavaMulti-threading in JavaMultithreading in JavaLifecycle and States of a Thread in JavaMain thread in JavaJava Thread Priority in MultithreadingThread Pools in JavaSynchronization in JavaMethod and Block Synchronization in JavaImportance of Thread Synchronization in JavaThread Safety and how to achieve it in JavaTable of ContentsBasics of JavaJava TutorialIntroduction to JavaSimilarities and Difference between Java and C++Setting up the environment in JavaJava Basic SyntaxJava Hello World ProgramDifferences between JDK, JRE and JVMHow JVM Works – JVM Architecture?Java IdentifiersVariables & DataTypes in JavaVariables in JavaScope of Variables In JavaData types in JavaOperators in JavaOperators in JavaJava Arithmetic Operators with ExamplesJava Assignment Operators with ExamplesJava Unary Operator with ExamplesJava Relational Operators with ExamplesJava Logical Operators with ExamplesJava Ternary Operator with ExamplesBitwise Operators in JavaPackages in JavaPackages In JavaFlow Control in JavaDecision Making in Java (if, if-else, switch, break, continue, jump)Java if statement with ExamplesJava if-else statement with ExamplesJava if-else-if ladder with ExamplesLoops in JavaLoops in JavaJava For loop with ExamplesJava while loop with ExamplesJava do-while loop with ExamplesFor-each loop in JavaJump Statements in JavaContinue Statement in JavaBreak statement in Javareturn keyword in JavaArrays in JavaArrays in JavaMultidimensional Arrays in JavaJagged Array in JavaStrings in JavaStrings in JavaString class in Java | Set 1StringBuffer class in JavaStringBuilder Class in Java with ExamplesOOPS in JavaObject Oriented Programming (OOPs) Concept in JavaClasses and Objects in JavaMethods in JavaAccess Modifiers in JavaWrapper Classes in JavaNeed of Wrapper Classes in JavaConstructors in JavaConstructors in JavaCopy Constructor in JavaConstructor Chaining In Java with ExamplesPrivate Constructors and Singleton Classes in JavaInheritance & Polymorphism in JavaInheritance in JavaJava and Multiple InheritanceComparison of Inheritance in C++ and JavaPolymorphism in JavaDynamic Method Dispatch or Runtime Polymorphism in JavaMethod overloading & OveridingOverloading in JavaDifferent ways of Method Overloading in JavaOverriding in JavaDifference Between Method Overloading and Method Overriding in JavaAbstraction & EncapsulationAbstraction in JavaAbstract Classes in JavaDifference between Abstract Class and Interface in JavaEncapsulation in JavaInterfaces in JavaInterfaces in JavaNested Interface in JavaMarker interface in JavaFunctional Interfaces in JavaComparator Interface in Java with ExamplesKeywords in JavaList of all Java KeywordsSuper Keyword in Javafinal Keyword in Javaabstract keyword in javastatic Keyword in Java‘this’ reference in Javaenum in JavaException Handling in JavaExceptions in JavaTypes of Exception in Java with ExamplesChecked vs Unchecked Exceptions in JavaTry, catch, throw and throws in JavaFlow control in try catch finally in Javathrow and throws in JavaUser-defined Custom Exception in JavaCollection FrameworkCollections in JavaCollections Class in JavaList Interface in Java with ExamplesArrayList in JavaVector Class in JavaStack Class in JavaLinkedList in JavaQueue Interface In JavaPriorityQueue in JavaDeque interface in Java with ExampleArrayDeque in JavaSet in JavaHashSet in JavaLinkedHashSet in Java with ExamplesSortedSet Interface in Java with ExamplesNavigableSet in Java with ExamplesTreeSet in JavaMap Interface in JavaHashMap in Java with ExamplesHashtable in JavaLinkedHashMap in JavaSortedMap Interface in Java with ExamplesTreeMap in JavaMulti-threading in JavaMultithreading in JavaLifecycle and States of a Thread in JavaMain thread in JavaJava Thread Priority in MultithreadingThread Pools in JavaSynchronization in JavaMethod and Block Synchronization in JavaImportance of Thread Synchronization in JavaThread Safety and how to achieve it in JavaImprove Article Save Article Like Article Collections Class in JavaDifficulty Level : EasyLast Updated : 25 Aug, 2021Collections class is a member of the Java Collections Framework. The java.util.Collections package is the package that contains the Collections class. Collections class is basically used with the static methods that operate on the collections or return the collection. All the methods of this class throw the NullPointerException if the collection or object passed to the methods is null. Syntax: Declarationpublic class Collections extends ObjectRemember: Object is the parent class of all the classes.Collections class fieldsThe collection class basically contains 3 fields as listed below which can be used to return immutable entities.EMPTY_LIST to get an immutable empty ListEMPTY_SET to get an immutable empty MapEMPTY_MAP to get an immutable empty SetNow let us do discuss methods that are present inside this class so that we can implement these inbuilt functionalities later on in our program. Below are the methods been listed below in a tabular format as shown below as follows:MethodsDescriptionaddAll(Collection<? extends E> c)It is used to insert the specified collection elements in the invoking collection.asLifoQueue​(Deque<T> deque)This method returns a view of a Deque as a Last-in-first-out (Lifo) Queue.binarySearch(List<? extends Comparable> list, T key)This method searches the key using binary search in the specified list. binarySearch​(List<? extends T> list, T key, Comparator<? super T> c)This method searches the specified list for the specified object using the binary search algorithm.checkedCollection​(Collection<E> c, Class<E> type)This method returns a dynamically typesafe view of the specified collection.checkedList​(List<E> list, Class<E> type)This method returns a dynamically typesafe view of the specified list.checkedMap​(Map<K,​V> m, Class<K> keyType, Class<V> valueType)This method returns a dynamically typesafe view of the specified map.checkedNavigableMap​(NavigableMap<K,​V> m, Class<K> keyType, Class<V> valueType)This method returns a dynamically typesafe view of the specified navigable map.checkedNavigableSet​(NavigableSet<E> s, Class<E> type)This method returns a dynamically typesafe view of the specified navigable set.checkedQueue​(Queue<E> queue, Class<E> type)This method returns a dynamically typesafe view of the specified queue. checkedSet​(Set<E> s, Class<E> type)This method returns a dynamically typesafe view of the specified set.checkedSortedMap​(SortedMap<K,​V> m, Class<K> keyType, Class<V> valueType)This method returns a dynamically typesafe view of the specified sorted map.checkedSortedSet​(SortedSet<E> s, Class<E> type)This method returns a dynamically typesafe view of the specified sorted set.copy​(List<? super T> dest, List<? extends T> src)This method copies all of the elements from one list into another.disjoint​(Collection<?> c1, Collection<?> c2)This method returns true if the two specified collections have no elements in common.emptyEnumeration()This method returns an enumeration that has no elements.emptyIterator()This method returns an iterator that has no elements. emptyList()This method returns an empty list (immutable).emptyListIterator()This method returns a list iterator that has no elements.emptyMap()This method returns an empty map (immutable).emptyNavigableMap()This method returns an empty navigable map (immutable).emptyNavigableSet()This method returns an empty navigable set (immutable).emptySet()This method returns an empty set (immutable).emptySortedMap()This method returns an empty sorted map (immutable).emptySortedSet()This method returns an empty sorted set (immutable).enumeration​(Collection<T> c)This method returns an enumeration over the specified collection.fill​(List<? super T> list, T obj)This method replaces all of the elements of the specified list with the specified element.frequency​(Collection<?> c, Object o)This method returns the number of elements in the specified collection equal to the specified object.indexOfSubList​(List<?> source, List<?> target)This method returns the starting position of the first occurrence of the specified target list within the specified source list, or -1 if there is no such occurrence.lastIndexOfSubList​(List<?> source, List<?> target)This method returns the starting position of the last occurrence of the specified target list within the specified source list, or -1 if there is no such occurrence.list​(Enumeration<T> e)This method returns an array list containing the elements returned by the specified enumeration in the order they are returned by the enumeration.max​(Collection<? extends T> coll)This method returns the maximum element of the given collection, according to the natural ordering of its elements.max​(Collection<? extends T> coll, Comparator<? super T> comp)This method returns the maximum element of the given collection, according to the order induced by the specified comparator.min​(Collection<? extends T> coll)This method returns the minimum element of the given collection, according to the natural ordering of its elements.min​(Collection<? extends T> coll, Comparator<? super T> comp)This method returns the minimum element of the given collection, according to the order induced by the specified comparator.nCopies​(int n, T o)This method returns an immutable list consisting of n copies of the specified object.newSetFromMap​(Map<E,​Boolean> map)This method returns a set backed by the specified map.replaceAll​(List<T> list, T oldVal, T newVal)This method replaces all occurrences of one specified value in a list with another.reverse​(List<?> list)This method reverses the order of the elements in the specified listreverseOrder()This method returns a comparator that imposes the reverse of the natural ordering on a collection of objects that implement the Comparable interface. reverseOrder​(Comparator<T> cmp)This method returns a comparator that imposes the reverse ordering of the specified comparator.rotate​(List<?> list, int distance)This method rotates the elements in the specified list by the specified distance.shuffle​(List<?> list)This method randomly permutes the specified list using a default source of randomness.shuffle​(List<?> list, Random rnd)This method randomly permute the specified list using the specified source of randomness.singletonMap​(K key, V value)This method returns an immutable map, mapping only the specified key to the specified value.singleton​(T o)This method returns an immutable set containing only the specified object.singletonList​(T o)This method returns an immutable list containing only the specified object.sort​(List<T> list)This method sorts the specified list into ascending order, according to the natural ordering of its elements.sort​(List<T> list, Comparator<? super T> c)This method sorts the specified list according to the order induced by the specified comparator.swap​(List<?> list, int i, int j)This method swaps the elements at the specified positions in the specified list.synchronizedCollection​(Collection<T> c)This method returns a synchronized (thread-safe) collection backed by the specified collection.synchronizedList​(List<T> list)This method returns a synchronized (thread-safe) list backed by the specified list.synchronizedMap​(Map<K,​V> m)This method returns a synchronized (thread-safe) map backed by the specified map.synchronizedNavigableMap​(NavigableMap<K,​V> m)This method returns a synchronized (thread-safe) navigable map backed by the specified navigable map.synchronizedNavigableSet​(NavigableSet<T> s)This method returns a synchronized (thread-safe) navigable set backed by the specified navigable set. synchronizedSet​(Set<T> s)This method returns a synchronized (thread-safe) set backed by the specified set.synchronizedSortedMap​(SortedMap<K,​V> m)This method returns a synchronized (thread-safe) sorted map backed by the specified sorted map.synchronizedSortedSet​(SortedSet<T> s)This method returns a synchronized (thread-safe) sorted set backed by the specified sorted set.unmodifiableCollection​(Collection<? extends T> c)This method returns an unmodifiable view of the specified collection.unmodifiableList​(List<? extends T> list)This method returns an unmodifiable view of the specified list.unmodifiableNavigableMap​(NavigableMap<K,​? extends V> m)This method returns an unmodifiable view of the specified navigable map.unmodifiableNavigableSet​(NavigableSet<T> s)This method returns an unmodifiable view of the specified navigable set.unmodifiableSet​(Set<? extends T> s)This method returns an unmodifiable view of the specified set.unmodifiableSortedMap​(SortedMap<K,​? extends V> m)This method returns an unmodifiable view of the specified sorted map.unmodifiableSortedSet​(SortedSet<T> s)This method returns an unmodifiable view of the specified sorted set.Now, we are done with listing all the methods so by ar we have a faint hint with us in perceiving how important are these methods when thinking about a global programming perspective. The important and frequently widely used methods while writing optimized code as you will see these methods somehow in nearly every java optimized code because of havoc usage of Collections class in java. So here more likely in any class we will not just be implementing the method but will also be discussing operations that can be performed so that one can have conceptual clarity and strong command while implementing the same. The operations that we will be discussing are as follows:Adding elements to the Collections Sorting a CollectionSearching in a CollectionCopying ElementsDisjoint CollectionOperation 1: Adding elements to the Collections class object The addAll() method of java.util.Collections class is used to add all the specified elements to the specified collection. Elements to be added may be specified individually or as an array.Example Java// Java Program to Demonstrate Adding Elements// Using addAll() method // Importing required classesimport java.util.ArrayList;import java.util.Collections;import java.util.List; // Main classclass GFG { // Main driver method public static void main(String[] args) { // Creating a list // Declaring object of string type List<String> items = new ArrayList<>(); // Adding elements (items) to the list items.add("Shoes"); items.add("Toys"); // Add one or more elements Collections.addAll(items, "Fruits", "Bat", "Ball"); // Printing the list contents for (int i = 0; i < items.size(); i++) { System.out.print(items.get(i) + " "); } }}OutputShoes Toys Fruits Bat Ball Operation 2: Sorting a Collectionjava.util.Collections.sort() is used to sort the elements present in the specified list of Collection in ascending order. java.util.Collections.reverseOrder() is used to sort in the descending order. ExampleJava// Java program to demonstrate sorting// a Collections using sort() method import java.util.ArrayList;import java.util.Collections;import java.util.List; // Main Class// SortingCollectionExampleclass GFG { // Main driver method public static void main(String[] args) { // Creating a list // Declaring object of string type List<String> items = new ArrayList<>(); // Adding elements to the list // using add() method items.add("Shoes"); items.add("Toys"); // Adding one or more elements using addAll() Collections.addAll(items, "Fruits", "Bat", "Mouse"); // Sorting according to default ordering // using sort() method Collections.sort(items); // Printing the elements for (int i = 0; i < items.size(); i++) { System.out.print(items.get(i) + " "); } System.out.println(); // Sorting according to reverse ordering Collections.sort(items, Collections.reverseOrder()); // Printing the reverse order for (int i = 0; i < items.size(); i++) { System.out.print(items.get(i) + " "); } }}OutputBat Fruits Mouse Shoes Toys Toys Shoes Mouse Fruits Bat Operation 3: Searching in a Collectionjava.util.Collections.binarySearch() method returns the position of an object in a sorted list. To use this method, the list should be sorted in ascending order, otherwise, the result returned from the method will be wrong. If the element exists in the list, the method will return the position of the element in the sorted list, otherwise, the result returned by the method would be the – (insertion point where the element should have been present if exist)-1). ExampleJava// Java Program to Demonstrate Binary Search// Using Collections.binarySearch() // Importing required classesimport java.util.ArrayList;import java.util.Collections;import java.util.List; // Main class// BinarySearchOnACollectionpublic class GFG { // Main driver method public static void main(String[] args) { // Creating a List // Declaring object of string type List<String> items = new ArrayList<>(); // Adding elements to object // using add() method items.add("Shoes"); items.add("Toys"); items.add("Horse"); items.add("Ball"); items.add("Grapes"); // Sort the List Collections.sort(items); // BinarySearch on the List System.out.println( "The index of Horse is " + Collections.binarySearch(items, "Horse")); // BinarySearch on the List System.out.println( "The index of Dog is " + Collections.binarySearch(items, "Dog")); }}OutputThe index of Horse is 2 The index of Dog is -2Operation 4: Copying ElementsThe copy() method of java.util.Collections class is used to copy all the elements from one list into another. After the operation, the index of each copied element in the destination list will be identical to its index in the source list. The destination list must be at least as long as the source list. If it is longer, the remaining elements in the destination list are unaffected.ExampleJava// Java Program to Demonstrate Copying Elements// Using copy() method // Importing required classesimport java.util.ArrayList;import java.util.Collections;import java.util.List; // Main class// CopyOneCollectionToAnotherclass GFG { // Main driver method public static void main(String[] args) { // Create destination list List<String> destination_List = new ArrayList<>(); // Add elements destination_List.add("Shoes"); destination_List.add("Toys"); destination_List.add("Horse"); destination_List.add("Tiger"); // Print the elements System.out.println( "The Original Destination list is "); for (int i = 0; i < destination_List.size(); i++) { System.out.print(destination_List.get(i) + " "); } System.out.println(); // Create source list List<String> source_List = new ArrayList<>(); // Add elements source_List.add("Bat"); source_List.add("Frog"); source_List.add("Lion"); // Copy the elements from source to destination Collections.copy(destination_List, source_List); // Printing the modified list System.out.println( "The Destination List After copying is "); for (int i = 0; i < destination_List.size(); i++) { System.out.print(destination_List.get(i) + " "); } }}OutputThe Original Destination list is Shoes Toys Horse Tiger The Destination List After copying is Bat Frog Lion Tiger Operation 5: Disjoint Collectionjava.util.Collections.disjoint() is used to check whether two specified collections are disjoint or not. More formally, two collections are disjoint if they have no elements in common. It returns true if the two collections do not have any element in common. ExampleJava// Java Program to Illustrate Working of Disjoint Function // Importing required classesimport java.util.ArrayList;import java.util.Collections;import java.util.List; // Main class// DisjointCollectionsExampleclass GFG { // Main driver method public static void main(String[] args) { // Create list1 List<String> list1 = new ArrayList<>(); // Add elements to list1 list1.add("Shoes"); list1.add("Toys"); list1.add("Horse"); list1.add("Tiger"); // Create list2 List<String> list2 = new ArrayList<>(); // Add elements to list2 list2.add("Bat"); list2.add("Frog"); list2.add("Lion"); // Check if disjoint or not System.out.println( Collections.disjoint(list1, list2)); }}OutputtrueMy Personal Notes arrow_drop_upSave LikePreviousCollections in JavaNext List Interface in Java with ExamplesRecommended ArticlesPage :Difference between Traditional Collections and Concurrent Collections in java08, Jan 18Java.util.Collections.frequency() in Java27, May 17Java.util.Collections.rotate() Method in Java with Examples02, Jun 17Java.util.Collections.frequency() in Java with Examples03, Jun 17Java.util.Collections.disjoint() Method in java with Examples11, Jun 17Collections.sort() in Java with Examples30, Oct 16Collections.binarySearch() in Java with Examples31, Oct 16Collections.reverse() Method in Java with Examples01, Nov 16Swapping items of a list in Java : Collections.swap() with Example01, Nov 16Collections.shuffle() Method in Java with Examples01, Nov 16Collections.singleton() method in Java with example22, Nov 16Output of Java programs | Set 13 (Collections)11, May 17Collections singletonMap() method in Java with Examples10, Oct 18Collections min() method in Java with Examples10, Oct 18Collections.nCopies() in Java28, Feb 18Collections max() method in Java with Examples08, Oct 18How to Compare two Collections in Java?31, Oct 20Java Lambda Expression with Collections13, Aug 18Collections addAll() method in Java with Examples05, Oct 18Collections asLifoQueue() method in Java with Examples05, Oct 18Collections unmodifiableCollection() method in Java with Examples08, Oct 18Collections unmodifiableSortedMap() method in Java with Examples08, Oct 18Collections unmodifiableSet() method in Java with Examples08, Oct 18Collections unmodifiableMap() method in Java with Examples08, Oct 18Article Contributed By :lavishgarg26@lavishgarg26Vote for difficultyCurrent difficulty : EasyEasy Normal Medium Hard ExpertImproved By :ayusmanmishra1999akshaysingh98088martialcoderArticle Tags :Java-CollectionsPickedJavaPractice Tags :JavaJava-CollectionsReport IssueWriting code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load CommentsWhat's NewJava Backend Development- LIVE ClassesView DetailsComplete Interview PreparationView DetailsSystem Design-Live Classes for Working ProfessionalsView DetailsMost popular in JavaSplit() String method in Java with examplesArrays.sort() in Java with examplesReverse a string in JavaHow to iterate any Map in JavaInitialize an ArrayList in JavaMore related articles in JavaSingleton Class in JavaHow to add an element to an Array in Java?Java Programming ExamplesStream In JavaInitializing a List in Java× 5th Floor, A-118,Sector-136, Noida, Uttar Pradesh - 201305 feedback@geeksforgeeks.orgCompanyAbout UsCareersPrivacy PolicyContact UsCopyright PolicyLearnAlgorithmsData StructuresLanguagesCS SubjectsVideo TutorialsWeb DevelopmentWeb TutorialsHTMLCSSJavaScriptBootstrapContributeWrite an ArticleWrite Interview ExperienceInternshipsVideos@geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It ! Start Your Coding Journey Now!Login Register