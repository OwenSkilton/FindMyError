Establishing JDBC Connection in Java - GeeksforGeeksSkip to content TutorialsPractice DS & Algo.Must Do QuestionsDSA Topic-wiseDSA Company-wiseAlgorithmsAnalysis of AlgorithmsAsymptotic AnalysisWorst, Average and Best CasesAsymptotic NotationsLittle o and little omega notationsLower and Upper Bound TheoryAnalysis of LoopsSolving RecurrencesAmortized AnalysisWhat does 'Space Complexity' mean ?Pseudo-polynomial AlgorithmsPolynomial Time Approximation SchemeA Time Complexity QuestionSearching AlgorithmsSorting AlgorithmsGraph AlgorithmsPattern SearchingGeometric AlgorithmsMathematicalBitwise AlgorithmsRandomized AlgorithmsGreedy AlgorithmsDynamic ProgrammingDivide and ConquerBacktrackingBranch and BoundAll AlgorithmsData StructuresArraysLinked ListStackQueueBinary TreeBinary Search TreeHeapHashingGraphAdvanced Data StructureMatrixStringsAll Data StructuresInterview CornerCompany PreparationTop TopicsPractice Company QuestionsInterview ExperiencesExperienced InterviewsInternship InterviewsCompetititve ProgrammingDesign PatternsSystem Design TutorialMultiple Choice QuizzesLanguagesCC++JavaPythonC#JavaScriptjQuerySQLPHPScalaPerlGo LanguageHTMLCSSKotlinCS SubjectsMathematicsOperating SystemDBMSComputer NetworksComputer Organization and ArchitectureTheory of ComputationCompiler DesignDigital LogicSoftware EngineeringGATEGATE Computer Science NotesLast Minute NotesGATE CS Solved PapersGATE CS Original Papers and Official KeysGATE 2021 DatesGATE CS 2021 SyllabusImportant Topics for GATE CSWeb TechnologiesHTMLCSSJavaScriptAngularJSReactJSNodeJSBootstrapjQueryPHPSoftware DesignsSoftware Design PatternsSystem Design TutorialSchool LearningSchool ProgrammingMathematicsNumber SystemAlgebraTrigonometryStatisticsProbabilityGeometryMensurationCalculusMaths Notes (Class 8-12)Class 8 NotesClass 9 NotesClass 10 NotesClass 11 NotesClass 12 NotesNCERT SolutionsClass 8 Maths SolutionClass 9 Maths SolutionClass 10 Maths SolutionClass 11 Maths SolutionClass 12 Maths SolutionRD Sharma SolutionsClass 8 Maths SolutionClass 9 Maths SolutionClass 10 Maths SolutionClass 11 Maths SolutionClass 12 Maths SolutionPhysics Notes (Class 8-11)Class 8 NotesClass 9 NotesClass 10 NotesClass 11 NotesISRO CSISRO CS Solved PapersISRO CS Original Papers and Official KeysISRO CS Syllabus for Scientist/Engineer ExamUGC NET CSUGC NET CS Notes Paper IIUGC NET CS Notes Paper IIIUGC NET CS Solved PapersStudentCampus Ambassador ProgramSchool Ambassador ProgramProjectGeek of the MonthCampus Geek of the MonthPlacement CourseCompetititve ProgrammingTestimonialsGeek on the TopCareersInternshipJobsApply for JobsPost a JobCourses WriteCome write articles for us and get featuredPracticeLearn and code with the best industry expertsPremiumGet access to ad-free content, doubt assistance and more!JobsCome and find your dream job with usGeeks DigestQuizzesGeeks CampusGblog ArticlesIDECampus Mantri HomeSaved VideosCoursesGBlogPuzzlesWhat's New ? Change Language Data StructuresAlgorithmsInterview PreparationTopic-wise PracticeC++JavaPythonCompetitive ProgrammingMachine LearningWeb DevelopmentPuzzlesProject IdeasGFG School Related Articles ▲Related ArticlesDifference between Servlet and JSPStarting with first Servlet ApplicationThe HttpSession Interface in ServletURL Rewriting using Java ServletServlet Collaboration In Java Using RequestDispatcher and HttpServletResponseJava Servlet and JDBC Example | Insert data in MySQLEstablishing JDBC Connection in JavaJava Applet BasicsWeb Browsers that support Java Applets and how to enable themDifference between Applets and ServletsIntroduction to Java ServletsIntroduction to JSPLife cycle of JSPLife Cycle of a ServletArrays in JavaSplit() String method in Java with examplesArrays.sort() in Java with examplesFor-each loop in JavaReverse a string in JavaHow to iterate any Map in JavaObject Oriented Programming (OOPs) Concept in JavaHashMap in Java with ExamplesInitialize an ArrayList in JavaMultidimensional Arrays in JavaStack Class in JavaArrayList in JavaHow to add an element to an Array in Java?Overriding in JavaCollections.sort() in Java with ExamplesLinkedList in JavaTable of ContentsDifference between Servlet and JSPStarting with first Servlet ApplicationThe HttpSession Interface in ServletURL Rewriting using Java ServletServlet Collaboration In Java Using RequestDispatcher and HttpServletResponseJava Servlet and JDBC Example | Insert data in MySQLEstablishing JDBC Connection in JavaJava Applet BasicsWeb Browsers that support Java Applets and how to enable themDifference between Applets and ServletsIntroduction to Java ServletsIntroduction to JSPLife cycle of JSPLife Cycle of a ServletArrays in JavaSplit() String method in Java with examplesArrays.sort() in Java with examplesFor-each loop in JavaReverse a string in JavaHow to iterate any Map in JavaObject Oriented Programming (OOPs) Concept in JavaHashMap in Java with ExamplesInitialize an ArrayList in JavaMultidimensional Arrays in JavaStack Class in JavaArrayList in JavaHow to add an element to an Array in Java?Overriding in JavaCollections.sort() in Java with ExamplesLinkedList in JavaImprove Article Save Article Like Article Establishing JDBC Connection in JavaDifficulty Level : EasyLast Updated : 02 Nov, 2021Before establishing a connection between the front end i.e your Java Program and the back end i.e the database we should learn what precisely a JDBC is and why it came to existence. Now let us discuss what exactly JDBC stands for and will ease out with the help of real-life illustration to get it working. What is JDBC? JDBC is an acronym for Java Database Connectivity. It’s an advancement for ODBC ( Open Database Connectivity ). JDBC is a standard API specification developed in order to move data from frontend to backend. This API consists of classes and interfaces written in Java. It basically acts as an interface (not the one we use in Java) or channel between your Java program and databases i.e it establishes a link between the two so that a programmer could send data from Java code and store it in the database for future use.Illustration: Working of JDBC co-relating with real-timeWhy JDBC Came into Existence? As previously told JDBC is an advancement for ODBC, ODBC being platform-dependent had a lot of drawbacks. ODBC API was written in C, C++, Python, Core Java and as we know above languages (except Java and some part of Python )are platform dependent. Therefore to remove dependence, JDBC was developed by a database vendor which consisted of classes and interfaces written in Java. Steps For Connectivity Between Java Program and DatabaseImport the databaseLoad the drivers using the forName() method Register the drivers using DriverManager Establish a connection using the Connection class objectCreate a statementExecute the queryCLose the connectionsLet us discuss these steps in brief before implementing by writing suitable code to illustrate connectivity steps for JDBC/Step 1: Import the databaseStep 2: Loading the drivers In order to begin with, you first need to load the driver or register it before using it in the program. Registration is to be done once in your program. You can register a driver in one of two ways mentioned below as follows:2-A Class.forName()Here we load the driver’s class file into memory at the runtime. No need of using new or create objects. The following example uses Class.forName() to load the Oracle driver as shown below as follows:Class.forName(“oracle.jdbc.driver.OracleDriver”);2-B DriverManager.registerDriver()DriverManager is a Java inbuilt class with a static member register. Here we call the constructor of the driver class at compile time. The following example uses DriverManager.registerDriver()to register the Oracle driver as shown below: DriverManager.registerDriver(new oracle.jdbc.driver.OracleDriver()) Step 4: Establish a connection using the Connection class objectAfter loading the driver, establish connections via as shown below as follows: Connection con = DriverManager.getConnection(url,user,password)user: Username from which your SQL command prompt can be accessed.password: password from which the SQL command prompt can be accessed.con: It is a reference to the Connection interface.Url : Uniform Resource Locator which is created as shown below:String url = “ jdbc:oracle:thin:@localhost:1521:xe”Where oracle is the database used, thin is the driver used, @localhost is the IP Address where a database is stored, 1521 is the port number and xe is the service provider. All 3 parameters above are of String type and are to be declared by the programmer before calling the function. Use of this can be referred from the final code.Step 5: Create a statement Once a connection is established you can interact with the database. The JDBCStatement, CallableStatement, and PreparedStatement interfaces define the methods that enable you to send SQL commands and receive data from your database. Use of JDBC Statement is as follows: Statement st = con.createStatement();Note: Here, con is a reference to Connection interface used in previous step .Step 6: Execute the query Now comes the most important part i.e executing the query. The query here is an SQL Query. Now we know we can have multiple types of queries. Some of them are as follows: The query for updating/inserting table in a database.The query for retrieving data.The executeQuery() method of the Statement interface is used to execute queries of retrieving values from the database. This method returns the object of ResultSet that can be used to get all the records of a table. The executeUpdate(sql query) method of the Statement interface is used to execute queries of updating/inserting.Pseodo Code:int m = st.executeUpdate(sql); if (m==1) System.out.println("inserted successfully : "+sql); else System.out.println("insertion failed");Here sql is SQL query of the type StringStep 7: Closing the connections So finally we have sent the data to the specified location and now we are on the verge of completing of our task. By closing the connection, objects of Statement and ResultSet will be closed automatically. The close() method of the Connection interface is used to close the connection. It is as shown below as follows: con.close();Example:Java// Java Program to Establish Connection in JDBC // Importing databaseimportjava.sql.*;// Importing required classesimportjava.util.*; // Main classclass Main { // Main driver method public static void main(String a[]) { // Creating the connection using Oracle DB // Note: url syntax is standard, so do grasp String url = "jdbc:oracle:thin:@localhost:1521:xe"; // Usernamer and password to access DB // Custom initialization String user = "system"; String pass = "12345"; // Entering the data Scanner k = new Scanner(System.in); System.out.println("enter name"); String name = k.next(); System.out.println("enter roll no"); int roll = k.nextInt(); System.out.println("enter class"); String cls = k.next(); // Inserting data using SQL query String sql = "insert into student1 values('" + name + "'," + roll + ",'" + cls + "')"; // Connection class object Connection con = null; // Try block to check for exceptions try { // Registering drivers DriverManager.registerDriver( new oracle.jdbc.OracleDriver()); // Reference to connection interface con = DriverManager.getConnection(url, user, pass); // Creating a statement Statement st = con.createStatement(); // Executing query int m = st.executeUpdate(sql); if (m == 1) System.out.println( "inserted successfully : " + sql); else System.out.println("insertion failed"); // Closing the connections con.close(); } // Catch block to handle exceptions catch (Exception ex) { // Display message when exceptions occurs System.err.println(ex); } }}Output:This article is contributed by Shreya Gupta. If you like GeeksforGeeks and would like to contribute, you can also write an article using write.geeksforgeeks.org or mail your article to review-team@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks. Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.Attention reader! Don’t stop learning now. Get hold of all the important Java Foundation and Collections concepts with the Fundamentals of Java and Java Collections Course at a student-friendly price and become industry ready. To complete your preparation from learning a language to DS Algo and many more, please refer Complete Interview Preparation Course.My Personal Notes arrow_drop_upSave LikePreviousJava Servlet and JDBC Example | Insert data in MySQLNext Java Applet BasicsRecommended ArticlesPage :Java Program to Retrieve Contents of a Table Using JDBC connection22, Nov 20How to Insert Records to a Table using JDBC Connection?19, Nov 20How to Update Contents of a Table using JDBC Connection?05, Dec 20How to Check Internet Connection in Android with No Internet Connection Dialog?15, Jul 21How to Fix java.net.ConnectException: Connection refused: connect in Java?12, Apr 21Java Servlet and JDBC Example | Insert data in MySQL18, Nov 18Difference between JDBC and Hibernate in Java29, May 20Java Program to Search the Contents of a Table in JDBC14, Dec 20Java Program to Delete a Column in a Table Using JDBC06, Dec 20Java Program to Join Contents of More than One Table & Display in JDBC10, Dec 20Java JDBC - Update a Column in a Table05, Dec 20Java Program to Use Methods of Column to Get Column Name in JDBC13, Dec 20Java Program to Insert Details in a Table using JDBC19, Dec 20Java Program to Output Query Results in Tabular Format in JDBC12, Jan 21What is RowSet in Java JDBC?22, Jun 21Java JDBC - Difference Between Row Set and Result Set25, Jul 21Difference Between Connected vs Disconnected RowSet in Java JDBC07, Oct 21What’s the connection between Java and Blockchain?12, Mar 19Getting the Date of URL connection in Java02, Nov 20How to Make a Server to Allow the Connection to the Socket 6123 in Java?09, Nov 20Setting Up Proxy Connection to a System in Java27, Apr 21Difference between ODBC and JDBC08, Jan 18How to Commit a Query in JDBC?23, Nov 20JDBC Using Model Object and Singleton Class27, Feb 20Article Contributed By :GeeksforGeeksVote for difficultyCurrent difficulty : EasyEasy Normal Medium Hard ExpertImproved By :solankimayankclintraArticle Tags :JDBCJavaPractice Tags :JavaReport IssueWriting code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load CommentsWhat's NewJava Backend Development- LIVE ClassesView DetailsComplete Interview PreparationView DetailsSystem Design-Live Classes for Working ProfessionalsView DetailsMost popular in JavaInterfaces in JavaCollections in JavaMath pow() method in Java with ExampleClasses and Objects in JavaSet in JavaMore related articles in JavaSingleton Class in JavaInitializing a List in JavaJava Programming ExamplesHow to determine length or size of an Array in Java?Inheritance in Java× 5th Floor, A-118,Sector-136, Noida, Uttar Pradesh - 201305 feedback@geeksforgeeks.orgCompanyAbout UsCareersPrivacy PolicyContact UsCopyright PolicyLearnAlgorithmsData StructuresLanguagesCS SubjectsVideo TutorialsWeb DevelopmentWeb TutorialsHTMLCSSJavaScriptBootstrapContributeWrite an ArticleWrite Interview ExperienceInternshipsVideos@geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It ! Start Your Coding Journey Now!Login Register