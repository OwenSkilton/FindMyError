Four Main Object Oriented Programming Concepts of Java - GeeksforGeeksSkip to content TutorialsPractice DS & Algo.Must Do QuestionsDSA Topic-wiseDSA Company-wiseAlgorithmsAnalysis of AlgorithmsAsymptotic AnalysisWorst, Average and Best CasesAsymptotic NotationsLittle o and little omega notationsLower and Upper Bound TheoryAnalysis of LoopsSolving RecurrencesAmortized AnalysisWhat does 'Space Complexity' mean ?Pseudo-polynomial AlgorithmsPolynomial Time Approximation SchemeA Time Complexity QuestionSearching AlgorithmsSorting AlgorithmsGraph AlgorithmsPattern SearchingGeometric AlgorithmsMathematicalBitwise AlgorithmsRandomized AlgorithmsGreedy AlgorithmsDynamic ProgrammingDivide and ConquerBacktrackingBranch and BoundAll AlgorithmsData StructuresArraysLinked ListStackQueueBinary TreeBinary Search TreeHeapHashingGraphAdvanced Data StructureMatrixStringsAll Data StructuresInterview CornerCompany PreparationTop TopicsPractice Company QuestionsInterview ExperiencesExperienced InterviewsInternship InterviewsCompetititve ProgrammingDesign PatternsSystem Design TutorialMultiple Choice QuizzesLanguagesCC++JavaPythonC#JavaScriptjQuerySQLPHPScalaPerlGo LanguageHTMLCSSKotlinCS SubjectsMathematicsOperating SystemDBMSComputer NetworksComputer Organization and ArchitectureTheory of ComputationCompiler DesignDigital LogicSoftware EngineeringGATEGATE Computer Science NotesLast Minute NotesGATE CS Solved PapersGATE CS Original Papers and Official KeysGATE 2021 DatesGATE CS 2021 SyllabusImportant Topics for GATE CSWeb TechnologiesHTMLCSSJavaScriptAngularJSReactJSNodeJSBootstrapjQueryPHPSoftware DesignsSoftware Design PatternsSystem Design TutorialSchool LearningSchool ProgrammingMathematicsNumber SystemAlgebraTrigonometryStatisticsProbabilityGeometryMensurationCalculusMaths Notes (Class 8-12)Class 8 NotesClass 9 NotesClass 10 NotesClass 11 NotesClass 12 NotesNCERT SolutionsClass 8 Maths SolutionClass 9 Maths SolutionClass 10 Maths SolutionClass 11 Maths SolutionClass 12 Maths SolutionRD Sharma SolutionsClass 8 Maths SolutionClass 9 Maths SolutionClass 10 Maths SolutionClass 11 Maths SolutionClass 12 Maths SolutionPhysics Notes (Class 8-11)Class 8 NotesClass 9 NotesClass 10 NotesClass 11 NotesISRO CSISRO CS Solved PapersISRO CS Original Papers and Official KeysISRO CS Syllabus for Scientist/Engineer ExamUGC NET CSUGC NET CS Notes Paper IIUGC NET CS Notes Paper IIIUGC NET CS Solved PapersStudentCampus Ambassador ProgramSchool Ambassador ProgramProjectGeek of the MonthCampus Geek of the MonthPlacement CourseCompetititve ProgrammingTestimonialsGeek on the TopCareersInternshipJobsApply for JobsPost a JobCourses WriteCome write articles for us and get featuredPracticeLearn and code with the best industry expertsPremiumGet access to ad-free content, doubt assistance and more!JobsCome and find your dream job with usGeeks DigestQuizzesGeeks CampusGblog ArticlesIDECampus Mantri HomeSaved VideosCoursesGBlogPuzzlesWhat's New ? Change Language Data StructuresAlgorithmsInterview PreparationTopic-wise PracticeC++JavaPythonCompetitive ProgrammingMachine LearningWeb DevelopmentPuzzlesProject IdeasGFG School Related Articles ▲Related ArticlesArrays in JavaSplit() String method in Java with examplesArrays.sort() in Java with examplesFor-each loop in JavaReverse a string in JavaHow to iterate any Map in JavaObject Oriented Programming (OOPs) Concept in JavaHashMap in Java with ExamplesInitialize an ArrayList in JavaMultidimensional Arrays in JavaStack Class in JavaArrayList in JavaHow to add an element to an Array in Java?Overriding in JavaCollections.sort() in Java with ExamplesLinkedList in JavaSingleton Class in JavaQueue Interface In JavaInterfaces in JavaSet in JavaInheritance in JavaClasses and Objects in JavaCollections in JavaMath pow() method in Java with ExampleHow to determine length or size of an Array in Java?Difference Between == and .equals() Method in JavaCompare two Strings in JavaInitializing a List in JavaPolymorphism in JavaMultithreading in JavaTable of ContentsArrays in JavaSplit() String method in Java with examplesArrays.sort() in Java with examplesFor-each loop in JavaReverse a string in JavaHow to iterate any Map in JavaObject Oriented Programming (OOPs) Concept in JavaHashMap in Java with ExamplesInitialize an ArrayList in JavaMultidimensional Arrays in JavaStack Class in JavaArrayList in JavaHow to add an element to an Array in Java?Overriding in JavaCollections.sort() in Java with ExamplesLinkedList in JavaSingleton Class in JavaQueue Interface In JavaInterfaces in JavaSet in JavaInheritance in JavaClasses and Objects in JavaCollections in JavaMath pow() method in Java with ExampleHow to determine length or size of an Array in Java?Difference Between == and .equals() Method in JavaCompare two Strings in JavaInitializing a List in JavaPolymorphism in JavaMultithreading in JavaImprove Article Save Article Like Article Four Main Object Oriented Programming Concepts of JavaDifficulty Level : EasyLast Updated : 22 Nov, 2021Object-oriented programming generally referred to as OOPS is the backbone of java as java being a completely object-oriented language. Java organizes a program around the various objects and well-defined interfaces. There are four pillars been here in OOPS which are listed below. These concepts aim to implement real-world entities in programs.AbstractionEncapsulationInheritancePolymorphismAbstraction is a process of hiding implementation details and exposes only the functionality to the user. In abstraction, we deal with ideas and not events. This means the user will only know “what it does” rather than “how it does”.There are two ways to achieve abstraction in JavaAbstract class (0 to 100%)Interface (100%)Real-Life Example: A driver will focus on the car functionality (Start/Stop -> Accelerate/ Break), he/she does not bother about how the Accelerate/ brake mechanism works internally. And this is how the abstraction works.Certain key points should be remembered regarding this pillar of OOPS as follows:The class should be abstract if a class has one or many abstract methodsAn abstract class can have constructors, concrete methods, static method, and final methodAbstract class can’t be instantiated directly with the new operator. It can be possible as shown in pre tag below:A b = new B();The child class should override all the abstract methods of parent else the child class should be declared with abstract keywordExample:Java// Abstract classpublic abstract class Car { public abstract void stop();} // Concrete classpublic class Honda extends Car { // Hiding implementation details @Override public void stop() { System.out.println("Honda::Stop"); System.out.println( "Mechanism to stop the car using break"); }} public class Main { public static void main(String args[]) { Car obj = new Honda(); // Car object =>contents of Honda obj.stop(); // call the method }}Pillar 2: EncapsulationEncapsulation is the process of wrapping code and data together into a single unit.Real-Life Example:A capsule which is mixed of several medicines. The medicines are hidden data to the end user.In order to achieve encapsulation in java follow certain steps as proposed below:Declare the variables as privateDeclare the setters and getters to set and get the variable valuesNote: There are few disadvantages of encapsulation in java as follows:Control Over Data: We can write the logic in the setter method to not store the negative values for an Integer. So by this way we can control the data.Data Hiding: The data members are private so other class can’t access the data members.Easy to test: Unit testing is easy for encapsulated classesExample:Java// A Java class which is a fully encapsulated class.public class Car{ // private variable private String name; // getter method for name public String getName() { return name; } // setter method for name public void setName(String name) { this.name = name } } // Java class to test the encapsulated class. public class Test{ public static void main(String[] args) { // creating instance of the encapsulated class Car car = new Car(); // setting value in the name member car.setName("Honda"); // getting value of the name member System.out.println(car.getName()); } }Pillar 3: InheritanceInheritance is the process of one class inheriting properties and methods from another class in Java. Inheritance is used when we have is-a relationship between objects. Inheritance in Java is implemented using extends keyword.Real-life Example:The planet Earth and Mars inherits the super class Solar System and Solar system inherits the Milky Way Galaxy. So Milky Way Galaxy is the top super class for Class Solar System, Earth and Mars.Let us do discuss the usage of inheritance in java applications with a generic example before proposing the code. So consider an example extending the Exception class to create an application-specific Exception class that contains more information like error codes. For example NullPointerException.There are 5 different types of inheritance in java as follows:Single Inheritance: Class B inherits Class B using extends keywordMultilevel Inheritance: Class C inherits class B and B inherits class A using extends keywordHierarchy Inheritance: Class B and C inherits class A in hierarchy order using extends keywordMultiple Inheritance: Class C inherits Class A and B. Here A and B both are superclass and C is only one child class. Java is not supporting Multiple Inheritance, but we can implement using Interfaces.Hybrid Inheritance: Class D inherits class B and class C. Class B and C inherits A. Here same again Class D inherits two superclass, so Java is not supporting Hybrid Inheritance as well.Example:Java// super classclass Car { // the Car class have one field public String wheelStatus; public int noOfWheels; // the Car class has one constructor public Car(String wheelStatus, int noOfWheels) { this.wheelStatus = wheelStatus; this.noOfWheels = noOfWheels; } // the Car class has three methods public void applyBrake() { wheelStatus = "Stop" System.out.println( "Stop the car using break"); } // toString() method to print info of Car public String toString() { return ("No of wheels in car " + noOfWheels + "\n" + "status of the wheels " + wheelStatus); }} // sub classclass Honda extends Car { // the Honda subclass adds one more field public Boolean alloyWheel; // the Honda subclass has one constructor public Honda(String wheelStatus, int noOfWheels, Boolean alloyWheel) { // invoking super-class(Car) constructor super(wheelStatus, noOfWheels); alloyWheel = alloyWheel; } // the Honda subclass adds one more method public void setAlloyWheel(Boolean alloyWheel) { alloyWheel = alloyWheel; } // overriding toString() method of Car to print more // info @Override public String toString() { return (super.toString() + "\nCar alloy wheel " + alloyWheel); }} // driver classpublic class Main { public static void main(String args[]) { Honda honda = new Honda(3, 100, 25); System.out.println(honda.toString()); }}Pillar 4: Polymorphism in java Polymorphism is the ability to perform many things in many ways. The word Polymorphism is from two different Greek words- poly and morphs. “Poly” means many, and “Morphs” means forms. So polymorphism means many forms. The polymorphism can be present in the case of inheritance also. The functions behave differently based on the actual implementation.Real-life Example:A delivery person delivers items to the user. If it’s a postman he will deliver the letters. If it’s a food delivery boy he will deliver the foods to the user. Like this polymorphism implemented different ways for the delivery function.There are two types of polymorphism as listed below:Static or Compile-time PolymorphismDynamic or Run-time PolymorphismStatic or Compile-time Polymorphism when the compiler is able to determine the actual function, it’s called compile-time polymorphism. Compile-time polymorphism can be achieved by method overloading in java. When different functions in a class have the same name but different signatures, it’s called method overloading. A method signature contains the name and method arguments. So, overloaded methods have different arguments. The arguments might differ in the numbers or the type of arguments.Example 1: Static PolymorphismJavapublic class Car{ public void speed() { } public void speed(String accelerator) { } public int speed(String accelerator, int speedUp) { return carSpeed; }}Dynamic or Run-time Polymorphism occurs when the compiler is not able to determine whether it’s superclass method or sub-class method it’s called run-time polymorphism. The run-time polymorphism is achieved by method overriding. When the superclass method is overridden in the subclass, it’s called method overriding.Example 2: Dynamic PolymorphismJavaimport java.util.Random; class DeliveryBoy { public void deliver() { System.out.println("Delivering Item"); } public static void main(String[] args) { DeliveryBoy deliveryBoy = getDeliveryBoy(); deliveryBoy.deliver(); } private static DeliveryBoy getDeliveryBoy() { Random random = new Random(); int number = random.nextInt(5); return number % 2 == 0 ? new Postman() : new FoodDeliveryBoy(); }} class Postman extends DeliveryBoy { @Override public void deliver() { System.out.println("Delivering Letters"); }} class FoodDeliveryBoy extends DeliveryBoy { @Override public void deliver() { System.out.println("Delivering Food"); }}OutputDelivering Letters Attention reader! Don’t stop learning now. Get hold of all the important Java Foundation and Collections concepts with the Fundamentals of Java and Java Collections Course at a student-friendly price and become industry ready. To complete your preparation from learning a language to DS Algo and many more, please refer Complete Interview Preparation Course.My Personal Notes arrow_drop_upSave LikePreviousTop 7 Projects in Robotics For Beginners and IntermediatesNext Check if it is possible to reach (X, Y) from origin such that in each ith move increment x or y coordinate with 3^iRecommended ArticlesPage :Does JVM create object of Main class (the class with main())?06, Apr 16Brief Overview & Comparison of Object-Oriented Programming from C to Java22, Nov 20Object Oriented Programming (OOPs) Concept in Java12, Feb 19Best Practices of Object Oriented Programming (OOP)28, Jun 20Why Java is not a purely Object-Oriented Language?30, May 17OOPs | Object Oriented Design26, Sep 18Main App Implements Runnable | Concurrent Programming Approach 208, Apr 19Aspect Oriented Programming and AOP in Spring Framework19, Mar 19How to Solve java.lang.IllegalStateException in Java main Thread?01, Mar 21Valid variants of main() in Java07, Apr 16GFact 48 | Overloading main() in Java11, May 16Main thread in Java17, May 17Is main method compulsory in Java?18, May 17Replacing 'public' with 'private' in "main" in Java21, Aug 18Understanding "static" in "public static void main" in Java10, Sep 18Static Block and main() method in Java20, Dec 18Execute main() multiple times without using any other function or condition or recursion in Java03, Jan 19Understanding public static void main(String[] args) in Java21, Jan 19How to overload and override main method in Java05, Apr 19What are the main differences between the Java platform and other platforms?07, Aug 19In Java, Can we call the main() method of a class from another class?28, Nov 19Java Program to Print any Statement without Using the Main Method16, Nov 20Main Components of Java Netbeans IDE04, Mar 21Can We Have Multiple Main Methods in Java?29, Jul 21Article Contributed By :nlavanya207@nlavanya207Vote for difficultyCurrent difficulty : EasyEasy Normal Medium Hard ExpertImproved By :vishalkumaragrawal067Article Tags :Java-Object OrientedJavaPractice Tags :JavaReport IssueWriting code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load CommentsWhat's NewJava Backend Development- LIVE ClassesView DetailsJava FoundationView DetailsComplete Interview PreparationView DetailsMost popular in JavaJava Programming ExamplesStream In JavaStrings in JavaIntroduction to JavaSystem.out.println in JavaMore related articles in JavaScanner Class in JavaDifferent ways of Reading a text file in JavaComparator Interface in Java with ExamplesStringBuilder Class in Java with ExamplesFunctional Interfaces in Java× 5th Floor, A-118,Sector-136, Noida, Uttar Pradesh - 201305 feedback@geeksforgeeks.orgCompanyAbout UsCareersPrivacy PolicyContact UsCopyright PolicyLearnAlgorithmsData StructuresLanguagesCS SubjectsVideo TutorialsWeb DevelopmentWeb TutorialsHTMLCSSJavaScriptBootstrapContributeWrite an ArticleWrite Interview ExperienceInternshipsVideos@geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It ! Start Your Coding Journey Now!Login Register