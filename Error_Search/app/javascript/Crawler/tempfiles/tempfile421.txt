Java.lang.Character Class in Java - GeeksforGeeksSkip to content TutorialsPractice DS & Algo.Must Do QuestionsDSA Topic-wiseDSA Company-wiseAlgorithmsAnalysis of AlgorithmsAsymptotic AnalysisWorst, Average and Best CasesAsymptotic NotationsLittle o and little omega notationsLower and Upper Bound TheoryAnalysis of LoopsSolving RecurrencesAmortized AnalysisWhat does 'Space Complexity' mean ?Pseudo-polynomial AlgorithmsPolynomial Time Approximation SchemeA Time Complexity QuestionSearching AlgorithmsSorting AlgorithmsGraph AlgorithmsPattern SearchingGeometric AlgorithmsMathematicalBitwise AlgorithmsRandomized AlgorithmsGreedy AlgorithmsDynamic ProgrammingDivide and ConquerBacktrackingBranch and BoundAll AlgorithmsData StructuresArraysLinked ListStackQueueBinary TreeBinary Search TreeHeapHashingGraphAdvanced Data StructureMatrixStringsAll Data StructuresInterview CornerCompany PreparationTop TopicsPractice Company QuestionsInterview ExperiencesExperienced InterviewsInternship InterviewsCompetititve ProgrammingDesign PatternsSystem Design TutorialMultiple Choice QuizzesLanguagesCC++JavaPythonC#JavaScriptjQuerySQLPHPScalaPerlGo LanguageHTMLCSSKotlinCS SubjectsMathematicsOperating SystemDBMSComputer NetworksComputer Organization and ArchitectureTheory of ComputationCompiler DesignDigital LogicSoftware EngineeringGATEGATE Computer Science NotesLast Minute NotesGATE CS Solved PapersGATE CS Original Papers and Official KeysGATE 2021 DatesGATE CS 2021 SyllabusImportant Topics for GATE CSWeb TechnologiesHTMLCSSJavaScriptAngularJSReactJSNodeJSBootstrapjQueryPHPSoftware DesignsSoftware Design PatternsSystem Design TutorialSchool LearningSchool ProgrammingMathematicsNumber SystemAlgebraTrigonometryStatisticsProbabilityGeometryMensurationCalculusMaths Notes (Class 8-12)Class 8 NotesClass 9 NotesClass 10 NotesClass 11 NotesClass 12 NotesNCERT SolutionsClass 8 Maths SolutionClass 9 Maths SolutionClass 10 Maths SolutionClass 11 Maths SolutionClass 12 Maths SolutionRD Sharma SolutionsClass 8 Maths SolutionClass 9 Maths SolutionClass 10 Maths SolutionClass 11 Maths SolutionClass 12 Maths SolutionPhysics Notes (Class 8-11)Class 8 NotesClass 9 NotesClass 10 NotesClass 11 NotesISRO CSISRO CS Solved PapersISRO CS Original Papers and Official KeysISRO CS Syllabus for Scientist/Engineer ExamUGC NET CSUGC NET CS Notes Paper IIUGC NET CS Notes Paper IIIUGC NET CS Solved PapersStudentCampus Ambassador ProgramSchool Ambassador ProgramProjectGeek of the MonthCampus Geek of the MonthPlacement CourseCompetititve ProgrammingTestimonialsGeek on the TopCareersInternshipJobsApply for JobsPost a JobCourses WriteCome write articles for us and get featuredPracticeLearn and code with the best industry expertsPremiumGet access to ad-free content, doubt assistance and more!JobsCome and find your dream job with usGeeks DigestQuizzesGeeks CampusGblog ArticlesIDECampus Mantri HomeSaved VideosCoursesGBlogPuzzlesWhat's New ? Change Language Data StructuresAlgorithmsInterview PreparationTopic-wise PracticeC++JavaPythonCompetitive ProgrammingMachine LearningWeb DevelopmentPuzzlesProject IdeasGFG School Related Articles ▲Related ArticlesJava.Lang.Byte class in JavaJava.Lang.Short class in JavaJava.Lang.Long class in JavaJava.Lang.Float class in JavaJava.Lang.Double class in JavaJava.lang.Boolean Class in JavaJava.lang.Character Class in JavaAutoboxing and Unboxing in JavaWrapper Classes in JavaPrimitive Wrapper Classes are Immutable in JavaJava.lang.Number Class in JavaJava.lang.Integer class in JavaTable of ContentsJava.Lang.Byte class in JavaJava.Lang.Short class in JavaJava.Lang.Long class in JavaJava.Lang.Float class in JavaJava.Lang.Double class in JavaJava.lang.Boolean Class in JavaJava.lang.Character Class in JavaAutoboxing and Unboxing in JavaWrapper Classes in JavaPrimitive Wrapper Classes are Immutable in JavaJava.lang.Number Class in JavaJava.lang.Integer class in JavaImprove Article Save Article Like Article Java.lang.Character Class in JavaDifficulty Level : MediumLast Updated : 06 Dec, 2018Java provides a wrapper class Character in java.lang package. An object of type Character contains a single field, whose type is char.Creating a Character object :Character ch = new Character('a'); The above statement creates a Character object which contain ‘a’ of type char. There is only one constructor in Character class which expect an argument of char data type.If we pass a primitive char into a method that expects an object, the compiler automatically converts the char to a Character class object. This feature is called Autoboxing and Unboxing.Note : The Character class is immutable like String class i.e once it’s object is created, it cannot be changed.Methods in Character Class :boolean isLetter(char ch) : This method is used to determine whether the specified char value(ch) is a letter or not. The method will return true if it is letter([A-Z],[a-z]), otherwise return false. In place of character, we can also pass ASCII value as an argument as char to int is implicitly typecasted in java.Syntax : boolean isLetter(char ch) Parameters : ch - a primitive character Returns : returns true if ch is a alphabet, otherwise return false // Java program to demonstrate isLetter() methodpublic class Test{ public static void main(String[] args) { System.out.println(Character.isLetter('A')); System.out.println(Character.isLetter('0')); }}Output:true false boolean isDigit(char ch) : This method is used to determine whether the specified char value(ch) is a digit or not. Here also we can pass ASCII value as an argument.Syntax : boolean isDigit(char ch) Parameters : ch - a primitive character Returns : returns true if ch is a digit, otherwise return false // Java program to demonstrate isDigit() methodpublic class Test{ public static void main(String[] args) { // print false as A is character System.out.println(Character.isDigit('A')); System.out.println(Character.isDigit('0')); }}Output:false true boolean isWhitespace(char ch) : It determines whether the specified char value(ch) is white space. A whitespace includes space, tab, or new line.Syntax : boolean isWhitespace(char ch) Parameters : ch - a primitive character Returns : returns true if ch is a whitespace. otherwise return false // Java program to demonstrate isWhitespace() methodpublic class Test{ public static void main(String[] args) { System.out.println(Character.isWhitespace('A')); System.out.println(Character.isWhitespace(' ')); System.out.println(Character.isWhitespace('\n')); System.out.println(Character.isWhitespace('\t')); //ASCII value of tab System.out.println(Character.isWhitespace(9)); System.out.println(Character.isWhitespace('9')); }}Output:false true true true true false boolean isUpperCase(char ch) : It determines whether the specified char value(ch) is uppercase or not.Syntax : boolean isUpperCase(char ch) // Java program to demonstrate isUpperCase() methodpublic class Test{ public static void main(String[] args) { System.out.println(Character.isUpperCase('A')); System.out.println(Character.isUpperCase('a')); System.out.println(Character.isUpperCase(65)); }}Output:true false true boolean isLowerCase(char ch) : It determines whether the specified char value(ch) is lowercase or not.Syntax : boolean isLowerCase(char ch) // Java program to demonstrate isLowerCase() methodpublic class Test{ public static void main(String[] args) { System.out.println(Character.isLowerCase('A')); System.out.println(Character.isLowerCase('a')); System.out.println(Character.isLowerCase(97)); }}Output:false true true char toUpperCase(char ch) : It returns the uppercase of the specified char value(ch). If an ASCII value is passed, then the ASCII value of it’s uppercase will be returned.Syntax : char toUpperCase(char ch) Parameters : ch - a primitive character Returns : returns the uppercase form of the specified char value. // Java program to demonstrate toUpperCase() methodpublic class Test{ public static void main(String[] args) { System.out.println(Character.toUpperCase('a')); System.out.println(Character.toUpperCase(97)); System.out.println(Character.toUpperCase(48)); }}Output:A 65 48 char toLowerCase(char ch) : It returns the lowercase of the specified char value(ch).Syntax : char toLowerCase(char ch) Parameters : ch - a primitive character Returns : returns the lowercase form of the specified char value. // Java program to demonstrate toLowerCase() methodpublic class Test{ public static void main(String[] args) { System.out.println(Character.toLowerCase('A')); System.out.println(Character.toLowerCase(65)); System.out.println(Character.toLowerCase(48)); }}Output:a 97 48 toString(char ch) : It returns a String class object representing the specified character value(ch) i.e a one-character string. Here we cannot pass ASCII value.Syntax : String toString(char ch) Parameters : ch - a primitive character Returns : returns a String object. // Java program to demonstrate toString() methodpublic class Test{ public static void main(String[] args) { System.out.println(Character.toString('x')); System.out.println(Character.toString('Y')); }}Output:x y static int charCount​(int codePoint): This method determines the number of char values needed to represent the specified character (Unicode code point).char charValue​(): This method returns the value of this Character object.static int codePointAt​(char[] a, int index): This method returns the code point at the given index of the char array.static int codePointAt​(char[] a, int index, int limit): This method returns the code point at the given index of the char array, where only array elements with index less than limit can be used.static int codePointAt​(CharSequence seq, int index): This method returns the code point at the given index of the CharSequence.static int codePointBefore​(char[] a, int index): This method returns the code point preceding the given index of the char array.static int codePointBefore​(char[] a, int index, int start): This method returns the code point preceding the given index of the char array, where only array elements with index greater than or equal to start can be used.static int codePointBefore​(CharSequence seq, int index): This method returns the code point preceding the given index of the CharSequence.static int codePointCount​(char[] a, int offset, int count): This method returns the number of Unicode code points in a subarray of the char array argument.static int codePointCount​(CharSequence seq, int beginIndex, int endIndex): This method returns the number of Unicode code points in the text range of the specified char sequence.static int codePointOf​(String name): This method returns the code point value of the Unicode character specified by the given Unicode character name.static int compare​(char x, char y): This method compares two char values numerically.int compareTo​(Character anotherCharacter): This method compares two Character objects numerically.static int digit​(char ch, int radix): This method returns the numeric value of the character ch in the specified radix.static int digit​(int codePoint, int radix): This method returns the numeric value of the specified character (Unicode code point) in the specified radix.boolean equals​(Object obj): This method compares this object against the specified object.static char forDigit​(int digit, int radix): This method determines the character representation for a specific digit in the specified radix.static byte getDirectionality​(char ch): This method returns the Unicode directionality property for the given character.static byte getDirectionality​(int codePoint): This method returns the Unicode directionality property for the given character (Unicode code point).static String getName​(int codePoint): This method returns the Unicode name of the specified character codePoint, or null if the code point is unassigned.static int getNumericValue​(char ch): This method returns the int value that the specified Unicode character represents.static int getNumericValue​(int codePoint): This method returns the int value that the specified character (Unicode code point) represents.static int getType​(char ch): This method returns a value indicating a character’s general category.static int getType​(int codePoint): This method returns a value indicating a character’s general category.int hashCode​(): This method returns a hash code for this Character; equal to the result of invoking charValue().static int hashCode​(char value): This method returns a hash code for a char value; compatible with Character.hashCode().static char highSurrogate​(int codePoint): This method returns the leading surrogate (a high surrogate code unit) of the surrogate pair representing the specified supplementary character (Unicode code point) in the UTF-16 encoding.static boolean isAlphabetic​(int codePoint): This method determines if the specified character (Unicode code point) is an alphabet.static boolean isBmpCodePoint​(int codePoint): This method determines whether the specified character (Unicode code point) is in the Basic Multilingual Plane (BMP).static boolean isDefined​(char ch): This method determines if a character is defined in Unicode.static boolean isDefined​(int codePoint): This method determines if a character (Unicode code point) is defined in Unicode.static boolean isHighSurrogate​(char ch): This method determines if the given char value is a Unicode high-surrogate code unit (also known as leading-surrogate code unit).static boolean isIdentifierIgnorable​(char ch): This method determines if the specified character should be regarded as an ignorable character in a Java identifier or a Unicode identifier.static boolean isIdentifierIgnorable​(int codePoint): This method determines if the specified character (Unicode code point) should be regarded as an ignorable character in a Java identifier or a Unicode identifier.static boolean isIdeographic​(int codePoint): This method determines if the specified character (Unicode code point) is a CJKV (Chinese, Japanese, Korean and Vietnamese) ideograph, as defined by the Unicode Standard.static boolean isISOControl​(char ch): This method determines if the specified character is an ISO control character.static boolean isISOControl​(int codePoint): This method determines if the referenced character (Unicode code point) is an ISO control character.static boolean isJavaIdentifierPart​(char ch): This method determines if the specified character may be part of a Java identifier as other than the first character.static boolean isJavaIdentifierPart​(int codePoint): This method determines if the character (Unicode code point) may be part of a Java identifier as other than the first character.static boolean isJavaIdentifierStart​(char ch): This method determines if the specified character is permissible as the first character in a Java identifier.static boolean isJavaIdentifierStart​(int codePoint): This method determines if the character (Unicode code point) is permissible as the first character in a Java identifier.static boolean isLowSurrogate​(char ch): This method determines if the given char value is a Unicode low-surrogate code unit (also known as trailing-surrogate code unit).static boolean isLetterOrDigit​(char ch): This method determines if the specified character is a letter or digit.static boolean isLetterOrDigit​(int codePoint): This method determines if the specified character (Unicode code point) is a letter or digit.static boolean isMirrored​(char ch): This method determines whether the character is mirrored according to the Unicode specification.static boolean isMirrored​(int codePoint): This method determines whether the specified character (Unicode code point) is mirrored according to the Unicode specification.static boolean isSpaceChar​(char ch): This method determines if the specified character is a Unicode space character.static boolean isSpaceChar​(int codePoint): This method determines if the specified character (Unicode code point) is a Unicode space character.static boolean isSupplementaryCodePoint​(int codePoint): This method determines whether the specified character (Unicode code point) is in the supplementary character range.static boolean isSurrogate​(char ch): This method determines if the given char value is a Unicode surrogate code unit.static boolean isSurrogatePair​(char high, char low): This method determines whether the specified pair of char values is a valid Unicode surrogate pair.static boolean isTitleCase​(char ch): This method determines if the specified character is a titlecase character.static boolean isTitleCase​(int codePoint): This method determines if the specified character (Unicode code point) is a titlecase character.static boolean isUnicodeIdentifierPart​(char ch): This method determines if the specified character may be part of a Unicode identifier as other than the first character.static boolean isUnicodeIdentifierPart​(int codePoint): This method determines if the specified character (Unicode code point) may be part of a Unicode identifier as other than the first character.static boolean isUnicodeIdentifierStart​(char ch): This method determines if the specified character is permissible as the first character in a Unicode identifier.static boolean isUnicodeIdentifierStart​(int codePoint): This method determines if the specified character (Unicode code point) is permissible as the first character in a Unicode identifier.static boolean isValidCodePoint​(int codePoint): This method determines whether the specified code point is a valid Unicode code point value.static char lowSurrogate​(int codePoint): This method returns the trailing surrogate (a low surrogate code unit) of the surrogate pair representing the specified supplementary character (Unicode code point) in the UTF-16 encoding.static int offsetByCodePoints​(char[] a, int start, int count, int index, int codePointOffset): This method returns the index within the given char subarray that is offset from the given index by codePointOffset code points.static int offsetByCodePoints​(CharSequence seq, int index, int codePointOffset): This method returns the index within the given char sequence that is offset from the given index by codePointOffset code points.static char reverseBytes​(char ch): This method returns the value obtained by reversing the order of the bytes in the specified char value.static char[] toChars​(int codePoint): This method converts the specified character (Unicode code point) to its UTF-16 representation stored in a char array.static int toChars​(int codePoint, char[] dst, int dstIndex): This method converts the specified character (Unicode code point) to its UTF-16 representation.static int toCodePoint​(char high, char low): This method converts the specified surrogate pair to its supplementary code point value.static char toTitleCase​(char ch): This method converts the character argument to titlecase using case mapping information from the UnicodeData file.static int toTitleCase​(int codePoint): This method converts the character (Unicode code point) argument to titlecase using case mapping information from the UnicodeData file.static Character valueOf​(char c): This method returns a Character instance representing the specified char value.Escape Sequences :A character preceded by a backslash (\) is an escape sequence and has special meaning to the compiler. The following table shows the Java escape sequences:Escape SequenceDescription\tInsert a tab in the text at this point.\bInsert a backspace in the text at this point.\nInsert a newline in the text at this point.\rInsert a carriage return in the text at this point.\fInsert a formfeed in the text at this point.\'Insert a single quote character in the text at this point.\"Insert a double quote character in the text at this point.\\Insert a backslash character in the text at this point.When an escape sequence is encountered in a print statement, the compiler interprets it accordingly. For example, if you want to put quotes within quotes you must use the escape sequence, \", on the interior quotes. To print the sentenceShe said "Hello!" to me. you would writeSystem.out.println("She said \"Hello!\" to me."); This article is contributed by Gaurav Miglani. If you like GeeksforGeeks and would like to contribute, you can also write an article using contribute.geeksforgeeks.org or mail your article to contribute@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.Attention reader! Don’t stop learning now. Get hold of all the important Java Foundation and Collections concepts with the Fundamentals of Java and Java Collections Course at a student-friendly price and become industry ready. To complete your preparation from learning a language to DS Algo and many more, please refer Complete Interview Preparation Course.My Personal Notes arrow_drop_upSave LikePreviousJava.lang.Boolean Class in JavaNext Autoboxing and Unboxing in JavaRecommended ArticlesPage :Java.lang.Class class in Java | Set 130, Mar 17Java.lang.Class class in Java | Set 203, Apr 17Implement Pair Class with Unit Class in Java using JavaTuples20, Sep 18Implement Triplet Class with Pair Class in Java using JavaTuples20, Sep 18Implement Quintet Class with Quartet Class in Java using JavaTuples20, Sep 18Implement Quartet Class with Triplet Class in Java using JavaTuples20, Sep 18Implement Octet Class from Septet Class in Java using JavaTuples24, Sep 18Implement Ennead Class from Octet Class in Java using JavaTuples24, Sep 18Implement Sextet Class from Quintet Class in Java using JavaTuples24, Sep 18Implement Septet Class from Sextet Class in Java using JavaTuples24, Sep 18Implement Decade Class from Ennead Class in Java using JavaTuples24, Sep 18Difference between Abstract Class and Concrete Class in Java11, Jan 19In Java, Can we call the main() method of a class from another class?28, Nov 19Java Program to Check if a Given Class is a Local Inner Class16, Nov 20Java Program to Check if a Given Class is an Anonymous Class16, Nov 20Java Program to Check if a Given Class is an Inner Class14, Dec 20Using predefined class name as Class or Variable name in Java26, May 17Java.util.TimeZone Class (Set-2) | Example On TimeZone Class25, Apr 18Java Program to Illustrate the Availability of Default Constructor of the Super Class to the Sub Class by Default05, Dec 20Does JVM create object of Main class (the class with main())?06, Apr 16Inner Class And Anonymous Inner Class that Implements Runnable | Concurrent Programming Approach 308, Apr 19Java.util.BitSet class methods in Java with Examples | Set 218, Nov 16Java.Lang.Float class in Java27, Mar 17Java.io.BufferedInputStream class in Java20, Jan 17Article Contributed By :GeeksforGeeksVote for difficultyCurrent difficulty : MediumEasy Normal Medium Hard ExpertArticle Tags :Java-CharacterJava-lang packageJava-Libraryjava-wrapper-classJavaPractice Tags :JavaReport IssueWriting code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load CommentsWhat's NewJava Backend Development- LIVE ClassesView DetailsComplete Interview PreparationView DetailsSystem Design-Live Classes for Working ProfessionalsView DetailsMost popular in JavaArrays in JavaObject Oriented Programming (OOPs) Concept in JavaSplit() String method in Java with examplesFor-each loop in JavaArrays.sort() in Java with examplesMore related articles in JavaReverse a string in JavaArrayList in JavaHashMap in Java with ExamplesMultidimensional Arrays in JavaInitialize an ArrayList in Java× 5th Floor, A-118,Sector-136, Noida, Uttar Pradesh - 201305 feedback@geeksforgeeks.orgCompanyAbout UsCareersPrivacy PolicyContact UsCopyright PolicyLearnAlgorithmsData StructuresLanguagesCS SubjectsVideo TutorialsWeb DevelopmentWeb TutorialsHTMLCSSJavaScriptBootstrapContributeWrite an ArticleWrite Interview ExperienceInternshipsVideos@geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It ! Start Your Coding Journey Now!Login Register