Internal Working of HashMap in Java - GeeksforGeeksSkip to content TutorialsPractice DS & Algo.Must Do QuestionsDSA Topic-wiseDSA Company-wiseAlgorithmsAnalysis of AlgorithmsAsymptotic AnalysisWorst, Average and Best CasesAsymptotic NotationsLittle o and little omega notationsLower and Upper Bound TheoryAnalysis of LoopsSolving RecurrencesAmortized AnalysisWhat does 'Space Complexity' mean ?Pseudo-polynomial AlgorithmsPolynomial Time Approximation SchemeA Time Complexity QuestionSearching AlgorithmsSorting AlgorithmsGraph AlgorithmsPattern SearchingGeometric AlgorithmsMathematicalBitwise AlgorithmsRandomized AlgorithmsGreedy AlgorithmsDynamic ProgrammingDivide and ConquerBacktrackingBranch and BoundAll AlgorithmsData StructuresArraysLinked ListStackQueueBinary TreeBinary Search TreeHeapHashingGraphAdvanced Data StructureMatrixStringsAll Data StructuresInterview CornerCompany PreparationTop TopicsPractice Company QuestionsInterview ExperiencesExperienced InterviewsInternship InterviewsCompetititve ProgrammingDesign PatternsSystem Design TutorialMultiple Choice QuizzesLanguagesCC++JavaPythonC#JavaScriptjQuerySQLPHPScalaPerlGo LanguageHTMLCSSKotlinCS SubjectsMathematicsOperating SystemDBMSComputer NetworksComputer Organization and ArchitectureTheory of ComputationCompiler DesignDigital LogicSoftware EngineeringGATEGATE Computer Science NotesLast Minute NotesGATE CS Solved PapersGATE CS Original Papers and Official KeysGATE 2021 DatesGATE CS 2021 SyllabusImportant Topics for GATE CSWeb TechnologiesHTMLCSSJavaScriptAngularJSReactJSNodeJSBootstrapjQueryPHPSoftware DesignsSoftware Design PatternsSystem Design TutorialSchool LearningSchool ProgrammingMathematicsNumber SystemAlgebraTrigonometryStatisticsProbabilityGeometryMensurationCalculusMaths Notes (Class 8-12)Class 8 NotesClass 9 NotesClass 10 NotesClass 11 NotesClass 12 NotesNCERT SolutionsClass 8 Maths SolutionClass 9 Maths SolutionClass 10 Maths SolutionClass 11 Maths SolutionClass 12 Maths SolutionRD Sharma SolutionsClass 8 Maths SolutionClass 9 Maths SolutionClass 10 Maths SolutionClass 11 Maths SolutionClass 12 Maths SolutionPhysics Notes (Class 8-11)Class 8 NotesClass 9 NotesClass 10 NotesClass 11 NotesISRO CSISRO CS Solved PapersISRO CS Original Papers and Official KeysISRO CS Syllabus for Scientist/Engineer ExamUGC NET CSUGC NET CS Notes Paper IIUGC NET CS Notes Paper IIIUGC NET CS Solved PapersStudentCampus Ambassador ProgramSchool Ambassador ProgramProjectGeek of the MonthCampus Geek of the MonthPlacement CourseCompetititve ProgrammingTestimonialsGeek on the TopCareersInternshipJobsApply for JobsPost a JobCourses WriteCome write articles for us and get featuredPracticeLearn and code with the best industry expertsPremiumGet access to ad-free content, doubt assistance and more!JobsCome and find your dream job with usGeeks DigestQuizzesGeeks CampusGblog ArticlesIDECampus Mantri HomeSaved VideosCoursesGBlogPuzzlesWhat's New ? Change Language Data StructuresAlgorithmsInterview PreparationTopic-wise PracticeC++JavaPythonCompetitive ProgrammingMachine LearningWeb DevelopmentPuzzlesProject IdeasGFG School Related Articles ▲Related ArticlesSorting a Hashmap according to valuesSorting a HashMap according to keys in JavaTreeMap in JavaTreeSet in JavaHashSet in JavaHashMap in Java with ExamplesInternal Working of HashMap in JavaInternal working of Set/HashSet in JavaMerge Two Sets in JavaSet in JavaMap Interface in JavaHow to iterate any Map in JavaSort an array which contain 1 to n valuesSort 1 to N by swapping adjacent elementsSort an array containing two types of elementsSort elements by frequency | Set 1Sort elements by frequency | Set 2Sort elements by frequency | Set 4 (Efficient approach using hash)Sorting Array Elements By Frequency | Set 3 (Using STL)Sort elements by frequency | Set 5 (using Java Map)Given an array A[] and a number x, check for pair in A[] with sum as x (aka Two Sum)Count pairs with given sumHashing | Set 1 (Introduction)Hashing | Set 3 (Open Addressing)Hashing | Set 2 (Separate Chaining)Sort string of charactersPrint Nodes in Top View of Binary TreeReturn maximum occurring character in an input stringCounting frequencies of array elementsTable of ContentsSorting a Hashmap according to valuesSorting a HashMap according to keys in JavaTreeMap in JavaTreeSet in JavaHashSet in JavaHashMap in Java with ExamplesInternal Working of HashMap in JavaInternal working of Set/HashSet in JavaMerge Two Sets in JavaSet in JavaMap Interface in JavaHow to iterate any Map in JavaSort an array which contain 1 to n valuesSort 1 to N by swapping adjacent elementsSort an array containing two types of elementsSort elements by frequency | Set 1Sort elements by frequency | Set 2Sort elements by frequency | Set 4 (Efficient approach using hash)Sorting Array Elements By Frequency | Set 3 (Using STL)Sort elements by frequency | Set 5 (using Java Map)Given an array A[] and a number x, check for pair in A[] with sum as x (aka Two Sum)Count pairs with given sumHashing | Set 1 (Introduction)Hashing | Set 3 (Open Addressing)Hashing | Set 2 (Separate Chaining)Sort string of charactersPrint Nodes in Top View of Binary TreeReturn maximum occurring character in an input stringCounting frequencies of array elementsImprove Article Save Article Like Article Internal Working of HashMap in JavaDifficulty Level : MediumLast Updated : 31 Dec, 2021 In this article, we will see how hashmap’s get and put method works internally. What operations are performed. How the hashing is done. How the value is fetched by key. How the key-value pair is stored.As in previous article, HashMap contains an array of Node and Node can represent a class having following objects : int hashK keyV valueNode nextNow we will see how this works. First we will see the hashing process. HashingHashing is a process of converting an object into integer form by using the method hashCode(). Its necessary to write hashCode() method properly for better performance of HashMap. Here I am taking key of my own class so that I can override hashCode() method to show different scenarios. My Key class is //custom Key class to override hashCode() // and equals() method class Key { String key; Key(String key) { this.key = key; } @Override public int hashCode() { return (int)key.charAt(0); } @Override public boolean equals(Object obj) { return key.equals((String)obj); } }Here overrided hashCode() method returns the first character’s ASCII value as hash code. So whenever the first character of key is same, the hash code will be same. You should not approach this criteria in your program. It is just for demo purpose. As HashMap also allows null key, so hash code of null will always be 0. hashCode() methodhashCode() method is used to get the hash Code of an object. hashCode() method of object class returns the memory reference of object in integer form. Definition of hashCode() method is public native hashCode(). It indicates the implementation of hashCode() is native because there is not any direct method in java to fetch the reference of object. It is possible to provide your own implementation of hashCode(). In HashMap, hashCode() is used to calculate the bucket and therefore calculate the index. equals() methodequals method is used to check that 2 objects are equal or not. This method is provided by Object class. You can override this in your class to provide your own implementation. HashMap uses equals() to compare the key whether they are equal or not. If equals() method return true, they are equal otherwise not equal. BucketsA bucket is one element of HashMap array. It is used to store nodes. Two or more nodes can have the same bucket. In that case link list structure is used to connect the nodes. Buckets are different in capacity. A relation between bucket and capacity is as follows: capacity = number of buckets * load factorA single bucket can have more than one nodes, it depends on hashCode() method. The better your hashCode() method is, the better your buckets will be utilized. Index Calculation in HashmapHash code of key may be large enough to create an array. hash code generated may be in the range of integer and if we create arrays for such a range, then it will easily cause outOfMemoryException. So we generate index to minimize the size of array. Basically following operation is performed to calculate index. index = hashCode(key) & (n-1).where n is number of buckets or the size of array. In our example, I will consider n as default size that is 16. Why the above method is used to calculate the indexUsing a bitwise AND operator is similar to doing bit masking wherein only the lower bits of the hash integer are considered which in turn provides a very efficient method of calculating the modulus based on the length of the hashmap. Initially Empty hashMap: Here, the hashmap is size is taken as 16. HashMap map = new HashMap();HashMap : Inserting Key-Value Pair: Putting one key-value pair in above HashMap map.put(new Key("vishal"), 20);Steps: Calculate hash code of Key {“vishal”}. It will be generated as 118.Calculate index by using index method it will be 6.Create a node object as : { int hash = 118 // {"vishal"} is not a string but // an object of class Key Key key = {"vishal"} Integer value = 20 Node next = null } Place this object at index 6, if no other object is presented there.Inserting another Key-Value Pair: Now, putting other pair that is, map.put(new Key("sachin"), 30);Steps:Calculate hashCode of Key {“sachin”}. It will be generated as 115.Calculate index by using index method it will be 3.Create a node object as : { int hash = 115 Key key = {"sachin"} Integer value = 30 Node next = null } In Case of collision: Now, putting another pair that is, map.put(new Key("vaibhav"), 40);Steps: Calculate hash code of Key {“vaibhav”}. It will be generated as 118.Calculate index by using index method it will be 6.Create a node object as : { int hash = 118 Key key = {"vaibhav"} Integer value = 40 Node next = null }Place this object at index 6 if no other object is presented there.In this case a node object is found at the index 6 – this is a case of collision.In that case, check via hashCode() and equals() method that if both the keys are same.If keys are same, replace the value with current value.Otherwise connect this node object to the previous node object via linked list and both are stored at index 6. Now HashMap becomes : Using get method()Now lets try some get method to get a value. get(K key) method is used to get a value by its key. If you don’t know the key then it is not possible to fetch a value. Fetch the data for key sachin:map.get(new Key("sachin"));Steps: Calculate hash code of Key {“sachin”}. It will be generated as 115.Calculate index by using index method it will be 3.Go to index 3 of array and compare first element’s key with given key. If both are equals then return the value, otherwise check for next element if it exists.In our case it is found as first element and returned value is 30.Fetch the data for key vaibahv: map.get(new Key("vaibhav"));Steps: Calculate hash code of Key {“vaibhav”}. It will be generated as 118.Calculate index by using index method it will be 6.Go to index 6 of array and compare first element’s key with given key. If both are equals then return the value, otherwise check for next element if it exists.In our case it is not found as first element and next of node object is not null.If next of node is null then return null.If next of node is not null traverse to the second element and repeat the process 3 until key is not found or next is not null.Time complexity is almost constant for put and get method until rehashing is not done.In case of collision, i.e. index of two or more nodes are same, nodes are joined by link list i.e. second node is referenced by first node and third by second and so on.If key given already exist in HashMap, the value is replaced with new value.hash code of null key is 0.When getting an object with its key, the linked list is traversed until the key matches or null is found on next field.Attention reader! Don’t stop learning now. Get hold of all the important Java Foundation and Collections concepts with the Fundamentals of Java and Java Collections Course at a student-friendly price and become industry ready. To complete your preparation from learning a language to DS Algo and many more, please refer Complete Interview Preparation Course.My Personal Notes arrow_drop_upSave LikePreviousHashMap in Java with ExamplesNext Internal working of Set/HashSet in JavaRecommended ArticlesPage :Internal working of Set/HashSet in Java29, Jun 17Internal Working of ArrayList in Java13, Jan 21Internal Working of TreeMap in Java18, Jan 21How to Copy One HashMap to Another HashMap in Java?14, Dec 20Java Swing | Internal Frame with examples01, Jun 18Internal Storage in Android with Example26, Oct 20HashMap Class Methods in Java with Examples | Set 1 (put(), get(), isEmpty() and size())10, Nov 16Hashmap methods in Java with Examples | Set 2 (keySet(), values(), containsKey()..)10, Nov 16Hashmap vs WeakHashMap in Java21, Apr 17Differences between TreeMap, HashMap and LinkedHashMap in Java20, May 17Sorting a HashMap according to keys in Java03, Oct 17Check whether two Strings are Anagram of each other using HashMap in Java01, Feb 19HashMap clear() Method in Java22, Jun 18HashMap containsKey() Method in Java22, Jun 18HashMap clone() Method in Java22, Jun 18HashMap containsValue() Method in Java22, Jun 18HashMap isEmpty() Method in Java22, Jun 18HashMap entrySet() Method in Java22, Jun 18HashMap get() Method in Java22, Jun 18HashMap keySet() Method in Java22, Jun 18HashMap size() Method in Java22, Jun 18HashMap put() Method in Java22, Jun 18HashMap putAll() Method in Java22, Jun 18HashMap remove() Method in Java22, Jun 18Article Contributed By :GeeksforGeeksVote for difficultyCurrent difficulty : MediumEasy Normal Medium Hard ExpertImproved By :ShubhamDeshmukhdanish arorashivakumaras2427Article Tags :Java-HashMapJava-Map-ProgramsHashJavaPractice Tags :HashJavaReport IssueWriting code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load CommentsWhat's NewJava Backend Development- LIVE ClassesView DetailsComplete Interview PreparationView DetailsSystem Design-Live Classes for Working ProfessionalsView DetailsMost popular in HashMost frequent element in an arraySorting a Map by value in C++ STLLongest Consecutive SubsequenceOverview of Data Structures | Set 2 (Binary Tree, BST, Heap and Hash)Real-time application of Data StructuresMost visited in JavaArrays in JavaObject Oriented Programming (OOPs) Concept in JavaSplit() String method in Java with examplesFor-each loop in JavaArrays.sort() in Java with examples× 5th Floor, A-118,Sector-136, Noida, Uttar Pradesh - 201305 feedback@geeksforgeeks.orgCompanyAbout UsCareersPrivacy PolicyContact UsCopyright PolicyLearnAlgorithmsData StructuresLanguagesCS SubjectsVideo TutorialsWeb DevelopmentWeb TutorialsHTMLCSSJavaScriptBootstrapContributeWrite an ArticleWrite Interview ExperienceInternshipsVideos@geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It ! Start Your Coding Journey Now!Login Register