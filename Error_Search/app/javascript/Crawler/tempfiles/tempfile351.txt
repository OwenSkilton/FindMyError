String vs StringBuilder vs StringBuffer in Java - GeeksforGeeksSkip to content TutorialsPractice DS & Algo.Must Do QuestionsDSA Topic-wiseDSA Company-wiseAlgorithmsAnalysis of AlgorithmsAsymptotic AnalysisWorst, Average and Best CasesAsymptotic NotationsLittle o and little omega notationsLower and Upper Bound TheoryAnalysis of LoopsSolving RecurrencesAmortized AnalysisWhat does 'Space Complexity' mean ?Pseudo-polynomial AlgorithmsPolynomial Time Approximation SchemeA Time Complexity QuestionSearching AlgorithmsSorting AlgorithmsGraph AlgorithmsPattern SearchingGeometric AlgorithmsMathematicalBitwise AlgorithmsRandomized AlgorithmsGreedy AlgorithmsDynamic ProgrammingDivide and ConquerBacktrackingBranch and BoundAll AlgorithmsData StructuresArraysLinked ListStackQueueBinary TreeBinary Search TreeHeapHashingGraphAdvanced Data StructureMatrixStringsAll Data StructuresInterview CornerCompany PreparationTop TopicsPractice Company QuestionsInterview ExperiencesExperienced InterviewsInternship InterviewsCompetititve ProgrammingDesign PatternsSystem Design TutorialMultiple Choice QuizzesLanguagesCC++JavaPythonC#JavaScriptjQuerySQLPHPScalaPerlGo LanguageHTMLCSSKotlinCS SubjectsMathematicsOperating SystemDBMSComputer NetworksComputer Organization and ArchitectureTheory of ComputationCompiler DesignDigital LogicSoftware EngineeringGATEGATE Computer Science NotesLast Minute NotesGATE CS Solved PapersGATE CS Original Papers and Official KeysGATE 2021 DatesGATE CS 2021 SyllabusImportant Topics for GATE CSWeb TechnologiesHTMLCSSJavaScriptAngularJSReactJSNodeJSBootstrapjQueryPHPSoftware DesignsSoftware Design PatternsSystem Design TutorialSchool LearningSchool ProgrammingMathematicsNumber SystemAlgebraTrigonometryStatisticsProbabilityGeometryMensurationCalculusMaths Notes (Class 8-12)Class 8 NotesClass 9 NotesClass 10 NotesClass 11 NotesClass 12 NotesNCERT SolutionsClass 8 Maths SolutionClass 9 Maths SolutionClass 10 Maths SolutionClass 11 Maths SolutionClass 12 Maths SolutionRD Sharma SolutionsClass 8 Maths SolutionClass 9 Maths SolutionClass 10 Maths SolutionClass 11 Maths SolutionClass 12 Maths SolutionPhysics Notes (Class 8-11)Class 8 NotesClass 9 NotesClass 10 NotesClass 11 NotesISRO CSISRO CS Solved PapersISRO CS Original Papers and Official KeysISRO CS Syllabus for Scientist/Engineer ExamUGC NET CSUGC NET CS Notes Paper IIUGC NET CS Notes Paper IIIUGC NET CS Solved PapersStudentCampus Ambassador ProgramSchool Ambassador ProgramProjectGeek of the MonthCampus Geek of the MonthPlacement CourseCompetititve ProgrammingTestimonialsGeek on the TopCareersInternshipJobsApply for JobsPost a JobCourses WriteCome write articles for us and get featuredPracticeLearn and code with the best industry expertsPremiumGet access to ad-free content, doubt assistance and more!JobsCome and find your dream job with usGeeks DigestQuizzesGeeks CampusGblog ArticlesIDECampus Mantri HomeSaved VideosCoursesGBlogPuzzlesWhat's New ? Change Language Data StructuresAlgorithmsInterview PreparationTopic-wise PracticeC++JavaPythonCompetitive ProgrammingMachine LearningWeb DevelopmentPuzzlesProject IdeasGFG School Related Articles ▲Related ArticlesString vs StringBuilder vs StringBuffer in JavaReverse a string in JavaReverse words in a given stringPrint words of a string in reverse orderDifferent methods to reverse a string in C/C++std::reverse() in C++How to reverse a Vector using STL in C++?What are the default values of static variables in C?Understanding “volatile” qualifier in C | Set 2 (Examples)Const Qualifier in CInitialization of static variables in CUnderstanding “register” keyword in CUnderstanding “extern” keyword in CStorage Classes in CStatic Variables in CMemory Layout of C ProgramsHow to deallocate memory without using free() in C?Difference Between malloc() and calloc() with ExamplesDynamic Memory Allocation in C using malloc(), calloc(), free() and realloc()How to dynamically allocate a 2D array in C?How to pass a 2D array as a parameter in C?Multidimensional Arrays in C / C++2D Vector In C++ With User Defined SizeVector of Vectors in C++ STL with ExamplesVector in C++ STLDifference Between == and .equals() Method in JavaDifference between BFS and DFSClass method vs Static method in PythonDifference between Intel and AMDDifferences between Black Box Testing vs White Box TestingTable of ContentsString vs StringBuilder vs StringBuffer in JavaReverse a string in JavaReverse words in a given stringPrint words of a string in reverse orderDifferent methods to reverse a string in C/C++std::reverse() in C++How to reverse a Vector using STL in C++?What are the default values of static variables in C?Understanding “volatile” qualifier in C | Set 2 (Examples)Const Qualifier in CInitialization of static variables in CUnderstanding “register” keyword in CUnderstanding “extern” keyword in CStorage Classes in CStatic Variables in CMemory Layout of C ProgramsHow to deallocate memory without using free() in C?Difference Between malloc() and calloc() with ExamplesDynamic Memory Allocation in C using malloc(), calloc(), free() and realloc()How to dynamically allocate a 2D array in C?How to pass a 2D array as a parameter in C?Multidimensional Arrays in C / C++2D Vector In C++ With User Defined SizeVector of Vectors in C++ STL with ExamplesVector in C++ STLDifference Between == and .equals() Method in JavaDifference between BFS and DFSClass method vs Static method in PythonDifference between Intel and AMDDifferences between Black Box Testing vs White Box TestingImprove Article Save Article Like Article String vs StringBuilder vs StringBuffer in JavaDifficulty Level : EasyLast Updated : 10 Nov, 2021A string is a sequence of characters. In java, objects of String are immutable which means a constant and cannot be changed once created. Initialize a String is one of the important pillars required as a pre-requisite with deeper understanding. For now, we will be justifying let us do consider the below code with three concatenation functions with three different types of parameters, String, StringBuffer, and StringBuilder. Let us clear out the understanding between them via a single java program below from which we will be drawing out conclusions from the output generated to figure out differences between String vs StringBuilder vs StringBuffer in Java.ExampleJava// Java program to demonstrate difference between// String, StringBuilder and StringBuffer // Main classclass GFG { // Method 1 // Concatenates to String public static void concat1(String s1) { s1 = s1 + "forgeeks"; } // Method 2 // Concatenates to StringBuilder public static void concat2(StringBuilder s2) { s2.append("forgeeks"); } // Method 3 // Concatenates to StringBuffer public static void concat3(StringBuffer s3) { s3.append("forgeeks"); } // Method 4 // Main driver method public static void main(String[] args) { // Custom input string // String 1 String s1 = "Geeks"; // Calling above defined method concat1(s1); // s1 is not changed System.out.println("String: " + s1); // String 1 StringBuilder s2 = new StringBuilder("Geeks"); // Calling above defined method concat2(s2); // s2 is changed System.out.println("StringBuilder: " + s2); // String 3 StringBuffer s3 = new StringBuffer("Geeks"); // Calling above defined method concat3(s3); // s3 is changed System.out.println("StringBuffer: " + s3); }}OutputString: Geeks StringBuilder: Geeksforgeeks StringBuffer: Geeksforgeeks Output explanation: Concat1: In this method, we pass a string “Geeks” and perform “s1 = s1 + ”forgeeks”. The string passed from main() is not changed, this is due to the fact that String is immutable. Altering the value of string creates another object and s1 in concat1() stores reference of the new string. References s1 in main() and cocat1() refer to different strings.Concat2: In this method, we pass a string “Geeks” and perform “s2.append(“forgeeks”)” which changes the actual value of the string (in main) to “Geeksforgeeks”. This is due to the simple fact that StringBuilder is mutable and hence changes its value.Concat3: StringBuilder is similar and can be compatible at all places to StringBuffer except for the key difference of thread safety. StringBuffer is thread-safe while StringBuilder does not guarantee thread safety which means synchronized methods are present in StringBuffer making control of one thread access at a time while it is not seen in StringBuilder, hence thread-unsafe. Note: Geeks now you must be wondering when to use which one, do refer below as follows:If a string is going to remain constant throughout the program, then use the String class object because a String object is immutable.If a string can change (for example: lots of logic and operations in the construction of the string) and will only be accessed from a single thread, using a StringBuilder is good enough.If a string can change and will be accessed from multiple threads, use a StringBuffer because StringBuffer is synchronous, so you have thread-safety.If you don’t want thread-safety than you can also go with StringBuilder class as it is not synchronized.Conversion between types of strings in JavaSometimes there is a need for converting a string object of different classes like String, StringBuffer, StringBuilder to one another. Below are some techniques to do the same. Let us do cover all use cases s follows:From String to StringBuffer and StringBuilderFrom StringBuffer and StringBuilder to StringFrom StringBuffer to StringBuilder or vice-versaCase 1: From String to StringBuffer and StringBuilder This one is an easy way out as we can directly pass the String class object to StringBuffer and StringBuilder class constructors. As the String class is immutable in java, so for editing a string, we can perform the same by converting it to StringBuffer or StringBuilder class objects.Example Java// Java program to demonstrate conversion from// String to StringBuffer and StringBuilder // Main classpublic class GFG { // Main driver method public static void main(String[] args) { // Custom input string String str = "Geeks"; // Converting String object to StringBuffer object // by // creating object of StringBuffer class StringBuffer sbr = new StringBuffer(str); // Reversing the string sbr.reverse(); // Printing the reversed string System.out.println(sbr); // Converting String object to StringBuilder object StringBuilder sbl = new StringBuilder(str); // Adding it to string using append() method sbl.append("ForGeeks"); // Print and display the above appended string System.out.println(sbl); }}OutputskeeG GeeksForGeeks Case 2: From StringBuffer and StringBuilder to String This conversion can be performed using toString() method which is overridden in both StringBuffer and StringBuilder classes. Below is the java program to demonstrate the same. Note that while we use toString() method, a new String object(in Heap area) is allocated and initialized to the character sequence currently represented by the StringBuffer object, which means the subsequent changes to the StringBuffer object do not affect the contents of the String object. ExampleJava// Java Program to Demonstrate Conversion from// String to StringBuffer and StringBuilder // Main classpublic class GFG { // Main driver method public static void main(String[] args) { // Creating objects of StringBuffer class StringBuffer sbr = new StringBuffer("Geeks"); StringBuilder sbdr = new StringBuilder("Hello"); // Converting StringBuffer object to String // using toString() method String str = sbr.toString(); // Printing the above string System.out.println( "StringBuffer object to String : "); System.out.println(str); // Converting StringBuilder object to String String str1 = sbdr.toString(); // Printing the above string System.out.println( "StringBuilder object to String : "); System.out.println(str1); // Changing StringBuffer object sbr // but String object(str) doesn't change sbr.append("ForGeeks"); // Printing the above two strings on console System.out.println(sbr); System.out.println(str); }}OutputStringBuffer object to String : Geeks StringBuilder object to String : Hello GeeksForGeeks GeeksCase 3: From StringBuffer to StringBuilder or vice-versaThis conversion is tricky. There is no direct way to convert the same. In this case, We can use a String class object. We first convert the StringBuffer/StringBuilder object to String using toString() method and then from String to StringBuilder/StringBuffer using constructors.ExampleJava// Java program to Demonstrate conversion from// String to StringBuffer and StringBuilder // Main classpublic class GFG { // Main driver method public static void main(String[] args) { // Creating object of StringBuffer class and // passing our input string to it StringBuffer sbr = new StringBuffer("Geeks"); // Storing value StringBuffer object in String and // henceforth converting StringBuffer object to // StringBuilder class String str = sbr.toString(); StringBuilder sbl = new StringBuilder(str); // Printing th StringBuilder object on console System.out.println(sbl); }}OutputGeeksFrom the above three use-cases we can conclude out below pointers: Objects of String are immutable, and objects of StringBuffer and StringBuilder are mutable.StringBuffer and StringBuilder are similar, but StringBuilder is faster and preferred over StringBuffer for the single-threaded program. If thread safety is needed, then StringBuffer is used.Related Article: Reverse a String in Java (5 Different Ways)This article is contributed by Pranjal and Gaurav Miglani. If you like GeeksforGeeks and would like to contribute, you can also write an article and mail your article to review-team@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.Attention reader! Don’t stop learning now. Get hold of all the important Java Foundation and Collections concepts with the Fundamentals of Java and Java Collections Course at a student-friendly price and become industry ready. To complete your preparation from learning a language to DS Algo and many more, please refer Complete Interview Preparation Course.My Personal Notes arrow_drop_upSave LikeNext Reverse a string in JavaRecommended ArticlesPage :Difference Between StringBuffer and StringBuilder in Java24, Jun 20Sorting collection of String and StringBuffer in Java20, Aug 17equals() on String and StringBuffer objects in Java18, Feb 18Matcher appendReplacement(StringBuffer, String) method in Java with Examples27, Nov 18Matcher appendReplacement(StringBuilder, String) method in Java with Examples27, Nov 18A Java Random and StringBuffer Puzzle25, Sep 17StringBuffer deleteCharAt() Method in Java with Examples11, Jul 18StringBuffer setLength() in Java with Examples19, Oct 18StringBuffer subSequence() in Java with Examples19, Oct 18StringBuffer codePointCount() method in Java with Examples22, Oct 18StringBuffer codePointBefore() method in Java with Examples22, Oct 18StringBuffer trimToSize() method in Java with Examples22, Oct 18StringBuffer toString() method in Java with Examples22, Oct 18StringBuffer codePointAt() method in Java with Examples22, Oct 18StringBuffer ensureCapacity() method in Java with Examples22, Oct 18StringBuffer offsetByCodePoints() method in Java with Examples22, Oct 18StringBuffer setCharAt() method in Java with Examples22, Oct 18StringBuffer getChars() method in Java with Examples22, Oct 18StringBuffer indexOf() method in Java with Examples30, Oct 18StringBuffer substring() method in Java with Examples22, Oct 18StringBuffer lastIndexOf() method in Java with Examples22, Oct 18Matcher appendTail(StringBuffer) method in Java with Examples27, Nov 18StringBuffer insert() in Java10, Mar 18StringBuffer reverse() Method in Java with Examples10, Jul 18Article Contributed By :GeeksforGeeksVote for difficultyCurrent difficulty : EasyEasy Normal Medium Hard ExpertImproved By :sharma99ankit18zero_cool_solankimayankchinmayvemuriclintraArticle Tags :java-StringBufferJava-StringBuilderJava-StringsDifference BetweenJavaSchool ProgrammingPractice Tags :Java-StringsJavaReport IssueWriting code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load CommentsWhat's NewJava Backend Development- LIVE ClassesView DetailsComplete Interview PreparationView DetailsSystem Design-Live Classes for Working ProfessionalsView DetailsMost popular in Difference BetweenDifference between DDL and DML in DBMSDifferences between TCP and UDPWeb 1.0, Web 2.0 and Web 3.0 with their differenceDifference between C and C++Stack vs Heap Memory AllocationMost visited in JavaArrays in JavaObject Oriented Programming (OOPs) Concept in JavaSplit() String method in Java with examplesFor-each loop in JavaArrays.sort() in Java with examples× 5th Floor, A-118,Sector-136, Noida, Uttar Pradesh - 201305 feedback@geeksforgeeks.orgCompanyAbout UsCareersPrivacy PolicyContact UsCopyright PolicyLearnAlgorithmsData StructuresLanguagesCS SubjectsVideo TutorialsWeb DevelopmentWeb TutorialsHTMLCSSJavaScriptBootstrapContributeWrite an ArticleWrite Interview ExperienceInternshipsVideos@geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It ! Start Your Coding Journey Now!Login Register