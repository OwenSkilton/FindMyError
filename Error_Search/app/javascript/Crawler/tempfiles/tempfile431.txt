Regular Expressions in Java - GeeksforGeeksSkip to content TutorialsPractice DS & Algo.Must Do QuestionsDSA Topic-wiseDSA Company-wiseAlgorithmsAnalysis of AlgorithmsAsymptotic AnalysisWorst, Average and Best CasesAsymptotic NotationsLittle o and little omega notationsLower and Upper Bound TheoryAnalysis of LoopsSolving RecurrencesAmortized AnalysisWhat does 'Space Complexity' mean ?Pseudo-polynomial AlgorithmsPolynomial Time Approximation SchemeA Time Complexity QuestionSearching AlgorithmsSorting AlgorithmsGraph AlgorithmsPattern SearchingGeometric AlgorithmsMathematicalBitwise AlgorithmsRandomized AlgorithmsGreedy AlgorithmsDynamic ProgrammingDivide and ConquerBacktrackingBranch and BoundAll AlgorithmsData StructuresArraysLinked ListStackQueueBinary TreeBinary Search TreeHeapHashingGraphAdvanced Data StructureMatrixStringsAll Data StructuresInterview CornerCompany PreparationTop TopicsPractice Company QuestionsInterview ExperiencesExperienced InterviewsInternship InterviewsCompetititve ProgrammingDesign PatternsSystem Design TutorialMultiple Choice QuizzesLanguagesCC++JavaPythonC#JavaScriptjQuerySQLPHPScalaPerlGo LanguageHTMLCSSKotlinCS SubjectsMathematicsOperating SystemDBMSComputer NetworksComputer Organization and ArchitectureTheory of ComputationCompiler DesignDigital LogicSoftware EngineeringGATEGATE Computer Science NotesLast Minute NotesGATE CS Solved PapersGATE CS Original Papers and Official KeysGATE 2021 DatesGATE CS 2021 SyllabusImportant Topics for GATE CSWeb TechnologiesHTMLCSSJavaScriptAngularJSReactJSNodeJSBootstrapjQueryPHPSoftware DesignsSoftware Design PatternsSystem Design TutorialSchool LearningSchool ProgrammingMathematicsNumber SystemAlgebraTrigonometryStatisticsProbabilityGeometryMensurationCalculusMaths Notes (Class 8-12)Class 8 NotesClass 9 NotesClass 10 NotesClass 11 NotesClass 12 NotesNCERT SolutionsClass 8 Maths SolutionClass 9 Maths SolutionClass 10 Maths SolutionClass 11 Maths SolutionClass 12 Maths SolutionRD Sharma SolutionsClass 8 Maths SolutionClass 9 Maths SolutionClass 10 Maths SolutionClass 11 Maths SolutionClass 12 Maths SolutionPhysics Notes (Class 8-11)Class 8 NotesClass 9 NotesClass 10 NotesClass 11 NotesISRO CSISRO CS Solved PapersISRO CS Original Papers and Official KeysISRO CS Syllabus for Scientist/Engineer ExamUGC NET CSUGC NET CS Notes Paper IIUGC NET CS Notes Paper IIIUGC NET CS Solved PapersStudentCampus Ambassador ProgramSchool Ambassador ProgramProjectGeek of the MonthCampus Geek of the MonthPlacement CourseCompetititve ProgrammingTestimonialsGeek on the TopCareersInternshipJobsApply for JobsPost a JobCourses WriteCome write articles for us and get featuredPracticeLearn and code with the best industry expertsPremiumGet access to ad-free content, doubt assistance and more!JobsCome and find your dream job with usGeeks DigestQuizzesGeeks CampusGblog ArticlesIDECampus Mantri HomeSaved VideosCoursesGBlogPuzzlesWhat's New ? Change Language Data StructuresAlgorithmsInterview PreparationTopic-wise PracticeC++JavaPythonCompetitive ProgrammingMachine LearningWeb DevelopmentPuzzlesProject IdeasGFG School Related Articles ▲Related ArticlesMethods in JavaStrings in JavaArrays in JavaCollections in JavaStream In JavaExceptions in JavaRegular Expressions in JavaMultithreading in JavaFile Handling in Java with CRUD operationsPackages In JavaJava TutorialJava | How to start learning JavaJava Programming BasicsHow JVM Works – JVM Architecture?Object Oriented Programming (OOPs) Concept in JavaClasses and Objects in JavaConstructors in JavaTable of ContentsMethods in JavaStrings in JavaArrays in JavaCollections in JavaStream In JavaExceptions in JavaRegular Expressions in JavaMultithreading in JavaFile Handling in Java with CRUD operationsPackages In JavaJava TutorialJava | How to start learning JavaJava Programming BasicsHow JVM Works – JVM Architecture?Object Oriented Programming (OOPs) Concept in JavaClasses and Objects in JavaConstructors in JavaImprove Article Save Article Like Article Regular Expressions in JavaDifficulty Level : MediumLast Updated : 31 Aug, 2021Regular Expressions or Regex (in short) is an API for defining String patterns that can be used for searching, manipulating, and editing a string in Java. Email validation and passwords are a few areas of strings where Regex is widely used to define the constraints. Regular Expressions are provided under java.util.regex package. This consists of 3 classes and 1 interface. The java.util.regex package primarily consists of the following three classes as depicted below in tabular format as follows:ClassDescriptionutil.regex.PatternUsed for defining patternsutil.regex.MatcherUsed for performing match operations on text using patternsPatternSyntaxExceptionUsed for indicating syntax error in a regular expression patternRegex in java provides us two classes listed below as follows:Pattern ClassMatcher ClassMore understanding can be interpreted from the image provided below as follows:Class 1: Pattern Class This class is a compilation of regular expressions that can be used to define various types of patterns, providing no public constructors. This can be created by invoking the compile() method which accepts a regular expression as the first argument, thus returns a pattern after execution. MethodDescriptioncompile(String regex)It is used to compile the given regular expression into a pattern.compile(String regex, int flags)It is used to compile the given regular expression into a pattern with the given flags.flags()It is used to return this pattern’s match flags.matcher(CharSequence input)It is used to create a matcher that will match the given input against this pattern.matches(String regex, CharSequence input)It is used to compile the given regular expression and attempts to match the given input against it.pattern()It is used to return the regular expression from which this pattern was compiled.quote(String s)It is used to return a literal pattern String for the specified String.split(CharSequence input)It is used to split the given input sequence around matches of this pattern.split(CharSequence input, int limit)It is used to split the given input sequence around matches of this pattern. The limit parameter controls the number of times the pattern is applied.toString()It is used to return the string representation of this pattern.Example: Pattern class Java// Java Program Demonstrating Working of matches() Method// Pattern class // Importing Pattern class from java.util.regex packageimport java.util.regex.Pattern; // Main classclass GFG { // Main driver method public static void main(String args[]) { // Following line prints "true" because the whole // text "geeksforgeeks" matches pattern // "geeksforge*ks" System.out.println(Pattern.matches( "geeksforge*ks", "geeksforgeeks")); // Following line prints "false" because the whole // text "geeksfor" doesn't match pattern "g*geeks*" System.out.println( Pattern.matches("g*geeks*", "geeksfor")); }}Outputtrue falseClass 2: Matcher classThis object is used to perform match operations for an input string in java, thus interpreting the previously explained patterns. This too defines no public constructors. This can be implemented by invoking a matcher() on any pattern object.MethodDescriptionfind()It is mainly used for searching multiple occurrences of the regular expressions in the text.find(int start)It is used for searching occurrences of the regular expressions in the text starting from the given index.start()It is used for getting the start index of a match that is being found using find() method.end()It is used for getting the end index of a match that is being found using find() method. It returns index of character next to last matching character.groupCount()It is used to find the total number of the matched subsequence.group()It is used to find the matched subsequence.matches()It is used to test whether the regular expression matches the pattern.Note: that Pattern.matches() checks if the whole text matches with a pattern or not. Other methods (demonstrated below) are mainly used to find multiple occurrences of patterns in the text.Let us do discuss few sample programs as we did for Pattern class. Here we will be discussing a few java programs that demonstrate the workings of compile(), find(), start(), end(), and split() in order to get a better understanding of the Matcher class.Example 1: Pattern searching Java// Java program to demonstrate working of// String matching in Java // Importing Matcher and Pattern class to//import java.util.regex.Matcher;import java.util.regex.Pattern; // Main classclass GFG { // Main driver method public static void main(String args[]) { // Create a pattern to be searched // Custom pattern Pattern pattern = Pattern.compile("geeks"); // Search above pattern in "geeksforgeeks.org" Matcher m = pattern.matcher("geeksforgeeks.org"); // Finding string using find() method while (m.find()) // Print starting and ending indexes // of the pattern in the text // using this functionality of this class System.out.println("Pattern found from " + m.start() + " to " + (m.end() - 1)); }}OutputPattern found from 0 to 4 Pattern found from 8 to 12Example 2: Simple regular expression searching Java// Java program to demonstrate working of// String matching in Java // Importing Matcher and Pattern class// from java.util packageimport java.util.regex.Matcher;import java.util.regex.Pattern; // Main classclass GFG { // Main driver method public static void main(String args[]) { // Creating a pattern to be searched // Custom pattern to be searched Pattern pattern = Pattern.compile("ge*"); // Searching for the above pattern in // "geeksforgeeks.org" Matcher m = pattern.matcher("geeksforgeeks.org"); // Checking whether the pattern is there or not // using find() method while (m.find()) // Print starting and ending indexes of the // pattern in text using method functionality of // this class System.out.println("Pattern found from " + m.start() + " to " + (m.end() - 1)); }}OutputPattern found from 0 to 2 Pattern found from 8 to 10 Pattern found from 16 to 16Example 3: Case Insensitive pattern searching Java// Java Program Demonstrating Working of String matching // Importing Matcher class and Pattern classes// from java.util.regex packageimport java.util.regex.Matcher;import java.util.regex.Pattern; // Main classclass GFG { // Main driver method public static void main(String args[]) { // Creating a pattern to be searched Pattern pattern = Pattern.compile( "ge*", Pattern.CASE_INSENSITIVE); // Searching above pattern in "geeksforgeeks.org" Matcher m = pattern.matcher("GeeksforGeeks.org"); // Find th above string using find() method while (m.find()) // Printing the starting and ending indexes of // the pattern in text using class method // functionalities System.out.println("Pattern found from " + m.start() + " to " + (m.end() - 1)); }}OutputPattern found from 0 to 2 Pattern found from 8 to 10 Pattern found from 16 to 16Example 4: split() method to split a text based on a delimiter pattern.The string split() method breaks a given string around matches of the given regular expression. There exist two variations of this method so do go through it prior to moving onto the implementation of this method.Illustration:Input --> String: 016-78967 Output --> Regex: {"016", "78967"}Java// Java program Illustrating Working of split() Method// by Splitting a text by a given pattern // Importing Matcher and Pattern classes from// java.util.regex packageimport java.util.regex.Matcher;import java.util.regex.Pattern; // Main classclass GFG { // Main driver method public static void main(String args[]) { // Custom string String text = "geeks1for2geeks3"; // Specifies the string pattern // which is to be searched String delimiter = "\\d"; Pattern pattern = Pattern.compile( delimiter, Pattern.CASE_INSENSITIVE); // Used to perform case insensitive search of the // string String[] result = pattern.split(text); // Iterating using for each loop for (String temp : result) System.out.println(temp); }}Outputgeeks for geeksNow we are done with discussing both the classes. Now we will be introducing you to two new concepts that make absolute clear Also there is an exception class associated with Concept 1: PatternSyntaxException classThis is an object of Regex which is used to indicate a syntax error in a regular expression pattern and is an unchecked exception. Following are the methods been there up in the PatternSyntaxException class as provided below in tabular format as follows.MethodDescriptiongetDescription()It is used to retrieve the description of the error.getIndex()It is used to retrieve the error-index.getMessage()It is used to return a multi-line string containing the description of the syntax error and its index, the erroneous regular-expression pattern, and a visual indication of the error index within the pattern.getPattern()It is used to retrieve the erroneous regular-expression pattern.Concept 2: MatchResult InterfaceThis interface is used to determine the result of a match operation for a regular expression. It must be noted that although the match boundaries, groups, and group boundaries can be seen, the modification is not allowed through a MatchResult. Following are the methods been there up here in this interface as provided below in tabular format as follows:MethodDescriptionend()It is used to return the offset after the last character is matched.end(int group)It is used to return the offset after the last character of the subsequence captured by the given group during this match.group()It is used to return the input subsequence matched by the previous match.group(int group)It is used to return the input subsequence captured by the given group during the previous match operation.groupCount()It is used to return the number of capturing groups in this match result’s pattern.start()It is used to return the start index of the match.start(int group)It is used to return the start index of the subsequence captured by the given group during this match.Lastly, let us do discuss some of the important observations as retrieved from the above articleWe create a pattern object by calling Pattern.compile(), there is no constructor. compile() is a static method in Pattern class.Like above, we create a Matcher object using matcher() on objects of Pattern class.Pattern.matches() is also a static method that is used to check if given text as a whole matches pattern or not.find() is used to find multiple occurrences of patterns in the text.We can split a text based on a delimiter pattern using the split() methodThis article is contributed by Akash Ojha. If you like GeeksforGeeks and would like to contribute, you can also write an article and mail your article to review-team@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks. Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.Attention reader! Don’t stop learning now. Get hold of all the important Java Foundation and Collections concepts with the Fundamentals of Java and Java Collections Course at a student-friendly price and become industry ready. To complete your preparation from learning a language to DS Algo and many more, please refer Complete Interview Preparation Course.My Personal Notes arrow_drop_upSave LikePreviousExceptions in JavaNext Multithreading in JavaRecommended ArticlesPage :Mathematical Operations on Algebraic Expressions - Algebraic Expressions and Identities | Class 8 Maths16, Nov 20How to validate an IP address using Regular Expressions in Java14, Feb 20How to validate a Username using Regular Expressions in Java11, Mar 20How to validate a Password using Regular Expressions in Java15, Apr 20How to Validate a Password using Regular Expressions in Android?09, Dec 20Lambda Expressions in Java 811, Aug 16Block Lambda Expressions in Java11, Feb 21Java - Lambda Expressions Parameters22, Sep 21How to Make Java Regular Expression Case Insensitive in Java?08, Mar 21SQL | Conditional Expressions27, Oct 17Lambda Expressions | Concurrent Programming Approach 408, Apr 19Class 8 RD Sharma Solutions - Chapter 6 Algebraic Expressions And Identities - Exercise 6.119, Nov 20Class 8 RD Sharma Solutions - Chapter 6 Algebraic Expressions And Identities - Exercise 6.4 | Set 104, Dec 20Class 8 NCERT Solutions- Chapter 9 Algebraic Expressions and Identities - Exercise 9.424, Dec 20Class 8 RD Sharma Solutions- Chapter 6 Algebraic Expressions And Identities - Exercise 6.206, Jan 21Class 8 RD Sharma Solutions- Chapter 6 Algebraic Expressions And Identities - Exercise 6.6 | Set 118, Jan 21Class 8 RD Sharma Solutions - Chapter 8 Division Of Algebraic Expressions - Exercise 8.501, Feb 21Division of Algebraic Expressions19, Feb 21Class 8 NCERT Solutions - Chapter 9 Algebraic Expressions and Identities - Exercise 9.128, Nov 20Java Program to Find Duplicate Words in a Regular Expression18, Nov 20Java Program to Convert String to String Array Using Regular Expression08, Mar 21Finding Data Type of User Input using Regular Expression in Java20, Aug 20How to Use Regular Expression as a Substitute of endsWith() Method in Java?21, Sep 21How to validate identifier using Regular Expression in Java15, Apr 20Article Contributed By :GeeksforGeeksVote for difficultyCurrent difficulty : MediumEasy Normal Medium Hard ExpertImproved By :Chinmoy LenkaSapna2001solankimayankarorakashish0911Article Tags :java-regular-expressionJavaTechnical ScripterPractice Tags :JavaReport IssueWriting code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load CommentsWhat's NewJava Backend Development- LIVE ClassesView DetailsComplete Interview PreparationView DetailsSystem Design-Live Classes for Working ProfessionalsView DetailsMost popular in JavaSplit() String method in Java with examplesFor-each loop in JavaArrays.sort() in Java with examplesReverse a string in JavaArrayList in JavaMore related articles in JavaHashMap in Java with ExamplesMultidimensional Arrays in JavaInitialize an ArrayList in JavaHow to iterate any Map in JavaHow to add an element to an Array in Java?× 5th Floor, A-118,Sector-136, Noida, Uttar Pradesh - 201305 feedback@geeksforgeeks.orgCompanyAbout UsCareersPrivacy PolicyContact UsCopyright PolicyLearnAlgorithmsData StructuresLanguagesCS SubjectsVideo TutorialsWeb DevelopmentWeb TutorialsHTMLCSSJavaScriptBootstrapContributeWrite an ArticleWrite Interview ExperienceInternshipsVideos@geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It ! Start Your Coding Journey Now!Login Register