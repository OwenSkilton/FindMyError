Arrays class in Java - GeeksforGeeksSkip to content TutorialsPractice DS & Algo.Must Do QuestionsDSA Topic-wiseDSA Company-wiseAlgorithmsAnalysis of AlgorithmsAsymptotic AnalysisWorst, Average and Best CasesAsymptotic NotationsLittle o and little omega notationsLower and Upper Bound TheoryAnalysis of LoopsSolving RecurrencesAmortized AnalysisWhat does 'Space Complexity' mean ?Pseudo-polynomial AlgorithmsPolynomial Time Approximation SchemeA Time Complexity QuestionSearching AlgorithmsSorting AlgorithmsGraph AlgorithmsPattern SearchingGeometric AlgorithmsMathematicalBitwise AlgorithmsRandomized AlgorithmsGreedy AlgorithmsDynamic ProgrammingDivide and ConquerBacktrackingBranch and BoundAll AlgorithmsData StructuresArraysLinked ListStackQueueBinary TreeBinary Search TreeHeapHashingGraphAdvanced Data StructureMatrixStringsAll Data StructuresInterview CornerCompany PreparationTop TopicsPractice Company QuestionsInterview ExperiencesExperienced InterviewsInternship InterviewsCompetititve ProgrammingDesign PatternsSystem Design TutorialMultiple Choice QuizzesLanguagesCC++JavaPythonC#JavaScriptjQuerySQLPHPScalaPerlGo LanguageHTMLCSSKotlinCS SubjectsMathematicsOperating SystemDBMSComputer NetworksComputer Organization and ArchitectureTheory of ComputationCompiler DesignDigital LogicSoftware EngineeringGATEGATE Computer Science NotesLast Minute NotesGATE CS Solved PapersGATE CS Original Papers and Official KeysGATE 2021 DatesGATE CS 2021 SyllabusImportant Topics for GATE CSWeb TechnologiesHTMLCSSJavaScriptAngularJSReactJSNodeJSBootstrapjQueryPHPSoftware DesignsSoftware Design PatternsSystem Design TutorialSchool LearningSchool ProgrammingMathematicsNumber SystemAlgebraTrigonometryStatisticsProbabilityGeometryMensurationCalculusMaths Notes (Class 8-12)Class 8 NotesClass 9 NotesClass 10 NotesClass 11 NotesClass 12 NotesNCERT SolutionsClass 8 Maths SolutionClass 9 Maths SolutionClass 10 Maths SolutionClass 11 Maths SolutionClass 12 Maths SolutionRD Sharma SolutionsClass 8 Maths SolutionClass 9 Maths SolutionClass 10 Maths SolutionClass 11 Maths SolutionClass 12 Maths SolutionPhysics Notes (Class 8-11)Class 8 NotesClass 9 NotesClass 10 NotesClass 11 NotesISRO CSISRO CS Solved PapersISRO CS Original Papers and Official KeysISRO CS Syllabus for Scientist/Engineer ExamUGC NET CSUGC NET CS Notes Paper IIUGC NET CS Notes Paper IIIUGC NET CS Solved PapersStudentCampus Ambassador ProgramSchool Ambassador ProgramProjectGeek of the MonthCampus Geek of the MonthPlacement CourseCompetititve ProgrammingTestimonialsGeek on the TopCareersInternshipJobsApply for JobsPost a JobCourses WriteCome write articles for us and get featuredPracticeLearn and code with the best industry expertsPremiumGet access to ad-free content, doubt assistance and more!JobsCome and find your dream job with usGeeks DigestQuizzesGeeks CampusGblog ArticlesIDECampus Mantri HomeSaved VideosCoursesGBlogPuzzlesWhat's New ? Change Language Data StructuresAlgorithmsInterview PreparationTopic-wise PracticeC++JavaPythonCompetitive ProgrammingMachine LearningWeb DevelopmentPuzzlesProject IdeasGFG School Related Articles ▲Related ArticlesArrays class in JavaArrays in JavaReturning Multiple values in JavaHow to add an element to an Array in Java?How to determine length or size of an Array in Java?length vs length() in JavaSplit() String method in Java with examplesJava String trim() method with ExampleTrim (Remove leading and trailing spaces) a string in JavaJava Program to Count the Number of Lines, Words, Characters, and Paragraphs in a Text FileCheck if a String Contains Only Alphabets in Java Using Lambda ExpressionRemove elements from a List that satisfy given predicate in JavaCheck if a String Contains Only Alphabets in Java using ASCII ValuesCheck if a String Contains only Alphabets in Java using RegexHow to check if string contains only digits in JavaCheck if given string contains all the digitsGiven a string, find its first non-repeating characterFirst non-repeating character using one traversal of string | Set 2Missing characters to make a string PangramCheck if a string is Pangrammatic LipogramRemoving punctuations from a given stringRearrange characters in a string such that no two adjacent are sameProgram to check if input is an integer or a stringQuick way to check if all the characters of a string are sameProgram to find the initials of a name.Arrays.sort() in Java with examplesFor-each loop in JavaReverse a string in JavaTable of ContentsArrays class in JavaArrays in JavaReturning Multiple values in JavaHow to add an element to an Array in Java?How to determine length or size of an Array in Java?length vs length() in JavaSplit() String method in Java with examplesJava String trim() method with ExampleTrim (Remove leading and trailing spaces) a string in JavaJava Program to Count the Number of Lines, Words, Characters, and Paragraphs in a Text FileCheck if a String Contains Only Alphabets in Java Using Lambda ExpressionRemove elements from a List that satisfy given predicate in JavaCheck if a String Contains Only Alphabets in Java using ASCII ValuesCheck if a String Contains only Alphabets in Java using RegexHow to check if string contains only digits in JavaCheck if given string contains all the digitsGiven a string, find its first non-repeating characterFirst non-repeating character using one traversal of string | Set 2Missing characters to make a string PangramCheck if a string is Pangrammatic LipogramRemoving punctuations from a given stringRearrange characters in a string such that no two adjacent are sameProgram to check if input is an integer or a stringQuick way to check if all the characters of a string are sameProgram to find the initials of a name.Arrays.sort() in Java with examplesFor-each loop in JavaReverse a string in JavaImprove Article Save Article Like Article Arrays class in JavaDifficulty Level : EasyLast Updated : 25 Aug, 2021The Arrays class in java.util package is a part of the Java Collection Framework. This class provides static methods to dynamically create and access Java arrays. It consists of only static methods and the methods of Object class. The methods of this class can be used by the class name itself.The class hierarchy is as follows: java.lang.Object ↳ java.util.ArraysGeek, now you must be wondering why do we need java Arrays class when we are able to declare, initialize and compute operations over arrays. The answer to this though lies within the methods of this class which we are going to discuss further as practically these functions help programmers expanding horizons with arrays for instance there are often times when loops are used to do some tasks on an array like: Fill an array with a particular value.Sort an Arrays.Search in an Arrays.And many more.Here Arrays class provides several static methods that can be used to perform these tasks directly without the use of loops, hence forth making our code super short and optimized.Syntax: Class declaration public class Arrays extends ObjectSyntax: In order to use Arrays Arrays.<function name>;Methods in Java Array Class The Arrays class of the java.util package contains several static methods that can be used to fill, sort, search, etc in arrays. Now let us discuss the methods of this class which are shown below in a tabular format as follows:Methods Action PerformedasList()Returns a fixed-size list backed by the specified ArraysbinarySearch()Searches for the specified element in the array with the help of the Binary Search AlgorithmbinarySearch(array, fromIndex, toIndex, key, Comparator)Searches a range of the specified array for the specified object using the Binary Search Algorithmcompare(array 1, array 2)Compares two arrays passed as parameters lexicographically.copyOf(originalArray, newLength)Copies the specified array, truncating or padding with the default value (if necessary) so the copy has the specified length.copyOfRange(originalArray, fromIndex, endIndex)Copies the specified range of the specified array into a new Arrays.deepEquals(Object[] a1, Object[] a2)Returns true if the two specified arrays are deeply equal to one another.deepHashCode(Object[] a) Returns a hash code based on the “deep contents” of the specified Arrays.deepToString(Object[] a)Returns a string representation of the “deep contents” of the specified Arrays.equals(array1, array2)Checks if both the arrays are equal or not.fill(originalArray, fillValue)Assigns this fill value to each index of this arrays.hashCode(originalArray) Returns an integer hashCode of this array instance.mismatch(array1, array2) Finds and returns the index of the first unmatched element between the two specified arrays.parallelPrefix(originalArray, fromIndex, endIndex, functionalOperator)Performs parallelPrefix for the given range of the array with the specified functional operator.parallelPrefix(originalArray, operator)Performs parallelPrefix for complete array with the specified functional operator. parallelSetAll(originalArray, functionalGenerator)Sets all the elements of this array in parallel, using the provided generator function. parallelSort(originalArray)Sorts the specified array using parallel sort.setAll(originalArray, functionalGenerator)Sets all the elements of the specified array using the generator function provided. sort(originalArray)Sorts the complete array in ascending order. sort(originalArray, fromIndex, endIndex)Sorts the specified range of array in ascending order.sort(T[] a, int fromIndex, int toIndex, Comparator< super T> c)Sorts the specified range of the specified array of objects according to the order induced by the specified comparator.sort(T[] a, Comparator< super T> c)Sorts the specified array of objects according to the order induced by the specified comparator.spliterator(originalArray)Returns a Spliterator covering all of the specified Arrays.spliterator(originalArray, fromIndex, endIndex) Returns a Spliterator of the type of the array covering the specified range of the specified arrays.stream(originalArray) Returns a sequential stream with the specified array as its source.toString(originalArray) It returns a string representation of the contents of this array. The string representation consists of a list of the array’s elements, enclosed in square brackets (“[]”). Adjacent elements are separated by the characters a comma followed by a space. Elements are converted to strings as by String.valueOf() function.Implementation:Example 1: asList() Method Java// Java Program to Demonstrate Arrays Class// Via asList() method // Importing Arrays utility class// from java.util packageimport java.util.Arrays; // Main classclass GFG { // Main driver method public static void main(String[] args) { // Get the Array int intArr[] = { 10, 20, 15, 22, 35 }; // To convert the elements as List System.out.println("Integer Array as List: " + Arrays.asList(intArr)); }}OutputInteger Array as List: [[I@2f4d3709] Example 2: binarySearch() MethodThis methods search for the specified element in the array with the help of the binary search algorithm.Java// Java Program to Demonstrate Arrays Class// Via binarySearch() method // Importing Arrays utility class// from java.util packageimport java.util.Arrays; // Main classpublic class GFG { // Main driver method public static void main(String[] args) { // Get the Array int intArr[] = { 10, 20, 15, 22, 35 }; Arrays.sort(intArr); int intKey = 22; // Print the key and corresponding index System.out.println( intKey + " found at index = " + Arrays.binarySearch(intArr, intKey)); }}Output22 found at index = 3 Example 3: binarySearch(array, fromIndex, toIndex, key, Comparator) Method This method searches a range of the specified array for the specified object using the binary search algorithm.Java// Java program to demonstrate// Arrays.binarySearch() method import java.util.Arrays; public class Main { public static void main(String[] args) { // Get the Array int intArr[] = { 10, 20, 15, 22, 35 }; Arrays.sort(intArr); int intKey = 22; System.out.println( intKey + " found at index = " + Arrays .binarySearch(intArr, 1, 3, intKey)); }}Output22 found at index = -4 Example 4: compare(array 1, array 2) Method Java// Java program to demonstrate// Arrays.compare() method import java.util.Arrays; public class Main { public static void main(String[] args) { // Get the Array int intArr[] = { 10, 20, 15, 22, 35 }; // Get the second Array int intArr1[] = { 10, 15, 22 }; // To compare both arrays System.out.println("Integer Arrays on comparison: " + Arrays.compare(intArr, intArr1)); }}OutputInteger Arrays on comparison: 1 Example 5: compareUnsigned(array 1, array 2) Method Java// Java program to demonstrate// Arrays.compareUnsigned() method import java.util.Arrays; public class Main { public static void main(String[] args) { // Get the Arrays int intArr[] = { 10, 20, 15, 22, 35 }; // Get the second Arrays int intArr1[] = { 10, 15, 22 }; // To compare both arrays System.out.println("Integer Arrays on comparison: " + Arrays.compareUnsigned(intArr, intArr1)); }}OutputInteger Arrays on comparison: 1 Example 6: copyOf(originalArray, newLength) Method Java// Java program to demonstrate// Arrays.copyOf() method import java.util.Arrays; public class Main { public static void main(String[] args) { // Get the Array int intArr[] = { 10, 20, 15, 22, 35 }; // To print the elements in one line System.out.println("Integer Array: " + Arrays.toString(intArr)); System.out.println("\nNew Arrays by copyOf:\n"); System.out.println("Integer Array: " + Arrays.toString( Arrays.copyOf(intArr, 10))); }}OutputInteger Array: [10, 20, 15, 22, 35] New Arrays by copyOf: Integer Array: [10, 20, 15, 22, 35, 0, 0, 0, 0, 0] Example 7: copyOfRange(originalArray, fromIndex, endIndex) Method Java// Java program to demonstrate// Arrays.copyOfRange() method import java.util.Arrays; public class Main { public static void main(String[] args) { // Get the Array int intArr[] = { 10, 20, 15, 22, 35 }; // To print the elements in one line System.out.println("Integer Array: " + Arrays.toString(intArr)); System.out.println("\nNew Arrays by copyOfRange:\n"); // To copy the array into an array of new length System.out.println("Integer Array: " + Arrays.toString( Arrays.copyOfRange(intArr, 1, 3))); }}OutputInteger Array: [10, 20, 15, 22, 35] New Arrays by copyOfRange: Integer Array: [20, 15] Example 8: deepEquals(Object[] a1, Object[] a2) Method Java// Java program to demonstrate// Arrays.deepEquals() method import java.util.Arrays; public class Main { public static void main(String[] args) { // Get the Arrays int intArr[][] = { { 10, 20, 15, 22, 35 } }; // Get the second Arrays int intArr1[][] = { { 10, 15, 22 } }; // To compare both arrays System.out.println("Integer Arrays on comparison: " + Arrays.deepEquals(intArr, intArr1)); }}OutputInteger Arrays on comparison: false Example 9: deepHashCode(Object[] a) Method Java// Java program to demonstrate// Arrays.deepHashCode() method import java.util.Arrays; public class Main { public static void main(String[] args) { // Get the Array int intArr[][] = { { 10, 20, 15, 22, 35 } }; // To get the dep hashCode of the arrays System.out.println("Integer Array: " + Arrays.deepHashCode(intArr)); }}OutputInteger Array: 38475344 Example 10: deepToString(Object[] a) Method Java// Java program to demonstrate// Arrays.deepToString() method import java.util.Arrays; public class Main { public static void main(String[] args) { // Get the Array int intArr[][] = { { 10, 20, 15, 22, 35 } }; // To get the deep String of the arrays System.out.println("Integer Array: " + Arrays.deepToString(intArr)); }}OutputInteger Array: [[10, 20, 15, 22, 35]] Example 11: equals(array1, array2) Method Java// Java program to demonstrate// Arrays.equals() method import java.util.Arrays; public class Main { public static void main(String[] args) { // Get the Arrays int intArr[] = { 10, 20, 15, 22, 35 }; // Get the second Arrays int intArr1[] = { 10, 15, 22 }; // To compare both arrays System.out.println("Integer Arrays on comparison: " + Arrays.equals(intArr, intArr1)); }}OutputInteger Arrays on comparison: false Example 12: fill(originalArray, fillValue) Method Java// Java program to demonstrate// Arrays.fill() method import java.util.Arrays; public class Main { public static void main(String[] args) { // Get the Arrays int intArr[] = { 10, 20, 15, 22, 35 }; int intKey = 22; Arrays.fill(intArr, intKey); // To fill the arrays System.out.println("Integer Array on filling: " + Arrays.toString(intArr)); }}OutputInteger Array on filling: [22, 22, 22, 22, 22] Example 13: hashCode(originalArray) Method Java// Java program to demonstrate// Arrays.hashCode() method import java.util.Arrays; public class Main { public static void main(String[] args) { // Get the Array int intArr[] = { 10, 20, 15, 22, 35 }; // To get the hashCode of the arrays System.out.println("Integer Array: " + Arrays.hashCode(intArr)); }}OutputInteger Array: 38475313 Example 14: mismatch(array1, array2) Method Java// Java program to demonstrate// Arrays.mismatch() method import java.util.Arrays; public class Main { public static void main(String[] args) { // Get the Arrays int intArr[] = { 10, 20, 15, 22, 35 }; // Get the second Arrays int intArr1[] = { 10, 15, 22 }; // To compare both arrays System.out.println("The element mismatched at index: " + Arrays.mismatch(intArr, intArr1)); }}OutputThe element mismatched at index: 1 Example 15: parallelSort(originalArray) MethodJava// Java program to demonstrate// Arrays.parallelSort() method // Importing Arrays class from// java.util packageimport java.util.Arrays; // Main classpublic class Main { public static void main(String[] args) { // Get the Array int intArr[] = { 10, 20, 15, 22, 35 }; // To sort the array using parallelSort Arrays.parallelSort(intArr); System.out.println("Integer Array: " + Arrays.toString(intArr)); }}OutputInteger Array: [10, 15, 20, 22, 35] Example 16: sort(originalArray) Method Java// Java program to demonstrate// Arrays.sort() method import java.util.Arrays; public class Main { public static void main(String[] args) { // Get the Array int intArr[] = { 10, 20, 15, 22, 35 }; // To sort the array using normal sort- Arrays.sort(intArr); System.out.println("Integer Array: " + Arrays.toString(intArr)); }}OutputInteger Array: [10, 15, 20, 22, 35] Example 17: sort(originalArray, fromIndex, endIndex) Method Java// Java program to demonstrate// Arrays.sort() method import java.util.Arrays; public class Main { public static void main(String[] args) { // Get the Array int intArr[] = { 10, 20, 15, 22, 35 }; // To sort the array using normal sort Arrays.sort(intArr, 1, 3); System.out.println("Integer Array: " + Arrays.toString(intArr)); }}OutputInteger Array: [10, 15, 20, 22, 35] Example 18: sort(T[] a, int fromIndex, int toIndex, Comparator< super T> c) Method Java// Java program to demonstrate working of Comparator// interfaceimport java.util.*;import java.lang.*;import java.io.*; // A class to represent a student.class Student { int rollno; String name, address; // Constructor public Student(int rollno, String name, String address) { this.rollno = rollno; this.name = name; this.address = address; } // Used to print student details in main() public String toString() { return this.rollno + " " + this.name + " " + this.address; }} class Sortbyroll implements Comparator<Student> { // Used for sorting in ascending order of // roll number public int compare(Student a, Student b) { return a.rollno - b.rollno; }} // Driver classclass Main { public static void main(String[] args) { Student[] arr = { new Student(111, "bbbb", "london"), new Student(131, "aaaa", "nyc"), new Student(121, "cccc", "jaipur") }; System.out.println("Unsorted"); for (int i = 0; i < arr.length; i++) System.out.println(arr[i]); Arrays.sort(arr, 1, 2, new Sortbyroll()); System.out.println("\nSorted by rollno"); for (int i = 0; i < arr.length; i++) System.out.println(arr[i]); }}OutputUnsorted 111 bbbb london 131 aaaa nyc 121 cccc jaipur Sorted by rollno 111 bbbb london 131 aaaa nyc 121 cccc jaipur Example 19: sort(T[] a, Comparator< super T> c) MethodJava// Java program to demonstrate working of Comparator// interfaceimport java.util.*;import java.lang.*;import java.io.*; // A class to represent a student.class Student { int rollno; String name, address; // Constructor public Student(int rollno, String name, String address) { this.rollno = rollno; this.name = name; this.address = address; } // Used to print student details in main() public String toString() { return this.rollno + " " + this.name + " " + this.address; }} class Sortbyroll implements Comparator<Student> { // Used for sorting in ascending order of // roll number public int compare(Student a, Student b) { return a.rollno - b.rollno; }} // Driver classclass Main { public static void main(String[] args) { Student[] arr = { new Student(111, "bbbb", "london"), new Student(131, "aaaa", "nyc"), new Student(121, "cccc", "jaipur") }; System.out.println("Unsorted"); for (int i = 0; i < arr.length; i++) System.out.println(arr[i]); Arrays.sort(arr, new Sortbyroll()); System.out.println("\nSorted by rollno"); for (int i = 0; i < arr.length; i++) System.out.println(arr[i]); }}OutputUnsorted 111 bbbb london 131 aaaa nyc 121 cccc jaipur Sorted by rollno 111 bbbb london 121 cccc jaipur 131 aaaa nyc Example 20: spliterator(originalArray) Method Java// Java program to demonstrate// Arrays.spliterator() method import java.util.Arrays; public class Main { public static void main(String[] args) { // Get the Array int intArr[] = { 10, 20, 15, 22, 35 }; // To sort the array using normal sort System.out.println("Integer Array: " + Arrays.spliterator(intArr)); }}OutputInteger Array: java.util.Spliterators$IntArraySpliterator@4e50df2e Example 21: spliterator(originalArray, fromIndex, endIndex) Method Java// Java program to demonstrate// Arrays.spliterator() method import java.util.Arrays; public class Main { public static void main(String[] args) { // Get the Array int intArr[] = { 10, 20, 15, 22, 35 }; // To sort the array using normal sort System.out.println("Integer Array: " + Arrays.spliterator(intArr, 1, 3)); }}OutputInteger Array: java.util.Spliterators$IntArraySpliterator@4e50df2e Example 22: stream(originalArray) MethodJava// Java program to demonstrate// Arrays.stream() method import java.util.Arrays; public class Main { public static void main(String[] args) { // Get the Array int intArr[] = { 10, 20, 15, 22, 35 }; // To get the Stream from the array System.out.println("Integer Array: " + Arrays.stream(intArr)); }}OutputInteger Array: java.util.stream.IntPipeline$Head@7291c18f Example 23: toString(originalArray) Method Java// Java program to demonstrate// Arrays.toString() method import java.util.Arrays; public class Main { public static void main(String[] args) { // Get the Array int intArr[] = { 10, 20, 15, 22, 35 }; // To print the elements in one line System.out.println("Integer Array: " + Arrays.toString(intArr)); }}OutputInteger Array: [10, 20, 15, 22, 35] This article is contributed by Rishabh Mahrsee. If you like GeeksforGeeks and would like to contribute, you can also write an article and mail your article to review-team@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.Please write comments if you find anything incorrect, or you want to share more information about the topic discussed aboveAttention reader! Don’t stop learning now. Get hold of all the important Java Foundation and Collections concepts with the Fundamentals of Java and Java Collections Course at a student-friendly price and become industry ready. To complete your preparation from learning a language to DS Algo and many more, please refer Complete Interview Preparation Course.My Personal Notes arrow_drop_upSave LikeNext Arrays in JavaRecommended ArticlesPage :Java.util.Arrays.parallelSetAll(), Arrays.setAll() in Java22, Aug 17Difference Between Arrays.toString() and Arrays.deepToString() in Java26, Jan 21Java.lang.Class class in Java | Set 130, Mar 17Java.lang.Class class in Java | Set 203, Apr 17Implement Pair Class with Unit Class in Java using JavaTuples20, Sep 18Implement Triplet Class with Pair Class in Java using JavaTuples20, Sep 18Implement Quintet Class with Quartet Class in Java using JavaTuples20, Sep 18Implement Quartet Class with Triplet Class in Java using JavaTuples20, Sep 18Implement Octet Class from Septet Class in Java using JavaTuples24, Sep 18Implement Ennead Class from Octet Class in Java using JavaTuples24, Sep 18Implement Sextet Class from Quintet Class in Java using JavaTuples24, Sep 18Implement Septet Class from Sextet Class in Java using JavaTuples24, Sep 18Implement Decade Class from Ennead Class in Java using JavaTuples24, Sep 18Difference between Abstract Class and Concrete Class in Java11, Jan 19In Java, Can we call the main() method of a class from another class?28, Nov 19Java Program to Check if a Given Class is a Local Inner Class16, Nov 20Java Program to Check if a Given Class is an Anonymous Class16, Nov 20Java Program to Check if a Given Class is an Inner Class14, Dec 20Using predefined class name as Class or Variable name in Java26, May 17Java.util.TimeZone Class (Set-2) | Example On TimeZone Class25, Apr 18Java Program to Illustrate the Availability of Default Constructor of the Super Class to the Sub Class by Default05, Dec 20Java.util.Arrays.deepEquals() in Java07, Aug 17Java.util.Arrays.parallelPrefix in Java 822, Aug 17Java.util.Arrays.equals() in Java with Examples03, Jun 17Article Contributed By :GeeksforGeeksVote for difficultyCurrent difficulty : EasyEasy Normal Medium Hard ExpertImproved By :RishabhPrabhuashutoshdubey133Article Tags :Java - util packageJava-ArraysJava-CollectionsJavaPractice Tags :JavaJava-CollectionsReport IssueWriting code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load CommentsWhat's NewJava Backend Development- LIVE ClassesView DetailsComplete Interview PreparationView DetailsSystem Design-Live Classes for Working ProfessionalsView DetailsMost popular in JavaObject Oriented Programming (OOPs) Concept in JavaArrayList in JavaHashMap in Java with ExamplesInitialize an ArrayList in JavaMultidimensional Arrays in JavaMore related articles in JavaHow to iterate any Map in JavaOverriding in JavaInterfaces in JavaLinkedList in JavaStack Class in Java× 5th Floor, A-118,Sector-136, Noida, Uttar Pradesh - 201305 feedback@geeksforgeeks.orgCompanyAbout UsCareersPrivacy PolicyContact UsCopyright PolicyLearnAlgorithmsData StructuresLanguagesCS SubjectsVideo TutorialsWeb DevelopmentWeb TutorialsHTMLCSSJavaScriptBootstrapContributeWrite an ArticleWrite Interview ExperienceInternshipsVideos@geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It ! Start Your Coding Journey Now!Login Register