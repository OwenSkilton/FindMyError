Difference Between Data Hiding and Abstraction in Java - GeeksforGeeksSkip to content TutorialsPractice DS & Algo.Must Do QuestionsDSA Topic-wiseDSA Company-wiseAlgorithmsAnalysis of AlgorithmsAsymptotic AnalysisWorst, Average and Best CasesAsymptotic NotationsLittle o and little omega notationsLower and Upper Bound TheoryAnalysis of LoopsSolving RecurrencesAmortized AnalysisWhat does 'Space Complexity' mean ?Pseudo-polynomial AlgorithmsPolynomial Time Approximation SchemeA Time Complexity QuestionSearching AlgorithmsSorting AlgorithmsGraph AlgorithmsPattern SearchingGeometric AlgorithmsMathematicalBitwise AlgorithmsRandomized AlgorithmsGreedy AlgorithmsDynamic ProgrammingDivide and ConquerBacktrackingBranch and BoundAll AlgorithmsData StructuresArraysLinked ListStackQueueBinary TreeBinary Search TreeHeapHashingGraphAdvanced Data StructureMatrixStringsAll Data StructuresInterview CornerCompany PreparationTop TopicsPractice Company QuestionsInterview ExperiencesExperienced InterviewsInternship InterviewsCompetititve ProgrammingDesign PatternsSystem Design TutorialMultiple Choice QuizzesLanguagesCC++JavaPythonC#JavaScriptjQuerySQLPHPScalaPerlGo LanguageHTMLCSSKotlinCS SubjectsMathematicsOperating SystemDBMSComputer NetworksComputer Organization and ArchitectureTheory of ComputationCompiler DesignDigital LogicSoftware EngineeringGATEGATE Computer Science NotesLast Minute NotesGATE CS Solved PapersGATE CS Original Papers and Official KeysGATE 2021 DatesGATE CS 2021 SyllabusImportant Topics for GATE CSWeb TechnologiesHTMLCSSJavaScriptAngularJSReactJSNodeJSBootstrapjQueryPHPSoftware DesignsSoftware Design PatternsSystem Design TutorialSchool LearningSchool ProgrammingMathematicsNumber SystemAlgebraTrigonometryStatisticsProbabilityGeometryMensurationCalculusMaths Notes (Class 8-12)Class 8 NotesClass 9 NotesClass 10 NotesClass 11 NotesClass 12 NotesNCERT SolutionsClass 8 Maths SolutionClass 9 Maths SolutionClass 10 Maths SolutionClass 11 Maths SolutionClass 12 Maths SolutionRD Sharma SolutionsClass 8 Maths SolutionClass 9 Maths SolutionClass 10 Maths SolutionClass 11 Maths SolutionClass 12 Maths SolutionPhysics Notes (Class 8-11)Class 8 NotesClass 9 NotesClass 10 NotesClass 11 NotesISRO CSISRO CS Solved PapersISRO CS Original Papers and Official KeysISRO CS Syllabus for Scientist/Engineer ExamUGC NET CSUGC NET CS Notes Paper IIUGC NET CS Notes Paper IIIUGC NET CS Solved PapersStudentCampus Ambassador ProgramSchool Ambassador ProgramProjectGeek of the MonthCampus Geek of the MonthPlacement CourseCompetititve ProgrammingTestimonialsGeek on the TopCareersInternshipJobsApply for JobsPost a JobCourses WriteCome write articles for us and get featuredPracticeLearn and code with the best industry expertsPremiumGet access to ad-free content, doubt assistance and more!JobsCome and find your dream job with usGeeks DigestQuizzesGeeks CampusGblog ArticlesIDECampus Mantri HomeSaved VideosCoursesGBlogPuzzlesWhat's New ? Change Language Data StructuresAlgorithmsInterview PreparationTopic-wise PracticeC++JavaPythonCompetitive ProgrammingMachine LearningWeb DevelopmentPuzzlesProject IdeasGFG School Related Articles ▲Related ArticlesArrays in JavaSplit() String method in Java with examplesArrays.sort() in Java with examplesFor-each loop in JavaReverse a string in JavaHow to iterate any Map in JavaObject Oriented Programming (OOPs) Concept in JavaHashMap in Java with ExamplesInitialize an ArrayList in JavaMultidimensional Arrays in JavaStack Class in JavaArrayList in JavaHow to add an element to an Array in Java?Overriding in JavaCollections.sort() in Java with ExamplesLinkedList in JavaSingleton Class in JavaQueue Interface In JavaInterfaces in JavaSet in JavaInheritance in JavaClasses and Objects in JavaCollections in JavaMath pow() method in Java with ExampleHow to determine length or size of an Array in Java?Difference Between == and .equals() Method in JavaCompare two Strings in JavaInitializing a List in JavaPolymorphism in JavaMultithreading in JavaTable of ContentsArrays in JavaSplit() String method in Java with examplesArrays.sort() in Java with examplesFor-each loop in JavaReverse a string in JavaHow to iterate any Map in JavaObject Oriented Programming (OOPs) Concept in JavaHashMap in Java with ExamplesInitialize an ArrayList in JavaMultidimensional Arrays in JavaStack Class in JavaArrayList in JavaHow to add an element to an Array in Java?Overriding in JavaCollections.sort() in Java with ExamplesLinkedList in JavaSingleton Class in JavaQueue Interface In JavaInterfaces in JavaSet in JavaInheritance in JavaClasses and Objects in JavaCollections in JavaMath pow() method in Java with ExampleHow to determine length or size of an Array in Java?Difference Between == and .equals() Method in JavaCompare two Strings in JavaInitializing a List in JavaPolymorphism in JavaMultithreading in JavaImprove Article Save Article Like Article Difference Between Data Hiding and Abstraction in JavaDifficulty Level : EasyLast Updated : 06 Jun, 2021Abstraction Is hiding the internal implementation and just highlight the set of services. It is achieved by using the abstract class and interfaces and further implementing the same. Only necessarily characteristics of an object that differentiates it from all other objects. Only the important details are emphasized and the rest all are suppressed from the user or reader.A real-life example of abstractionBy using ATM GUI screen bank people are highlighting the set of services what the bank is offering without highlighting internal implementation. Types of Abstraction: There are basically three types of abstractionProcedural AbstractionData AbstractionControl Abstraction1. Procedural Abstraction: From the word itself, there are a series of procedures in form of functions followed by one after another in sequence to attain abstraction through classes.2. Data Abstraction: From the word itself, abstraction is achieved from a set of data that is describing an object.3. Control Abstraction: Abstraction is achieved in writing the program in such a way where object details are enclosed.Advantages of Abstraction:Users or communities can achieve security as there are no highlights to internal implementation.The enhancement will become very easy because without affecting end users one is able to perform any type of changes in the internal systemIt provides more flexibility to end-user to use the system very easilyIt improves the richness of applicationImplementation of Abstraction: It is implemented as a class which only represents the important traits without including background detailing. Providing only the necessary details and hiding all its internal implementation. Below is the java implementation of abstraction: Java// Java program showing the working of abstraction // Importing generic librariesimport java.io.*; // Creating an abstract class// demonstrate abstractionabstract class Creature { // Just providing that creatures has legs // Hiding the number of legs abstract void No_Of_legs();} // A new child class is extending// the parent abstract class aboveclass Elephant extends Creature { // Implementation of the abstract method void No_Of_legs() { // Printing message of function in non abstract // child class System.out.println("It has four legs"); }} // Again a new child class is extended from parent// Human class to override function created aboveclass Human extends Creature { // Same function over-riden public void No_Of_legs() { // Message printed if this function is called or // Implementation of the abstract method System.out.println("It has two legs"); }} public class GFG { // Main driver method public static void main(String[] args) { // Creating human object showing the implementation Human ob = new Human(); ob.No_Of_legs(); // Creating object of above class in main Elephant ob1 = new Elephant(); // Calling the function in main by // creating object of above non abstract class ob1.No_Of_legs(); // Implementation of abstraction }} OutputIt has two legs It has four legs Now, jumping onto the second concept though both the concepts are used to achieve encapsulation somehow there is a sleek difference as shown below: Data Hiding is hiding internal data from outside users. The internal data should not go directly that is outside person/classes is not able to access internal data directly. It is achieved by using an access specifier- a private modifier. Note: The recommended modifier for data members is private. The main advantage of data hiding is security Sample for data hiding: class Account {private double account_balance;……..…….}Here account balance of each say employee is private to each other being working in the same organization. No body knows account balance of anybody. In java it is achieved by using a keyword ‘private’ keyword and the process is called data hiding.It is used as security such that no internal data will be accessed without authentication. An unauthorized end user will not get access to internal data. Programmatically we can implement data hiding by declaring data elements as private. Now to access this data or for modification, we have a special method known as getter setter respectively. Getter is used to accessing the private data and setter is used to modify the private data only after authentication.In simple terms, it is hiding internal data from outside users. It is used as security such that no internal data will be accessed without authentication. An unauthorized end user will not get access to internal data. Programmatically we can implement data hiding by declaring data elements as private. Now to access this data or for modification, we have a special method known as getter setter respectively. Concept involved in data Hiding: Getter and setter Getter is used to accessing the private data and setter is used to modify the private data only after authentication. In simple terms, it is hiding internal data from outside users. It is used as security such that no internal data will be accessed without authentication. An unauthorized end user will not get access to internal data. Programmatically we can implement data hiding by declaring data elements as private. Now to access this data or for modification, we have a special method known as getter setter respectively. Getter is used to accessing the private data and setter is used to modify the private data only after authentication. In simple terms, it is hiding internal data from outside users. It is used as security such that no internal data will be accessed without authentication. An unauthorized end user will not get access to internal data. Programmatically we can implement data hiding by declaring data elements as private. Now to access this data or for modification, we have a special method known as getter setter respectively. Getter is used to accessing the private data and setter is used to modify the private data only after authentication. Implementation of Data Hiding: Java// Java Program showing working of data hiding // Importing generic librariesimport java.io.*; // Class created named Bankclass Bank { // Private data (data hiding) private long CurBalance = 0; // Bank_id is checked for authentication long bank_id; String name; // Getter function to modify private data public long get_balance(long Id) { // Checking whether the user is // authorised or unauthorised // Comparing bank_id of user and the give Id // then only it will get access if (this.bank_id == Id) { // Return current balance return CurBalance; } // Unauthorised user return -1; } // Setter function public void set_balance(long balance, long Id) { // Comparing bank_id of user and the give Id // then only it will get access if (this.bank_id == Id) { // Update balance in current ID CurBalance = CurBalance + balance; } }} // Another class created- Employeepublic class Emp { public static void main(String[] args) { // Creating employee object of bank type Bank _emp = new Bank(); // Assigning employee object values _emp.bank_id = 12345; _emp.name = "Roshan"; // _emp.get_balance(123456) _emp.set_balance(10000, 12345); // This will no get access as bank_id is given wrong // so // unauthorised user is not getting access that is // data hiding long emp_balance = _emp.get_balance(12345); // As this time it is valid user it will get access // Display commands System.out.println("User Name" + " " + _emp.name); System.out.println("Bank_ID" + " " + _emp.bank_id); System.out.println("Current Balance" + " " + emp_balance); }} Output: User Name Roshan Bank_ID 12345 Current Balance 10000 Attention reader! Don’t stop learning now. Get hold of all the important Java Foundation and Collections concepts with the Fundamentals of Java and Java Collections Course at a student-friendly price and become industry ready. To complete your preparation from learning a language to DS Algo and many more, please refer Complete Interview Preparation Course.My Personal Notes arrow_drop_upSave LikePrevioussklearn.cross_decomposition.PLSRegression() function in PythonNext Biopython - Sequence File FormatsRecommended ArticlesPage :Difference between Abstraction and Encapsulation in Java with Examples08, Nov 19Instance Variable Hiding in Java10, Apr 16Abstraction by Parameterization and Specification in Java31, Oct 20Abstraction in Java14, Nov 17Control Abstraction in Java with Examples03, Mar 21Understanding OOPs and Abstraction using Real World Scenario19, May 20Understanding Encapsulation, Inheritance, Polymorphism, Abstraction in OOPs20, Jun 20Difference Between java.sql.Time, java.sql.Timestamp and java.sql.Date in Java07, Apr 21Primitive data type vs. Object data type in Java with Examples28, Feb 20Difference between Core Java and Advanced Java31, Dec 19Difference between a Java Application and a Java Applet27, Feb 20Difference between Java IO and Java NIO21, May 20Difference between Java and Core Java30, Jun 20Java Program For Arithmetic Operations Between BigDecimal and Primitive Data Types07, Mar 21Difference and similarities between HashSet, LinkedHashSet and TreeSet in Java02, Jan 19Similarities and Difference between Java and C++29, Jun 20Spring Data JPA - Insert Data in MySQL Table24, Dec 21Difference between x++ and x=x+1 in Java15, Sep 17Difference between super() and this() in java02, Oct 17Difference between Simple and Compound Assignment in Java22, Oct 17Difference between Traditional Collections and Concurrent Collections in java08, Jan 18Difference between Stream.of() and Arrays.stream() method in Java09, Oct 18Difference between an Integer and int in Java with Examples10, Sep 18Java Collection| Difference between Synchronized ArrayList and CopyOnWriteArrayList14, Sep 18Article Contributed By :techwithintechtofar@techwithintechtofarVote for difficultyCurrent difficulty : EasyEasy Normal Medium Hard ExpertImproved By :simranarora5sosArticle Tags :Java-Object OrientedJavaPractice Tags :JavaReport IssueWriting code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load CommentsWhat's NewJava Backend Development- LIVE ClassesView DetailsJava FoundationView DetailsComplete Interview PreparationView DetailsMost popular in JavaJava Programming ExamplesStream In JavaStrings in JavaIntroduction to JavaSystem.out.println in JavaMore related articles in JavaScanner Class in JavaDifferent ways of Reading a text file in JavaComparator Interface in Java with ExamplesStringBuilder Class in Java with ExamplesFunctional Interfaces in Java× 5th Floor, A-118,Sector-136, Noida, Uttar Pradesh - 201305 feedback@geeksforgeeks.orgCompanyAbout UsCareersPrivacy PolicyContact UsCopyright PolicyLearnAlgorithmsData StructuresLanguagesCS SubjectsVideo TutorialsWeb DevelopmentWeb TutorialsHTMLCSSJavaScriptBootstrapContributeWrite an ArticleWrite Interview ExperienceInternshipsVideos@geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It ! Start Your Coding Journey Now!Login Register