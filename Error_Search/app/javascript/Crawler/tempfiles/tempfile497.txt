Array Copy in Java - GeeksforGeeksSkip to content TutorialsPractice DS & Algo.Must Do QuestionsDSA Topic-wiseDSA Company-wiseAlgorithmsAnalysis of AlgorithmsAsymptotic AnalysisWorst, Average and Best CasesAsymptotic NotationsLittle o and little omega notationsLower and Upper Bound TheoryAnalysis of LoopsSolving RecurrencesAmortized AnalysisWhat does 'Space Complexity' mean ?Pseudo-polynomial AlgorithmsPolynomial Time Approximation SchemeA Time Complexity QuestionSearching AlgorithmsSorting AlgorithmsGraph AlgorithmsPattern SearchingGeometric AlgorithmsMathematicalBitwise AlgorithmsRandomized AlgorithmsGreedy AlgorithmsDynamic ProgrammingDivide and ConquerBacktrackingBranch and BoundAll AlgorithmsData StructuresArraysLinked ListStackQueueBinary TreeBinary Search TreeHeapHashingGraphAdvanced Data StructureMatrixStringsAll Data StructuresInterview CornerCompany PreparationTop TopicsPractice Company QuestionsInterview ExperiencesExperienced InterviewsInternship InterviewsCompetititve ProgrammingDesign PatternsSystem Design TutorialMultiple Choice QuizzesLanguagesCC++JavaPythonC#JavaScriptjQuerySQLPHPScalaPerlGo LanguageHTMLCSSKotlinCS SubjectsMathematicsOperating SystemDBMSComputer NetworksComputer Organization and ArchitectureTheory of ComputationCompiler DesignDigital LogicSoftware EngineeringGATEGATE Computer Science NotesLast Minute NotesGATE CS Solved PapersGATE CS Original Papers and Official KeysGATE 2021 DatesGATE CS 2021 SyllabusImportant Topics for GATE CSWeb TechnologiesHTMLCSSJavaScriptAngularJSReactJSNodeJSBootstrapjQueryPHPSoftware DesignsSoftware Design PatternsSystem Design TutorialSchool LearningSchool ProgrammingMathematicsNumber SystemAlgebraTrigonometryStatisticsProbabilityGeometryMensurationCalculusMaths Notes (Class 8-12)Class 8 NotesClass 9 NotesClass 10 NotesClass 11 NotesClass 12 NotesNCERT SolutionsClass 8 Maths SolutionClass 9 Maths SolutionClass 10 Maths SolutionClass 11 Maths SolutionClass 12 Maths SolutionRD Sharma SolutionsClass 8 Maths SolutionClass 9 Maths SolutionClass 10 Maths SolutionClass 11 Maths SolutionClass 12 Maths SolutionPhysics Notes (Class 8-11)Class 8 NotesClass 9 NotesClass 10 NotesClass 11 NotesISRO CSISRO CS Solved PapersISRO CS Original Papers and Official KeysISRO CS Syllabus for Scientist/Engineer ExamUGC NET CSUGC NET CS Notes Paper IIUGC NET CS Notes Paper IIIUGC NET CS Solved PapersStudentCampus Ambassador ProgramSchool Ambassador ProgramProjectGeek of the MonthCampus Geek of the MonthPlacement CourseCompetititve ProgrammingTestimonialsGeek on the TopCareersInternshipJobsApply for JobsPost a JobCourses WriteCome write articles for us and get featuredPracticeLearn and code with the best industry expertsPremiumGet access to ad-free content, doubt assistance and more!JobsCome and find your dream job with usGeeks DigestQuizzesGeeks CampusGblog ArticlesIDECampus Mantri HomeSaved VideosCoursesGBlogPuzzlesWhat's New ? Change Language Data StructuresAlgorithmsInterview PreparationTopic-wise PracticeC++JavaPythonCompetitive ProgrammingMachine LearningWeb DevelopmentPuzzlesProject IdeasGFG School Related Articles ▲Related ArticlesBasicsJava Programming LanguageIntroduction to JavaSetting up the environment in JavaJava Basic SyntaxJava Hello World ProgramCommand Line arguments in JavaHow JVM Works – JVM Architecture?Differences between JDK, JRE and JVMJava IdentifiersData types in JavaVariables in JavaComments in JavaOperators in JavaWays to read input from console in JavaFlow ControlDecision Making in Java (if, if-else, switch, break, continue, jump)Loops in JavaJava For loop with ExamplesFor-each loop in JavaJava while loop with ExamplesSwitch Statement in JavaContinue Statement in JavaBreak statement in JavaStringsStrings in JavaString class in Java | Set 1StringBuffer class in JavaStringBuilder Class in Java with ExamplesArraysArrays in JavaMultidimensional Arrays in JavaJagged Array in JavaArray Copy in JavaHow to convert an Array to String in Java?How to compare two arrays in Java?MethodsMethods in JavaParameter Passing Techniques in Java with ExamplesReturning Multiple values in JavaDifferent ways of Method Overloading in JavaScope of Variables In JavaConstructorsConstructors in JavaCopy Constructor in JavaConstructor Overloading in JavaConstructor Chaining In Java with ExamplesPrivate Constructors and Singleton Classes in JavaOOP ConceptsClasses and Objects in JavaInheritance in JavaEncapsulation in JavaPolymorphism in JavaAbstraction in JavaOverriding in JavaOverloading in JavaException HandlingExceptions in JavaTypes of Exception in Java with ExamplesChecked vs Unchecked Exceptions in Javathrow and throws in JavaUser-defined Custom Exception in JavaInterfaces & Abstract ClassesInterfaces in JavaNested Interface in JavaMarker interface in JavaAbstract Classes in JavaDifference between Abstract Class and Interface in JavaFunctional Interfaces in JavaComparator Interface in Java with ExamplesCollectionsCollections in JavaCollections Class in JavaCollection vs Collections in Java with ExampleJava | Implementing Iterator and Iterable InterfaceList Interface in Java with ExamplesArrayList in JavaVector Class in JavaStack Class in JavaLinkedList in JavaQueue Interface In JavaPriorityQueue in JavaDeque interface in Java with ExampleArrayDeque in JavaSet in JavaHashSet in JavaLinkedHashSet in Java with ExamplesSortedSet Interface in Java with ExamplesNavigableSet in Java with ExamplesTreeSet in JavaMap Interface in JavaHashMap in Java with ExamplesHashtable in JavaLinkedHashMap in JavaSortedMap Interface in Java with ExamplesTreeMap in JavaMultithreadingMultithreading in JavaLifecycle and States of a Thread in JavaMain thread in JavaJava Thread Priority in MultithreadingSynchronization in JavaFile HandlingFile Handling in Java with CRUD operationsJava.io.InputStream Class in JavaJava.io.OutputStream class in JavaJava.io.File Class in JavaFile Permissions in JavaCopying file using FileStreams in JavaDelete a file using JavaTable of ContentsBasicsJava Programming LanguageIntroduction to JavaSetting up the environment in JavaJava Basic SyntaxJava Hello World ProgramCommand Line arguments in JavaHow JVM Works – JVM Architecture?Differences between JDK, JRE and JVMJava IdentifiersData types in JavaVariables in JavaComments in JavaOperators in JavaWays to read input from console in JavaFlow ControlDecision Making in Java (if, if-else, switch, break, continue, jump)Loops in JavaJava For loop with ExamplesFor-each loop in JavaJava while loop with ExamplesSwitch Statement in JavaContinue Statement in JavaBreak statement in JavaStringsStrings in JavaString class in Java | Set 1StringBuffer class in JavaStringBuilder Class in Java with ExamplesArraysArrays in JavaMultidimensional Arrays in JavaJagged Array in JavaArray Copy in JavaHow to convert an Array to String in Java?How to compare two arrays in Java?MethodsMethods in JavaParameter Passing Techniques in Java with ExamplesReturning Multiple values in JavaDifferent ways of Method Overloading in JavaScope of Variables In JavaConstructorsConstructors in JavaCopy Constructor in JavaConstructor Overloading in JavaConstructor Chaining In Java with ExamplesPrivate Constructors and Singleton Classes in JavaOOP ConceptsClasses and Objects in JavaInheritance in JavaEncapsulation in JavaPolymorphism in JavaAbstraction in JavaOverriding in JavaOverloading in JavaException HandlingExceptions in JavaTypes of Exception in Java with ExamplesChecked vs Unchecked Exceptions in Javathrow and throws in JavaUser-defined Custom Exception in JavaInterfaces & Abstract ClassesInterfaces in JavaNested Interface in JavaMarker interface in JavaAbstract Classes in JavaDifference between Abstract Class and Interface in JavaFunctional Interfaces in JavaComparator Interface in Java with ExamplesCollectionsCollections in JavaCollections Class in JavaCollection vs Collections in Java with ExampleJava | Implementing Iterator and Iterable InterfaceList Interface in Java with ExamplesArrayList in JavaVector Class in JavaStack Class in JavaLinkedList in JavaQueue Interface In JavaPriorityQueue in JavaDeque interface in Java with ExampleArrayDeque in JavaSet in JavaHashSet in JavaLinkedHashSet in Java with ExamplesSortedSet Interface in Java with ExamplesNavigableSet in Java with ExamplesTreeSet in JavaMap Interface in JavaHashMap in Java with ExamplesHashtable in JavaLinkedHashMap in JavaSortedMap Interface in Java with ExamplesTreeMap in JavaMultithreadingMultithreading in JavaLifecycle and States of a Thread in JavaMain thread in JavaJava Thread Priority in MultithreadingSynchronization in JavaFile HandlingFile Handling in Java with CRUD operationsJava.io.InputStream Class in JavaJava.io.OutputStream class in JavaJava.io.File Class in JavaFile Permissions in JavaCopying file using FileStreams in JavaDelete a file using JavaImprove Article Save Article Like Article Array Copy in JavaDifficulty Level : EasyLast Updated : 26 Oct, 2021Given an array, we need to copy its elements in a different array, to a naive user below way comes into mind which is however incorrect as depicted below as follows:// Java Program to Illustrate Wrong Way Of Copying an Array // Input array int a[] = { 1, 8, 3 }; // Creating an array b[] of same size as a[] int b[] = new int[a.length]; // Doesn't copy elements of a[] to b[], only makes // b refer to same location b = a;Output: Output Explanation: When we do “b = a”, we are actually assigning a reference to the array. Hence, if we make any change to one array, it would be reflected in other arrays as well because both a and b refer to the same location. We can also verify it with code as shown below as follows:Example:Java// A Java program to demonstrate that simply// assigning one array reference is incorrectpublic class Test { public static void main(String[] args) { int a[] = { 1, 8, 3 }; // Create an array b[] of same size as a[] int b[] = new int[a.length]; // Doesn't copy elements of a[] to b[], // only makes b refer to same location b = a; // Change to b[] will also reflect in a[] // as 'a' and 'b' refer to same location. b[0]++; System.out.println("Contents of a[] "); for (int i = 0; i < a.length; i++) System.out.print(a[i] + " "); System.out.println("\n\nContents of b[] "); for (int i = 0; i < b.length; i++) System.out.print(b[i] + " "); }}OutputContents of a[] 2 8 3 Contents of b[] 2 8 3 Methods:We have seen internal working while copying elements and edge cases to be taken into consideration after getting through errors as generated above, so now we can propose out correct ways to copy array as listed below as follows:Iterating each element of the given original array and copy one element at a timeUsing clone() methodUsing arraycopy() methodUsing copyOf() method of Arrays classUsing copyOfRange() method of Arrays classMethod 1: Iterating each element of the given original array and copy one element at a time. With the usage of this method, it guarantees that any modifications to b, will not alter the original array a, as shown in below example as follows:Example:Java// Java program to demonstrate copying by// one by one assigning elements between arrays // Main classpublic class GFG { // Main driver method public static void main(String[] args) { // Input array a[] int a[] = { 1, 8, 3 }; // Create an array b[] of same size as a[] int b[] = new int[a.length]; // Copying elements of a[] to b[] for (int i = 0; i < a.length; i++) b[i] = a[i]; // Changing b[] to verify that // b[] is different from a[] b[0]++; // Display message only System.out.println("Contents of a[] "); for (int i = 0; i < a.length; i++) System.out.print(a[i] + " "); // Display message only System.out.println("\n\nContents of b[] "); for (int i = 0; i < b.length; i++) System.out.print(b[i] + " "); }}OutputContents of a[] 1 8 3 Contents of b[] 2 8 3 Method 2: Using Clone() method In the previous method we had to iterate over the entire array to make a copy, can we do better? Yes, we can use the clone method in Java. Example:Java// Java program to demonstrate Copying of Array// using clone() method // Main classpublic class GFG { // Main driver method public static void main(String[] args) { // Input array a[] int a[] = { 1, 8, 3 }; // Copying elements of a[] to b[] int b[] = a.clone(); // Changing b[] to verify that // b[] is different from a[] b[0]++; // Display message for better readability System.out.println("Contents of a[] "); for (int i = 0; i < a.length; i++) System.out.print(a[i] + " "); // Display message for better readability System.out.println("\n\nContents of b[] "); for (int i = 0; i < b.length; i++) System.out.print(b[i] + " "); }}OutputContents of a[] 1 8 3 Contents of b[] 2 8 3 Method 3: Using arraycopy() methodWe can also use System.arraycopy() Method. The system is present in java.lang package. Its signature is as : public static void arraycopy(Object src, int srcPos, Object dest, int destPos, int length)Parameters:src denotes the source array.srcPos is the index from which copying starts.dest denotes the destination arraydestPos is the index from which the copied elements are placed in the destination array.length is the length of the subarray to be copied.Example:Java// Java program to demonstrate array// copy using System.arraycopy() // Main classpublic class GFG { // Main driver method public static void main(String[] args) { // Custom input array int a[] = { 1, 8, 3 }; // Creating an array b[] of same size as a[] int b[] = new int[a.length]; // Copying elements of a[] to b[] System.arraycopy(a, 0, b, 0, 3); // Changing b[] to verify that // b[] is different from a[] b[0]++; // Display message only System.out.println("Contents of a[] "); for (int i = 0; i < a.length; i++) System.out.print(a[i] + " "); // Display message only System.out.println("\n\nContents of b[] "); for (int i = 0; i < b.length; i++) System.out.print(b[i] + " "); }}OutputContents of a[] 1 8 3 Contents of b[] 2 8 3 Method 4: Using copyOf() method of Arrays class If we want to copy the first few elements of an array or a full copy of the array, you can use this method.Syntax: public static int[] copyOf​(int[] original, int newLength) Parameters:Original arrayLength of the array to get copied.Example:Java// Java program to demonstrate array// copy using Arrays.copyOf() // Importing Arrays class from utility classimport java.util.Arrays; // Main classclass GFG { // Main driver method public static void main(String[] args) { // Custom input array int a[] = { 1, 8, 3 }; // Create an array b[] of same size as a[] // Copy elements of a[] to b[] int b[] = Arrays.copyOf(a, 3); // Change b[] to verify that // b[] is different from a[] b[0]++; System.out.println("Contents of a[] "); // Iterating over array. a[] for (int i = 0; i < a.length; i++) System.out.print(a[i] + " "); System.out.println("\n\nContents of b[] "); // Iterating over array b[] for (int i = 0; i < b.length; i++) System.out.print(b[i] + " "); }}OutputContents of a[] 1 8 3 Contents of b[] 2 8 3 Method 5: Using copyOfRange() method of Arrays classThis method copies the specified range of the specified array into a new array.public static int[] copyOfRange​(int[] original, int from, int to)Parameters:Original array from which a range is to be copiedInitial index of the range to be copiedFinal index of the range to be copied, exclusiveExample:Java// Java program to demonstrate array// copy using Arrays.copyOfRange() // Importing Arrays class from utility packageimport java.util.Arrays; // Main classclass GFG { // Main driver method public static void main(String[] args) { // Custom input array int a[] = { 1, 8, 3, 5, 9, 10 }; // Creating an array b[] and // copying elements of a[] to b[] int b[] = Arrays.copyOfRange(a, 2, 6); // Changing b[] to verify that // b[] is different from a[] // Iterating over array a[] System.out.println("Contents of a[] "); for (int i = 0; i < a.length; i++) System.out.print(a[i] + " "); // Iterating over array b[] System.out.println("\n\nContents of b[] "); for (int i = 0; i < b.length; i++) System.out.print(b[i] + " "); }}OutputContents of a[] 1 8 3 5 9 10 Contents of b[] 3 5 9 10 Lastly, let us do discuss the overview of the above methods: Simply assigning references is wrongThe array can be copied by iterating over an array, and one by one assigning elements.We can avoid iteration over elements using clone() or System.arraycopy()clone() creates a new array of the same size, but System.arraycopy() can be used to copy from a source range to a destination range.System.arraycopy() is faster than clone() as it uses Java Native InterfaceIf you want to copy the first few elements of an array or a full copy of an array, you can use Arrays.copyOf() method.Arrays.copyOfRange() is used to copy a specified range of an array. If the starting index is not 0, you can use this method to copy a partial array.This article is contributed by Ashutosh Kumar. Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.My Personal Notes arrow_drop_upSave LikePreviousJagged Array in JavaNext How to convert an Array to String in Java?Recommended ArticlesPage :Copy Elements of One Java Vector to Another Vector in Java18, Jan 21Copy Constructor in Java22, Nov 11Collections copy() method in Java with Examples08, Oct 18Different Ways to Copy Content From One File to Another File in Java23, Oct 20Java Program to Copy and Paste an image in OpenCV13, Dec 20How to Copy and Add all List Elements to an Empty ArrayList in Java?03, Dec 20Java Program to Copy Elements of ArrayList to Vector05, Jan 21Java Program to Copy the Map Content to Another Hashtable28, Dec 20How to Copy Map Content to Another Hashtable in Java?05, Jan 21Copy Elements of One ArrayList to Another ArrayList in Java17, Jan 21Files copy() Method in Java with Examples25, Mar 21Different Ways to Copy Files in Java25, Mar 21Using Semaphore to Protect More than One Copy of a Resource in Java11, May 21Copy Elements of Vector to Java ArrayList23, Mar 21How to Copy or Append HashSet to Another HashSet in Java?13, Dec 20Deep, Shallow and Lazy Copy with Java Examples23, Aug 17How to Copy One HashMap to Another HashMap in Java?14, Dec 20Difference Between java.sql.Time, java.sql.Timestamp and java.sql.Date in Java07, Apr 21How to Convert java.sql.Date to java.util.Date in Java?02, Feb 21Different Ways to Convert java.util.Date to java.time.LocalDate in Java05, Jan 21How to Convert java.util.Date to java.sql.Date in Java?23, Mar 21Sort an Array and Insert an Element Inside Array in Java18, Oct 20Java Program to Check Array Bounds while Inputing Elements into the Array10, Nov 20Remove One Array From Another Array in Java27, Jan 21Article Contributed By :GeeksforGeeksVote for difficultyCurrent difficulty : EasyEasy Normal Medium Hard ExpertImproved By :se_prashantsolankimayankadnanirshad158Article Tags :Java-ArraysJavaPractice Tags :JavaReport IssueWriting code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load CommentsWhat's NewJava Backend Development- LIVE ClassesView DetailsComplete Interview PreparationView DetailsSystem Design-Live Classes for Working ProfessionalsView DetailsMost popular in JavaObject Oriented Programming (OOPs) Concept in JavaSplit() String method in Java with examplesArrays.sort() in Java with examplesReverse a string in JavaHow to iterate any Map in JavaMore related articles in JavaInitialize an ArrayList in JavaStream In JavaSingleton Class in JavaHow to add an element to an Array in Java?Initializing a List in Java× 5th Floor, A-118,Sector-136, Noida, Uttar Pradesh - 201305 feedback@geeksforgeeks.orgCompanyAbout UsCareersPrivacy PolicyContact UsCopyright PolicyLearnAlgorithmsData StructuresLanguagesCS SubjectsVideo TutorialsWeb DevelopmentWeb TutorialsHTMLCSSJavaScriptBootstrapContributeWrite an ArticleWrite Interview ExperienceInternshipsVideos@geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It ! Start Your Coding Journey Now!Login Register