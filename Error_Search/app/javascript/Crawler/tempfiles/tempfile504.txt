Interview Questions for Java Professionals - GeeksforGeeksSkip to content TutorialsPractice DS & Algo.Must Do QuestionsDSA Topic-wiseDSA Company-wiseAlgorithmsAnalysis of AlgorithmsAsymptotic AnalysisWorst, Average and Best CasesAsymptotic NotationsLittle o and little omega notationsLower and Upper Bound TheoryAnalysis of LoopsSolving RecurrencesAmortized AnalysisWhat does 'Space Complexity' mean ?Pseudo-polynomial AlgorithmsPolynomial Time Approximation SchemeA Time Complexity QuestionSearching AlgorithmsSorting AlgorithmsGraph AlgorithmsPattern SearchingGeometric AlgorithmsMathematicalBitwise AlgorithmsRandomized AlgorithmsGreedy AlgorithmsDynamic ProgrammingDivide and ConquerBacktrackingBranch and BoundAll AlgorithmsData StructuresArraysLinked ListStackQueueBinary TreeBinary Search TreeHeapHashingGraphAdvanced Data StructureMatrixStringsAll Data StructuresInterview CornerCompany PreparationTop TopicsPractice Company QuestionsInterview ExperiencesExperienced InterviewsInternship InterviewsCompetititve ProgrammingDesign PatternsSystem Design TutorialMultiple Choice QuizzesLanguagesCC++JavaPythonC#JavaScriptjQuerySQLPHPScalaPerlGo LanguageHTMLCSSKotlinCS SubjectsMathematicsOperating SystemDBMSComputer NetworksComputer Organization and ArchitectureTheory of ComputationCompiler DesignDigital LogicSoftware EngineeringGATEGATE Computer Science NotesLast Minute NotesGATE CS Solved PapersGATE CS Original Papers and Official KeysGATE 2021 DatesGATE CS 2021 SyllabusImportant Topics for GATE CSWeb TechnologiesHTMLCSSJavaScriptAngularJSReactJSNodeJSBootstrapjQueryPHPSoftware DesignsSoftware Design PatternsSystem Design TutorialSchool LearningSchool ProgrammingMathematicsNumber SystemAlgebraTrigonometryStatisticsProbabilityGeometryMensurationCalculusMaths Notes (Class 8-12)Class 8 NotesClass 9 NotesClass 10 NotesClass 11 NotesClass 12 NotesNCERT SolutionsClass 8 Maths SolutionClass 9 Maths SolutionClass 10 Maths SolutionClass 11 Maths SolutionClass 12 Maths SolutionRD Sharma SolutionsClass 8 Maths SolutionClass 9 Maths SolutionClass 10 Maths SolutionClass 11 Maths SolutionClass 12 Maths SolutionPhysics Notes (Class 8-11)Class 8 NotesClass 9 NotesClass 10 NotesClass 11 NotesISRO CSISRO CS Solved PapersISRO CS Original Papers and Official KeysISRO CS Syllabus for Scientist/Engineer ExamUGC NET CSUGC NET CS Notes Paper IIUGC NET CS Notes Paper IIIUGC NET CS Solved PapersStudentCampus Ambassador ProgramSchool Ambassador ProgramProjectGeek of the MonthCampus Geek of the MonthPlacement CourseCompetititve ProgrammingTestimonialsGeek on the TopCareersInternshipJobsApply for JobsPost a JobCourses WriteCome write articles for us and get featuredPracticeLearn and code with the best industry expertsPremiumGet access to ad-free content, doubt assistance and more!JobsCome and find your dream job with usGeeks DigestQuizzesGeeks CampusGblog ArticlesIDECampus Mantri HomeSaved VideosCoursesGBlogPuzzlesWhat's New ? Change Language Data StructuresAlgorithmsInterview PreparationTopic-wise PracticeC++JavaPythonCompetitive ProgrammingMachine LearningWeb DevelopmentPuzzlesProject IdeasGFG School Related Articles ▲Related ArticlesCommonly Asked Java Programming Interview Questions | Set 2Commonly Asked Java Programming Interview Questions | Set 1Interview Questions for Java ProfessionalsDifferent ways to create objects in JavaHow to swap or exchange objects in Java?Inheritance in JavaEncapsulation in JavaAbstraction in JavaDynamic Method Dispatch or Runtime Polymorphism in JavaAssociation, Composition and Aggregation in JavaAccess and Non Access Modifiers in JavaAccess Modifiers in Java‘this’ reference in JavaOverloading in JavaOverriding in JavaObject Oriented Programming (OOPs) Concept in JavaPolymorphism in JavaDifference between Compile-time and Run-time Polymorphism in JavaFunction Overloading vs Function Overriding in C++Function Overloading in C++Functions that cannot be overloaded in C++Function overloading and const keywordFunction Overloading and Return Type in C++Arrays in JavaSplit() String method in Java with examplesArrays.sort() in Java with examplesFor-each loop in JavaReverse a string in JavaHow to iterate any Map in JavaTable of ContentsCommonly Asked Java Programming Interview Questions | Set 2Commonly Asked Java Programming Interview Questions | Set 1Interview Questions for Java ProfessionalsDifferent ways to create objects in JavaHow to swap or exchange objects in Java?Inheritance in JavaEncapsulation in JavaAbstraction in JavaDynamic Method Dispatch or Runtime Polymorphism in JavaAssociation, Composition and Aggregation in JavaAccess and Non Access Modifiers in JavaAccess Modifiers in Java‘this’ reference in JavaOverloading in JavaOverriding in JavaObject Oriented Programming (OOPs) Concept in JavaPolymorphism in JavaDifference between Compile-time and Run-time Polymorphism in JavaFunction Overloading vs Function Overriding in C++Function Overloading in C++Functions that cannot be overloaded in C++Function overloading and const keywordFunction Overloading and Return Type in C++Arrays in JavaSplit() String method in Java with examplesArrays.sort() in Java with examplesFor-each loop in JavaReverse a string in JavaHow to iterate any Map in JavaImprove Article Save Article Like Article Interview Questions for Java ProfessionalsDifficulty Level : EasyLast Updated : 20 May, 2021Q1. Explain JVM, JRE and JDK? JVM (Java Virtual Machine): JVM(Java Virtual Machine) acts as a run-time engine to run Java applications. JVM is the one that actually calls the main method present in a Java code. JVM is a part of JRE(Java Runtime Environment).JRE (Java Runtime Environment): JRE refers to a runtime environment in which Java bytecode can be executed. It implements the JVM (Java Virtual Machine) and provides all the class libraries and other support files that JVM uses at runtime. So JRE is a software package that contains what is required to run a Java program. Basically, it’s an implementation of the JVM which physically exists. JDK(Java Development Kit): It is the tool necessary to compile, document and package Java programs. The JDK completely includes JRE which contains tools for Java programmers. The Java Development Kit is provided free of charge. Along with JRE, it includes an interpreter/loader, a compiler (javac), an archiver (jar), a documentation generator (javadoc) and other tools needed in Java development. In short, it contains JRE + development tools.Q2. Explain public static void main(String args[]). Public: Public is an access modifier. Public means that this Method will be accessible by any Class. static : It is a keyword in java which identifies it is class-based i.e it can be accessed without creating the instance of a Class. Since we want the main method to be executed without any instance also, we use static. Void: It is the return type of the method. Void defines the method which will not return any value. main: This is the first method executed by JVM. The signature of the method must be the same.Q3. Why Java is platform independent? Platform independent practically means “write once run anywhere”. Java is called so because of its byte codes which can run on any system irrespective of its underlying operating system.Q4. Why is Java not pure Object-oriented? Java is not considered pure Object-oriented because it supports primitive data-types such as boolean, byte, char, int, float, double, long, short.Q5. Define class and object. Explain them with an example using java. Class: A class is a user-defined blueprint or prototype from which objects are created. It represents the set of properties or methods that are common to all objects of one type. In general, class declarations can include these components, in order:Superclass(if any): The name of the class’s parent (superclass), if any, preceded by the keyword extends. A class can only extend (subclass) one parent.Interfaces: A comma-separated list of interfaces implemented by the class, if any, preceded by the keyword implements. A class can implement more than one interface.Object: It is a basic unit of Object Oriented Programming and represents the real-life entities. A typical Java program creates many objects, which as you know, interact by invoking methods. An object consists of :State : It is represented by attributes of an object. It also reflects the properties of an object.Behavior : It is represented by methods of an object. It also reflects the response of an object with other objects.Identity : It gives a unique name to an object and enables one object to interact with other objects. For Example: Employee is an example of a class A specific employee with unique identification is an example of an object. class Employee { // instance variables declaration // Methods definition }An object of employee is a specific employeeEmployee empObj = new Employee();One of the objects of Employee is referred by ‘empObj’ Q6.What is a method? Provide several signatures of the methods A Java method is a set of statements to perform a task. A method is placed in a class. Signatures of methods: The name of the method, return type and the number of parameters comprise the method signature. A method can have the following elements in its signature: – Access specifier – public, private, protected, etc. (Not mandatory) – Access modifier – static, synchronized, etc. (Not mandatory) – Return type – void, int, String, etc. (Mandatory) – Method name – show() (Mandatory) – With or without parameters – (int number, String name); (parenthesis are mandatory) Example:Javaclass Test { void fun1() {} public double fun2(double x) {} public static void fun3() {} public static void fun4(String x) {}}Q7.Explain the difference between instance variable and a class variable. An instance variable is a variable which has one copy per object/instance. That means every object will have one copy of it. A class variable is a variable which has one copy per class. The class variables will not have a copy in the object. Example :Javaclass Employee { int empNo; String empName, department; double salary; static int officePhone;}An object referred by empObj1 is created by using the following: Employee empObj1 = new Employee();The objects referred by instance variables empObj1 and empObj2 have separate copies empNo, empName, department, and salary. However, the officePhone belongs to the class(Class Variable) and can be accessed as Employee.officePhone. Q8. Which class is the superclass of all classes? java.lang.Object is the root class for all the java classes and we don’t need to extend it.Q9.What are constructors in Java? In Java, constructor refers to a block of code which is used to initialize an object. It must have the same name as that of the class. Also, it has no return type and it is automatically called when an object is created. If a class does not explicitly declare any, the Java compiler automatically provides a no-argument constructor, also called the default constructor. This default constructor calls the class parent’s no-argument constructor (as it contains only one statement i.e. super();), or the Object class constructor if the class has no other parent (as Object class is a parent of all classes either directly or indirectly). There are two types of constructors:Default constructorParameterized constructorQ10. What are the different ways to create objects in Java? There are many different ways to create objects in Java. Please see 5 Different ways to create objects in JavaQ11. What’s the purpose of Static methods and static variables? When there is a requirement to share a method or a variable between multiple objects of a class instead of creating separate copies for each object, we use static keyword to make a method or variable shared for all objects. Static variable: Static variables are also known as Class variables. These variables are declared similarly as instance variables, the difference is that static variables are declared using the static keyword within a class outside any method constructor or block. Unlike instance variables, we can only have one copy of a static variable per class irrespective of how many objects we create. Static variables are created at the start of program execution and destroyed automatically when execution ends. To access static variables, we need not create an object of that class. Static methods: A static method can be accessed without creating objects. Just by using the Class name the method can be accessed. The static method can only access static variables and not local or global non-static variables.For Example:Javapublic class StaticMethod { public static void printMe() { System.out.println("Static Method access directly by class name!"); }}public class MainClass { public static void main(String args[]) { StaticMethod.printMe(); }}Q12. Why static methods cannot access non-static variables or methods? Ans) A static method cannot access non-static variables or methods because static methods can be accessed without instantiating the class, so if the class is not instantiated the variables are not initialized and thus cannot be accessed from a static method.Q13.What is a static class? A class can be said to be static class if all the variables and methods of the class are static and the constructor is private. Making the constructor private will prevent the class to be instantiated. So the only possibility to access is using the Class name only.Q14. How many types of Variable? Explain. There are three types of variables in Java:Local VariablesInstance VariablesStatic VariablesLocal Variables: A variable defined within a block or method or constructor is called local variable. These variable are created when the block is entered or the function is called and destroyed after exiting from the block or when the call returns from the function. The scope of these variables exists only within the block in which the variable is declared. i.e. we can access these variables only within that block. Java// Java program to demonstrate local variablespublic class LocalVariable{ public void getLocalVarValue() { // local variable age int localVar = 0; localVar = localVar + 11; System.out.println("value of local variable" + " is: " + localVar); } public static void main(String args[]) { LocalVariable obj = new LocalVariable(); obj.getLocalVarValue(); }}Output: value of local variable is: 11In the above program the variable localVar is local variable to the function getLocalVarValue(). If we use the variable localVar outside getLocalVarValue() function, the compiler will produce an error as “Cannot find the symbol localVar”.Instance Variables: Instance variables are non-static variables and are declared in a class outside any method, constructor or block. As instance variables are declared in a class, these variables are created when an object of the class is created and destroyed when the object is destroyed. Unlike local variables, we may use access specifiers for instance variables. If we do not specify any access specifier then the default access specifier will be used. Java// Java program to demonstrate instance variablespublic class InstanceVariable { int instanceVarId; String instanceVarName; public static void main(String args[]) { InstanceVariable obj = new InstanceVariable(); obj.instanceVarId = 0001; obj.instanceVarName = "InstanceVariable1"; System.out.println("Displaying first Object:"); System.out.println("instanceVarId==" + obj.instanceVarId); System.out.println("instanceVarName==" + obj.instanceVarName); InstanceVariable obj1 = new InstanceVariable(); obj1.instanceVarId = 0002; obj1.instanceVarName = "InstanceVariable2"; System.out.println("Displaying Second Object:"); System.out.println("instanceVarId==" + obj1.instanceVarId); System.out.println("instanceVarName==" + obj1.instanceVarName); }}Output: Displaying first Object: instanceVarId==1 instanceVarName==InstanceVariable1 Displaying Second Object: instanceVarId==2 instanceVarName==InstanceVariable2 In the above program the variables i.e. instanceVarId, instanceVarName are instance variables. In case we have multiple objects as in the above program, each object will have its own copies of instance variables. It is clear from the above output that each object will have its own copy of the instance variable.Static variable: Static variables are also known as Class variables. These variables are declared similarly as instance variables, the difference is that static variables are declared using the static keyword within a class outside any method constructor or block.Unlike instance variables, we can only have one copy of a static variable per class irrespective of how many objects we create.Static variables are created at start of program execution and destroyed automatically when execution ends.To access static variables, we need not create an object of that class, we can simply access the variable as: Java// Java program to demonstrate static variablespublic class StaticVar { private static int count = 0; private int nonStaticCount = 0; public void incrementCounter() { count++; nonStaticCount++; } public static int getStaticCount() { return count; } public int getNonStaticCount() { return nonStaticCount; } public static void main(String args[]) { StaticVar stVarObj1 = new StaticVar(); StaticVar stVarObj2 = new StaticVar(); stVarObj1.incrementCounter(); stVarObj2.incrementCounter(); System.out.println("Static count for stVarObj1: " + stVarObj1.getStaticCount()); System.out.println("NonStatic count for stVarObj1: " + stVarObj1.getNonStaticCount()); System.out.println("Static count for stVarObj2: " + stVarObj2.getStaticCount()); System.out.println("NonStatic count for stVarObj2: " + stVarObj2.getNonStaticCount()); }}Output: Static count for stVarObj1: 2 NonStatic count for stVarObj1: 1 Static count for stVarObj2: 2 NonStatic count for stVarObj2: 1 In the above program stVarObj1 and stVarObj2 share the same instance of static variable count hence if the value is incremented by one object, the incremented value will be reflected for stVarObj1 and stVarObj2. Attention reader! Don’t stop learning now. Get hold of all the important Java Foundation and Collections concepts with the Fundamentals of Java and Java Collections Course at a student-friendly price and become industry ready. To complete your preparation from learning a language to DS Algo and many more, please refer Complete Interview Preparation Course.My Personal Notes arrow_drop_upSave LikePreviousCommonly Asked Java Programming Interview Questions | Set 1Next Different ways to create objects in JavaRecommended ArticlesPage :Java Interview Questions on Constructors07, Apr 17Commonly Asked Java Programming Interview Questions | Set 104, Mar 16Top 20 Java Multithreading Interview Questions & Answers04, Aug 21Commonly Asked Java Programming Interview Questions | Set 219, Oct 1610 Most asked Questions from Java Programmers15, May 15Frequently asked questions for Java Developer Position from a fresher19, May 17Java Tricky Output Questions18, Oct 18Top 10 algorithms in Interview Questions09, Dec 15Top 10 Interview Questions on Depth First Search (DFS)01, May 17Top 20 Dynamic Programming Interview Questions22, Apr 17Top 20 Greedy Algorithms Interview Questions25, Apr 17Top 20 Backtracking Algorithm Interview Questions28, Apr 17Top 20 Hashing Technique based Interview Questions02, May 17Commonly Asked Data Structure Interview Questions | Set 125, May 14Commonly Asked C Programming Interview Questions | Set 211, Feb 14Commonly Asked C++ Interview Questions | Set 117, Mar 14Commonly Asked OOP Interview Questions | Set 126, Mar 14Commonly Asked C++ Interview Questions | Set 218, Dec 15Commonly Asked Algorithm Interview Questions | Set 116, Jul 14Commonly asked JavaScript Interview Questions | Set 117, Aug 18Commonly Asked C Programming Interview Questions | Set 304, Jan 19Advanced SQL Interview Questions18, Sep 19JavaScript Interview Questions and Answers17, Oct 19JavaScript Interview Questions and Answers | Set-205, Nov 19Article Contributed By :jHarsh@jHarshVote for difficultyCurrent difficulty : EasyEasy Normal Medium Hard ExpertImproved By :Shreya Girdhargabaa406Article Tags :interview-preparationjava-basicsJavaPractice Tags :JavaReport IssueWriting code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load CommentsWhat's NewJava Backend Development- LIVE ClassesView DetailsJava FoundationView DetailsComplete Interview PreparationView DetailsMost popular in JavaArrayList in JavaHashMap in Java with ExamplesMultidimensional Arrays in JavaInitialize an ArrayList in JavaHow to add an element to an Array in Java?More related articles in JavaLinkedList in JavaInterfaces in JavaStack Class in JavaCollections in JavaMath pow() method in Java with Example× 5th Floor, A-118,Sector-136, Noida, Uttar Pradesh - 201305 feedback@geeksforgeeks.orgCompanyAbout UsCareersPrivacy PolicyContact UsCopyright PolicyLearnAlgorithmsData StructuresLanguagesCS SubjectsVideo TutorialsWeb DevelopmentWeb TutorialsHTMLCSSJavaScriptBootstrapContributeWrite an ArticleWrite Interview ExperienceInternshipsVideos@geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It ! Start Your Coding Journey Now!Login Register