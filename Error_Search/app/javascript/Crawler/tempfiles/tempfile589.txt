Java | Implementing Iterator and Iterable Interface - GeeksforGeeksSkip to content TutorialsPractice DS & Algo.Must Do QuestionsDSA Topic-wiseDSA Company-wiseAlgorithmsAnalysis of AlgorithmsAsymptotic AnalysisWorst, Average and Best CasesAsymptotic NotationsLittle o and little omega notationsLower and Upper Bound TheoryAnalysis of LoopsSolving RecurrencesAmortized AnalysisWhat does 'Space Complexity' mean ?Pseudo-polynomial AlgorithmsPolynomial Time Approximation SchemeA Time Complexity QuestionSearching AlgorithmsSorting AlgorithmsGraph AlgorithmsPattern SearchingGeometric AlgorithmsMathematicalBitwise AlgorithmsRandomized AlgorithmsGreedy AlgorithmsDynamic ProgrammingDivide and ConquerBacktrackingBranch and BoundAll AlgorithmsData StructuresArraysLinked ListStackQueueBinary TreeBinary Search TreeHeapHashingGraphAdvanced Data StructureMatrixStringsAll Data StructuresInterview CornerCompany PreparationTop TopicsPractice Company QuestionsInterview ExperiencesExperienced InterviewsInternship InterviewsCompetititve ProgrammingDesign PatternsSystem Design TutorialMultiple Choice QuizzesLanguagesCC++JavaPythonC#JavaScriptjQuerySQLPHPScalaPerlGo LanguageHTMLCSSKotlinCS SubjectsMathematicsOperating SystemDBMSComputer NetworksComputer Organization and ArchitectureTheory of ComputationCompiler DesignDigital LogicSoftware EngineeringGATEGATE Computer Science NotesLast Minute NotesGATE CS Solved PapersGATE CS Original Papers and Official KeysGATE 2021 DatesGATE CS 2021 SyllabusImportant Topics for GATE CSWeb TechnologiesHTMLCSSJavaScriptAngularJSReactJSNodeJSBootstrapjQueryPHPSoftware DesignsSoftware Design PatternsSystem Design TutorialSchool LearningSchool ProgrammingMathematicsNumber SystemAlgebraTrigonometryStatisticsProbabilityGeometryMensurationCalculusMaths Notes (Class 8-12)Class 8 NotesClass 9 NotesClass 10 NotesClass 11 NotesClass 12 NotesNCERT SolutionsClass 8 Maths SolutionClass 9 Maths SolutionClass 10 Maths SolutionClass 11 Maths SolutionClass 12 Maths SolutionRD Sharma SolutionsClass 8 Maths SolutionClass 9 Maths SolutionClass 10 Maths SolutionClass 11 Maths SolutionClass 12 Maths SolutionPhysics Notes (Class 8-11)Class 8 NotesClass 9 NotesClass 10 NotesClass 11 NotesISRO CSISRO CS Solved PapersISRO CS Original Papers and Official KeysISRO CS Syllabus for Scientist/Engineer ExamUGC NET CSUGC NET CS Notes Paper IIUGC NET CS Notes Paper IIIUGC NET CS Solved PapersStudentCampus Ambassador ProgramSchool Ambassador ProgramProjectGeek of the MonthCampus Geek of the MonthPlacement CourseCompetititve ProgrammingTestimonialsGeek on the TopCareersInternshipJobsApply for JobsPost a JobCourses WriteCome write articles for us and get featuredPracticeLearn and code with the best industry expertsPremiumGet access to ad-free content, doubt assistance and more!JobsCome and find your dream job with usGeeks DigestQuizzesGeeks CampusGblog ArticlesIDECampus Mantri HomeSaved VideosCoursesGBlogPuzzlesWhat's New ? Change Language Data StructuresAlgorithmsInterview PreparationTopic-wise PracticeC++JavaPythonCompetitive ProgrammingMachine LearningWeb DevelopmentPuzzlesProject IdeasGFG School Related Articles ▲Related ArticlesBasicsJava Programming LanguageIntroduction to JavaSetting up the environment in JavaJava Basic SyntaxJava Hello World ProgramCommand Line arguments in JavaHow JVM Works – JVM Architecture?Differences between JDK, JRE and JVMJava IdentifiersData types in JavaVariables in JavaComments in JavaOperators in JavaWays to read input from console in JavaFlow ControlDecision Making in Java (if, if-else, switch, break, continue, jump)Loops in JavaJava For loop with ExamplesFor-each loop in JavaJava while loop with ExamplesSwitch Statement in JavaContinue Statement in JavaBreak statement in JavaStringsStrings in JavaString class in Java | Set 1StringBuffer class in JavaStringBuilder Class in Java with ExamplesArraysArrays in JavaMultidimensional Arrays in JavaJagged Array in JavaArray Copy in JavaHow to convert an Array to String in Java?How to compare two arrays in Java?MethodsMethods in JavaParameter Passing Techniques in Java with ExamplesReturning Multiple values in JavaDifferent ways of Method Overloading in JavaScope of Variables In JavaConstructorsConstructors in JavaCopy Constructor in JavaConstructor Overloading in JavaConstructor Chaining In Java with ExamplesPrivate Constructors and Singleton Classes in JavaOOP ConceptsClasses and Objects in JavaInheritance in JavaEncapsulation in JavaPolymorphism in JavaAbstraction in JavaOverriding in JavaOverloading in JavaException HandlingExceptions in JavaTypes of Exception in Java with ExamplesChecked vs Unchecked Exceptions in Javathrow and throws in JavaUser-defined Custom Exception in JavaInterfaces & Abstract ClassesInterfaces in JavaNested Interface in JavaMarker interface in JavaAbstract Classes in JavaDifference between Abstract Class and Interface in JavaFunctional Interfaces in JavaComparator Interface in Java with ExamplesCollectionsCollections in JavaCollections Class in JavaCollection vs Collections in Java with ExampleJava | Implementing Iterator and Iterable InterfaceList Interface in Java with ExamplesArrayList in JavaVector Class in JavaStack Class in JavaLinkedList in JavaQueue Interface In JavaPriorityQueue in JavaDeque interface in Java with ExampleArrayDeque in JavaSet in JavaHashSet in JavaLinkedHashSet in Java with ExamplesSortedSet Interface in Java with ExamplesNavigableSet in Java with ExamplesTreeSet in JavaMap Interface in JavaHashMap in Java with ExamplesHashtable in JavaLinkedHashMap in JavaSortedMap Interface in Java with ExamplesTreeMap in JavaMultithreadingMultithreading in JavaLifecycle and States of a Thread in JavaMain thread in JavaJava Thread Priority in MultithreadingSynchronization in JavaFile HandlingFile Handling in Java with CRUD operationsJava.io.InputStream Class in JavaJava.io.OutputStream class in JavaJava.io.File Class in JavaFile Permissions in JavaCopying file using FileStreams in JavaDelete a file using JavaTable of ContentsBasicsJava Programming LanguageIntroduction to JavaSetting up the environment in JavaJava Basic SyntaxJava Hello World ProgramCommand Line arguments in JavaHow JVM Works – JVM Architecture?Differences between JDK, JRE and JVMJava IdentifiersData types in JavaVariables in JavaComments in JavaOperators in JavaWays to read input from console in JavaFlow ControlDecision Making in Java (if, if-else, switch, break, continue, jump)Loops in JavaJava For loop with ExamplesFor-each loop in JavaJava while loop with ExamplesSwitch Statement in JavaContinue Statement in JavaBreak statement in JavaStringsStrings in JavaString class in Java | Set 1StringBuffer class in JavaStringBuilder Class in Java with ExamplesArraysArrays in JavaMultidimensional Arrays in JavaJagged Array in JavaArray Copy in JavaHow to convert an Array to String in Java?How to compare two arrays in Java?MethodsMethods in JavaParameter Passing Techniques in Java with ExamplesReturning Multiple values in JavaDifferent ways of Method Overloading in JavaScope of Variables In JavaConstructorsConstructors in JavaCopy Constructor in JavaConstructor Overloading in JavaConstructor Chaining In Java with ExamplesPrivate Constructors and Singleton Classes in JavaOOP ConceptsClasses and Objects in JavaInheritance in JavaEncapsulation in JavaPolymorphism in JavaAbstraction in JavaOverriding in JavaOverloading in JavaException HandlingExceptions in JavaTypes of Exception in Java with ExamplesChecked vs Unchecked Exceptions in Javathrow and throws in JavaUser-defined Custom Exception in JavaInterfaces & Abstract ClassesInterfaces in JavaNested Interface in JavaMarker interface in JavaAbstract Classes in JavaDifference between Abstract Class and Interface in JavaFunctional Interfaces in JavaComparator Interface in Java with ExamplesCollectionsCollections in JavaCollections Class in JavaCollection vs Collections in Java with ExampleJava | Implementing Iterator and Iterable InterfaceList Interface in Java with ExamplesArrayList in JavaVector Class in JavaStack Class in JavaLinkedList in JavaQueue Interface In JavaPriorityQueue in JavaDeque interface in Java with ExampleArrayDeque in JavaSet in JavaHashSet in JavaLinkedHashSet in Java with ExamplesSortedSet Interface in Java with ExamplesNavigableSet in Java with ExamplesTreeSet in JavaMap Interface in JavaHashMap in Java with ExamplesHashtable in JavaLinkedHashMap in JavaSortedMap Interface in Java with ExamplesTreeMap in JavaMultithreadingMultithreading in JavaLifecycle and States of a Thread in JavaMain thread in JavaJava Thread Priority in MultithreadingSynchronization in JavaFile HandlingFile Handling in Java with CRUD operationsJava.io.InputStream Class in JavaJava.io.OutputStream class in JavaJava.io.File Class in JavaFile Permissions in JavaCopying file using FileStreams in JavaDelete a file using JavaImprove Article Save Article Like Article Java | Implementing Iterator and Iterable InterfaceDifficulty Level : MediumLast Updated : 17 Jul, 2018Iterators are used in Collection framework in Java to retrieve elements one by one. For more details and introduction related to this, see this link.Why it is needed to implement Iterable interface?Every class that implements Iterable interface appropriately, can be used in the enhanced For loop (for-each loop). The need to implement the Iterator interface arises while designing custom data structures.Example:for(Item item: customDataStructure) { // do stuff } How to implement Iterable interface?To implement an iterable data structure, we need to:Implement Iterable interface along with its methods in the said Data StructureCreate an Iterator class which implements Iterator interface and corresponding methods.We can generalize the pseudo code as follows:class CustomDataStructure implements Iterable<> { // code for data structure public Iterator<> iterator() { return new CustomIterator<>(this); }}class CustomIterator<> implements Iterator<> { // constructor CustomIterator<>(CustomDataStructure obj) { // initialize cursor } // Checks if the next element exists public boolean hasNext() { } // moves the cursor/iterator to next element public T next() { } // Used to remove an element. Implement only if needed public void remove() { // Default throws UnsupportedOperationException. }}Note: The Iterator class can also, be implemented as an inner class of the Data Structure class since it won’t be used elsewhere.How next() and hasNext() work?To implement an Iterator, we need a cursor or pointer to keep track of which element we currently are on. Depending on the underlying data structure, we can progress from one element to another. This is done in the next() method which returns the current element and the cursor advances to next element.Before advancing the pointer, we check whether next element exists. i.e. we can picturize the behind-the-scenes code as follows:While(iterator.hasNext()) { //if next element exists next(); // advance the pointer } Initializing the cursorThe cursor initialization completely depends on the data structure. For example, in a linked list we would initialize cursor to the head element. In an array list, we would initialize cursor to the 0th element.From the point of view of implementation:If the Iterator class is implemented as an inner class, we can simply use “this” keyword (e.g. cursor = CustomDataStructure.this.element) to access the desired elementIf the Iterator class is implemented as a separate class, we can pass this object of the data structure to the iterator class constructor as demonstrated in the example below.Below program illustrates the use of Iterable interface:Given below is a Custom Linked List which makes use of Generics. The linked list consists of Node objects which contain a Generic data value and pointer to next node. The class provides some standard ‘get’ methods like getHead() and getTail(), and the necessary Iterator() function, which has to be implemented while implementing Iterable interface.Then the necessary custom class ‘ListIterator’ is created, which will implement the Iterator interface, along with it the functionalities of hasNext() and next() are also to be implemented. These two functions form the core of Iterable and Iterator interface.import java.util.Iterator; // Custom Linked List class using Genericsclass List<T> implements Iterable<T> { Node<T> head, tail; // add new Element at tail of the linked list in O(1) public void add(T data) { Node<T> node = new Node<>(data, null); if (head == null) tail = head = node; else { tail.setNext(node); tail = node; } } // return Head public Node<T> getHead() { return head; } // return Tail public Node<T> getTail() { return tail; } // return Iterator instance public Iterator<T> iterator() { return new ListIterator<T>(this); }} class ListIterator<T> implements Iterator<T> { Node<T> current; // initialize pointer to head of the list for iteration public ListIterator(List<T> list) { current = list.getHead(); } // returns false if next element does not exist public boolean hasNext() { return current != null; } // return current data and update pointer public T next() { T data = current.getData(); current = current.getNext(); return data; } // implement if needed public void remove() { throw new UnsupportedOperationException(); }} // Constituent Node of Linked Listclass Node<T> { T data; Node<T> next; public Node(T data, Node<T> next) { this.data = data; this.next = next; } // Setter getter methods for Data and Next Pointer public void setData(T data) { this.data = data; } public void setNext(Node<T> next) { this.next = next; } public T getData() { return data; } public Node<T> getNext() { return next; }} // Driver classclass Main { public static void main(String[] args) { // Create Linked List List<String> myList = new List<>(); // Add Elements myList.add("abc"); myList.add("mno"); myList.add("pqr"); myList.add("xyz"); // Iterate through the list using For Each Loop for (String string : myList) System.out.println(string); }}Output:abc mno pqr xyz My Personal Notes arrow_drop_upSave LikePreviousCollection vs Collections in Java with ExampleNext List Interface in Java with ExamplesRecommended ArticlesPage :Convert Iterator to Iterable in Java23, Oct 18Iterable Interface in Java13, Dec 20Iterator Interface In Java08, Nov 20Sorting Custom Object by Implementing Comparable Interface in Java28, Dec 20Convert an Iterable to Collection in Java09, Aug 18Convert an Iterable to Stream in Java23, Oct 18Iterable forEach() method in Java with Examples22, May 19Difference between an Iterator and ListIterator in Java17, Apr 19Difference between Iterator and Enumeration in Java with Examples16, Oct 19Difference Between Iterator and Spliterator in Java13, Oct 20Iterator vs Foreach In Java22, Mar 16Retrieving Elements from Collection in Java (For-each, Iterator, ListIterator & EnumerationIterator)06, Apr 16How to use Iterator in Java?17, Feb 16TreeSet iterator() Method in Java19, Jun 18LinkedBlockingDeque iterator() method in Java14, Sep 18IntStream iterator() in Java15, Mar 18Java AbstractSequentialList | iterator() method07, Sep 18DoubleStream iterator() in Java23, Mar 18LongStream iterator() in Java26, Mar 18HashSet iterator() Method in Java18, Jun 18PriorityQueue iterator() Method in Java20, Jun 18LinkedBlockingQueue iterator() method in Java30, Aug 18ArrayDeque iterator() Method in Java12, Jul 18Iterator vs Collection in Java08, Aug 18Article Contributed By :sejalpawar@sejalpawarVote for difficultyCurrent difficulty : MediumEasy Normal Medium Hard ExpertArticle Tags :java-interfacesJavaPractice Tags :JavaReport IssueWriting code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load CommentsWhat's NewJava Backend Development- LIVE ClassesView DetailsComplete Interview PreparationView DetailsSystem Design-Live Classes for Working ProfessionalsView DetailsMost popular in JavaObject Oriented Programming (OOPs) Concept in JavaSplit() String method in Java with examplesReverse a string in JavaArrays.sort() in Java with examplesHow to iterate any Map in JavaMore related articles in JavaInitialize an ArrayList in JavaSingleton Class in JavaJava Programming ExamplesStream In JavaHow to add an element to an Array in Java?× 5th Floor, A-118,Sector-136, Noida, Uttar Pradesh - 201305 feedback@geeksforgeeks.orgCompanyAbout UsCareersPrivacy PolicyContact UsCopyright PolicyLearnAlgorithmsData StructuresLanguagesCS SubjectsVideo TutorialsWeb DevelopmentWeb TutorialsHTMLCSSJavaScriptBootstrapContributeWrite an ArticleWrite Interview ExperienceInternshipsVideos@geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It ! Start Your Coding Journey Now!Login Register