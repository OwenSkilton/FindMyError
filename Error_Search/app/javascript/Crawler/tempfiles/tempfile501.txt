Strings in Java - GeeksforGeeksSkip to content TutorialsPractice DS & Algo.Must Do QuestionsDSA Topic-wiseDSA Company-wiseAlgorithmsAnalysis of AlgorithmsAsymptotic AnalysisWorst, Average and Best CasesAsymptotic NotationsLittle o and little omega notationsLower and Upper Bound TheoryAnalysis of LoopsSolving RecurrencesAmortized AnalysisWhat does 'Space Complexity' mean ?Pseudo-polynomial AlgorithmsPolynomial Time Approximation SchemeA Time Complexity QuestionSearching AlgorithmsSorting AlgorithmsGraph AlgorithmsPattern SearchingGeometric AlgorithmsMathematicalBitwise AlgorithmsRandomized AlgorithmsGreedy AlgorithmsDynamic ProgrammingDivide and ConquerBacktrackingBranch and BoundAll AlgorithmsData StructuresArraysLinked ListStackQueueBinary TreeBinary Search TreeHeapHashingGraphAdvanced Data StructureMatrixStringsAll Data StructuresInterview CornerCompany PreparationTop TopicsPractice Company QuestionsInterview ExperiencesExperienced InterviewsInternship InterviewsCompetititve ProgrammingDesign PatternsSystem Design TutorialMultiple Choice QuizzesLanguagesCC++JavaPythonC#JavaScriptjQuerySQLPHPScalaPerlGo LanguageHTMLCSSKotlinCS SubjectsMathematicsOperating SystemDBMSComputer NetworksComputer Organization and ArchitectureTheory of ComputationCompiler DesignDigital LogicSoftware EngineeringGATEGATE Computer Science NotesLast Minute NotesGATE CS Solved PapersGATE CS Original Papers and Official KeysGATE 2021 DatesGATE CS 2021 SyllabusImportant Topics for GATE CSWeb TechnologiesHTMLCSSJavaScriptAngularJSReactJSNodeJSBootstrapjQueryPHPSoftware DesignsSoftware Design PatternsSystem Design TutorialSchool LearningSchool ProgrammingMathematicsNumber SystemAlgebraTrigonometryStatisticsProbabilityGeometryMensurationCalculusMaths Notes (Class 8-12)Class 8 NotesClass 9 NotesClass 10 NotesClass 11 NotesClass 12 NotesNCERT SolutionsClass 8 Maths SolutionClass 9 Maths SolutionClass 10 Maths SolutionClass 11 Maths SolutionClass 12 Maths SolutionRD Sharma SolutionsClass 8 Maths SolutionClass 9 Maths SolutionClass 10 Maths SolutionClass 11 Maths SolutionClass 12 Maths SolutionPhysics Notes (Class 8-11)Class 8 NotesClass 9 NotesClass 10 NotesClass 11 NotesISRO CSISRO CS Solved PapersISRO CS Original Papers and Official KeysISRO CS Syllabus for Scientist/Engineer ExamUGC NET CSUGC NET CS Notes Paper IIUGC NET CS Notes Paper IIIUGC NET CS Solved PapersStudentCampus Ambassador ProgramSchool Ambassador ProgramProjectGeek of the MonthCampus Geek of the MonthPlacement CourseCompetititve ProgrammingTestimonialsGeek on the TopCareersInternshipJobsApply for JobsPost a JobCourses WriteCome write articles for us and get featuredPracticeLearn and code with the best industry expertsPremiumGet access to ad-free content, doubt assistance and more!JobsCome and find your dream job with usGeeks DigestQuizzesGeeks CampusGblog ArticlesIDECampus Mantri HomeSaved VideosCoursesGBlogPuzzlesWhat's New ? Change Language Data StructuresAlgorithmsInterview PreparationTopic-wise PracticeC++JavaPythonCompetitive ProgrammingMachine LearningWeb DevelopmentPuzzlesProject IdeasGFG School Related Articles ▲Related ArticlesBasics of JavaJava TutorialIntroduction to JavaSimilarities and Difference between Java and C++Setting up the environment in JavaJava Basic SyntaxJava Hello World ProgramDifferences between JDK, JRE and JVMHow JVM Works – JVM Architecture?Java IdentifiersVariables & DataTypes in JavaVariables in JavaScope of Variables In JavaData types in JavaOperators in JavaOperators in JavaJava Arithmetic Operators with ExamplesJava Assignment Operators with ExamplesJava Unary Operator with ExamplesJava Relational Operators with ExamplesJava Logical Operators with ExamplesJava Ternary Operator with ExamplesBitwise Operators in JavaPackages in JavaPackages In JavaFlow Control in JavaDecision Making in Java (if, if-else, switch, break, continue, jump)Java if statement with ExamplesJava if-else statement with ExamplesJava if-else-if ladder with ExamplesLoops in JavaLoops in JavaJava For loop with ExamplesJava while loop with ExamplesJava do-while loop with ExamplesFor-each loop in JavaJump Statements in JavaContinue Statement in JavaBreak statement in Javareturn keyword in JavaArrays in JavaArrays in JavaMultidimensional Arrays in JavaJagged Array in JavaStrings in JavaStrings in JavaString class in Java | Set 1StringBuffer class in JavaStringBuilder Class in Java with ExamplesOOPS in JavaObject Oriented Programming (OOPs) Concept in JavaClasses and Objects in JavaMethods in JavaAccess Modifiers in JavaWrapper Classes in JavaNeed of Wrapper Classes in JavaConstructors in JavaConstructors in JavaCopy Constructor in JavaConstructor Chaining In Java with ExamplesPrivate Constructors and Singleton Classes in JavaInheritance & Polymorphism in JavaInheritance in JavaJava and Multiple InheritanceComparison of Inheritance in C++ and JavaPolymorphism in JavaDynamic Method Dispatch or Runtime Polymorphism in JavaMethod overloading & OveridingOverloading in JavaDifferent ways of Method Overloading in JavaOverriding in JavaDifference Between Method Overloading and Method Overriding in JavaAbstraction & EncapsulationAbstraction in JavaAbstract Classes in JavaDifference between Abstract Class and Interface in JavaEncapsulation in JavaInterfaces in JavaInterfaces in JavaNested Interface in JavaMarker interface in JavaFunctional Interfaces in JavaComparator Interface in Java with ExamplesKeywords in JavaList of all Java KeywordsSuper Keyword in Javafinal Keyword in Javaabstract keyword in javastatic Keyword in Java‘this’ reference in Javaenum in JavaException Handling in JavaExceptions in JavaTypes of Exception in Java with ExamplesChecked vs Unchecked Exceptions in JavaTry, catch, throw and throws in JavaFlow control in try catch finally in Javathrow and throws in JavaUser-defined Custom Exception in JavaCollection FrameworkCollections in JavaCollections Class in JavaList Interface in Java with ExamplesArrayList in JavaVector Class in JavaStack Class in JavaLinkedList in JavaQueue Interface In JavaPriorityQueue in JavaDeque interface in Java with ExampleArrayDeque in JavaSet in JavaHashSet in JavaLinkedHashSet in Java with ExamplesSortedSet Interface in Java with ExamplesNavigableSet in Java with ExamplesTreeSet in JavaMap Interface in JavaHashMap in Java with ExamplesHashtable in JavaLinkedHashMap in JavaSortedMap Interface in Java with ExamplesTreeMap in JavaMulti-threading in JavaMultithreading in JavaLifecycle and States of a Thread in JavaMain thread in JavaJava Thread Priority in MultithreadingThread Pools in JavaSynchronization in JavaMethod and Block Synchronization in JavaImportance of Thread Synchronization in JavaThread Safety and how to achieve it in JavaTable of ContentsBasics of JavaJava TutorialIntroduction to JavaSimilarities and Difference between Java and C++Setting up the environment in JavaJava Basic SyntaxJava Hello World ProgramDifferences between JDK, JRE and JVMHow JVM Works – JVM Architecture?Java IdentifiersVariables & DataTypes in JavaVariables in JavaScope of Variables In JavaData types in JavaOperators in JavaOperators in JavaJava Arithmetic Operators with ExamplesJava Assignment Operators with ExamplesJava Unary Operator with ExamplesJava Relational Operators with ExamplesJava Logical Operators with ExamplesJava Ternary Operator with ExamplesBitwise Operators in JavaPackages in JavaPackages In JavaFlow Control in JavaDecision Making in Java (if, if-else, switch, break, continue, jump)Java if statement with ExamplesJava if-else statement with ExamplesJava if-else-if ladder with ExamplesLoops in JavaLoops in JavaJava For loop with ExamplesJava while loop with ExamplesJava do-while loop with ExamplesFor-each loop in JavaJump Statements in JavaContinue Statement in JavaBreak statement in Javareturn keyword in JavaArrays in JavaArrays in JavaMultidimensional Arrays in JavaJagged Array in JavaStrings in JavaStrings in JavaString class in Java | Set 1StringBuffer class in JavaStringBuilder Class in Java with ExamplesOOPS in JavaObject Oriented Programming (OOPs) Concept in JavaClasses and Objects in JavaMethods in JavaAccess Modifiers in JavaWrapper Classes in JavaNeed of Wrapper Classes in JavaConstructors in JavaConstructors in JavaCopy Constructor in JavaConstructor Chaining In Java with ExamplesPrivate Constructors and Singleton Classes in JavaInheritance & Polymorphism in JavaInheritance in JavaJava and Multiple InheritanceComparison of Inheritance in C++ and JavaPolymorphism in JavaDynamic Method Dispatch or Runtime Polymorphism in JavaMethod overloading & OveridingOverloading in JavaDifferent ways of Method Overloading in JavaOverriding in JavaDifference Between Method Overloading and Method Overriding in JavaAbstraction & EncapsulationAbstraction in JavaAbstract Classes in JavaDifference between Abstract Class and Interface in JavaEncapsulation in JavaInterfaces in JavaInterfaces in JavaNested Interface in JavaMarker interface in JavaFunctional Interfaces in JavaComparator Interface in Java with ExamplesKeywords in JavaList of all Java KeywordsSuper Keyword in Javafinal Keyword in Javaabstract keyword in javastatic Keyword in Java‘this’ reference in Javaenum in JavaException Handling in JavaExceptions in JavaTypes of Exception in Java with ExamplesChecked vs Unchecked Exceptions in JavaTry, catch, throw and throws in JavaFlow control in try catch finally in Javathrow and throws in JavaUser-defined Custom Exception in JavaCollection FrameworkCollections in JavaCollections Class in JavaList Interface in Java with ExamplesArrayList in JavaVector Class in JavaStack Class in JavaLinkedList in JavaQueue Interface In JavaPriorityQueue in JavaDeque interface in Java with ExampleArrayDeque in JavaSet in JavaHashSet in JavaLinkedHashSet in Java with ExamplesSortedSet Interface in Java with ExamplesNavigableSet in Java with ExamplesTreeSet in JavaMap Interface in JavaHashMap in Java with ExamplesHashtable in JavaLinkedHashMap in JavaSortedMap Interface in Java with ExamplesTreeMap in JavaMulti-threading in JavaMultithreading in JavaLifecycle and States of a Thread in JavaMain thread in JavaJava Thread Priority in MultithreadingThread Pools in JavaSynchronization in JavaMethod and Block Synchronization in JavaImportance of Thread Synchronization in JavaThread Safety and how to achieve it in JavaImprove Article Save Article Like Article Strings in JavaDifficulty Level : EasyLast Updated : 13 Jul, 2021Strings in Java are Objects that are backed internally by a char array. Since arrays are immutable(cannot grow), Strings are immutable as well. Whenever a change to a String is made, an entirely new String is created. Syntax: <String_Type> <string_variable> = "<sequence_of_string>"; Example: String str = "Geeks"; Memory allotment of StringWhenever a String Object is created as a literal, the object will be created in String constant pool. This allows JVM to optimize the initialization of String literal.For example: String str = "Geeks";The string can also be declared using new operator i.e. dynamically allocated. In case of String are dynamically allocated they are assigned a new memory location in heap. This string will not be added to String constant pool.For example: String str = new String("Geeks");If you want to store this string in the constant pool then you will need to “intern” it.For example:String internedString = str.intern(); // this will add the string to string constant pool.It is preferred to use String literals as it allows JVM to optimize memory allocation.An example that shows how to declare String Java// Java code to illustrate Stringimport java.io.*;import java.lang.*; class Test { public static void main(String[] args) { // Declare String without using new operator String s = "GeeksforGeeks"; // Prints the String. System.out.println("String s = " + s); // Declare String using new operator String s1 = new String("GeeksforGeeks"); // Prints the String. System.out.println("String s1 = " + s1); }}Output: String s = GeeksforGeeks String s1 = GeeksforGeeks Interfaces and Classes in Strings in JavaCharBuffer: This class implements the CharSequence interface. This class is used to allow character buffers to be used in place of CharSequences. An example of such usage is the regular-expression package java.util.regex. String: String is a sequence of characters. In java, objects of String are immutable which means a constant and cannot be changed once created.Creating a StringThere are two ways to create a string in Java: String literalString s = “GeeksforGeeks”;Using new keywordString s = new String (“GeeksforGeeks”);StringBuffer: StringBuffer is a peer class of String that provides much of the functionality of strings. The string represents fixed-length, immutable character sequences while StringBuffer represents growable and writable character sequences.Syntax:StringBuffer s = new StringBuffer("GeeksforGeeks");StringBuilder: The StringBuilder in Java represents a mutable sequence of characters. Since the String Class in Java creates an immutable sequence of characters, the StringBuilder class provides an alternate to String Class, as it creates a mutable sequence of characters.Syntax:StringBuilder str = new StringBuilder(); str.append("GFG");StringTokenizer: StringTokenizer class in Java is used to break a string into tokens. Example:A StringTokenizer object internally maintains a current position within the string to be tokenized. Some operations advance this current position past the characters processed. A token is returned by taking a substring of the string that was used to create the StringTokenizer object. StringJoiner: StringJoiner is a class in java.util package which is used to construct a sequence of characters(strings) separated by a delimiter and optionally starting with a supplied prefix and ending with a supplied suffix. Though this can also be with the help of StringBuilder class to append delimiter after each string, StringJoiner provides an easy way to do that without much code to write.Syntax:public StringJoiner(CharSequence delimiter)Above we saw we can create string by String Literal. For ex- // String s=”Welcome”; Here the JVM checks the String Constant Pool. If the string does not exist, then a new string instance is created and placed in a pool. If the string exists, then it will not create a new object. Rather, it will return the reference to the same instance. The cache which stores these string instances is known as the String Constant pool or String Pool. In earlier versions of Java up to JDK 6 String pool was located inside PermGen(Permanent Generation) space. But in JDK 7 it is moved to the main heap area. Why did the String pool move from PermGen to the normal heap area? PermGen space is limited, the default size is just 64 MB. it was a problem with creating and storing too many string objects in PermGen space. That’s why the String pool was moved to a larger heap area. To make Java more memory efficient, the concept of string literal is used. By the use of the ‘new’ keyword, The JVM will create a new string object in the normal heap area even if the same string object is present in the string pool. For ex- String a=new String(“Bhubaneswar”)Let’s have a look at the concept with a java program and visualize the actual JVM memory structure: Program:Javaclass StringStorage { public static void main(String args[]) { String s1 = "TAT"; String s2 = "TAT"; String s3 = new String("TAT"); String s4 = new String("TAT"); System.out.println(s1); System.out.println(s2); System.out.println(s3); System.out.println(s4); }}OutputTAT TAT TAT TAT Note: All objects in Java are stored in a heap. The reference variable is to the object stored in the stack area or they can be contained in other objects which puts them in the heap area also.My Personal Notes arrow_drop_upSave LikePreviousJagged Array in JavaNext String class in Java | Set 1Recommended ArticlesPage :Difference Between java.sql.Time, java.sql.Timestamp and java.sql.Date in Java07, Apr 21Printing Integer between Strings in Java11, May 16Numbers in Java (With 0 Prefix and with Strings)25, Jun 16Java Program to Swap two Strings Without Using any Third Variable28, Oct 16Compare two strings lexicographically in Java10, Oct 17Output of Java Programs | Set 52 (Strings Class)18, Dec 17Check whether two Strings are Anagram of each other using HashMap in Java01, Feb 19Compare two Strings in Java27, Sep 18Compact Strings in Java 9 with Examples07, Feb 20Java Program to Write an Array of Strings to the Output Console26, Oct 20Java Program to Print all the Strings that Match a Given Pattern from a File02, Nov 20Java Program to Replace All Line Breaks from Strings02, Feb 21Java Program to Add Two Binary Strings23, Mar 21Java Program to Find All Palindromic Sub-Strings of a String16, Apr 21How to sort an Array of Strings in Java22, Jul 21How to Initialize and Compare Strings in Java?09, Sep 16Java Program to check if strings are rotations of each other or not24, Nov 21Java Program for Minimum move to end operations to make all strings equal30, Dec 21How to Convert java.sql.Date to java.util.Date in Java?02, Feb 21Different Ways to Convert java.util.Date to java.time.LocalDate in Java05, Jan 21How to Convert java.util.Date to java.sql.Date in Java?23, Mar 21Print all possible strings of length k that can be formed from a set of n characters29, Jun 13Longest Common Substring in an Array of Strings03, Oct 17Find all palindromic sub-strings of a given string | Set 216, May 18Article Contributed By :RishabhPrabhu@RishabhPrabhuVote for difficultyCurrent difficulty : EasyEasy Normal Medium Hard ExpertImproved By :anthonycathersbitsandbytesSatyabrata_JenaArticle Tags :java-StringBufferJava-StringBuilderJava-StringsJavaPractice Tags :Java-StringsJavaReport IssueWriting code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load CommentsWhat's NewJava Backend Development- LIVE ClassesView DetailsComplete Interview PreparationView DetailsSystem Design-Live Classes for Working ProfessionalsView DetailsMost popular in JavaSplit() String method in Java with examplesArrays.sort() in Java with examplesReverse a string in JavaHow to iterate any Map in JavaInitialize an ArrayList in JavaMore related articles in JavaStream In JavaSingleton Class in JavaHow to add an element to an Array in Java?Initializing a List in JavaJava Programming Examples× 5th Floor, A-118,Sector-136, Noida, Uttar Pradesh - 201305 feedback@geeksforgeeks.orgCompanyAbout UsCareersPrivacy PolicyContact UsCopyright PolicyLearnAlgorithmsData StructuresLanguagesCS SubjectsVideo TutorialsWeb DevelopmentWeb TutorialsHTMLCSSJavaScriptBootstrapContributeWrite an ArticleWrite Interview ExperienceInternshipsVideos@geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It ! Start Your Coding Journey Now!Login Register