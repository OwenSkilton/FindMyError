Java.Lang.Short class in Java - GeeksforGeeksSkip to content TutorialsPractice DS & Algo.Must Do QuestionsDSA Topic-wiseDSA Company-wiseAlgorithmsAnalysis of AlgorithmsAsymptotic AnalysisWorst, Average and Best CasesAsymptotic NotationsLittle o and little omega notationsLower and Upper Bound TheoryAnalysis of LoopsSolving RecurrencesAmortized AnalysisWhat does 'Space Complexity' mean ?Pseudo-polynomial AlgorithmsPolynomial Time Approximation SchemeA Time Complexity QuestionSearching AlgorithmsSorting AlgorithmsGraph AlgorithmsPattern SearchingGeometric AlgorithmsMathematicalBitwise AlgorithmsRandomized AlgorithmsGreedy AlgorithmsDynamic ProgrammingDivide and ConquerBacktrackingBranch and BoundAll AlgorithmsData StructuresArraysLinked ListStackQueueBinary TreeBinary Search TreeHeapHashingGraphAdvanced Data StructureMatrixStringsAll Data StructuresInterview CornerCompany PreparationTop TopicsPractice Company QuestionsInterview ExperiencesExperienced InterviewsInternship InterviewsCompetititve ProgrammingDesign PatternsSystem Design TutorialMultiple Choice QuizzesLanguagesCC++JavaPythonC#JavaScriptjQuerySQLPHPScalaPerlGo LanguageHTMLCSSKotlinCS SubjectsMathematicsOperating SystemDBMSComputer NetworksComputer Organization and ArchitectureTheory of ComputationCompiler DesignDigital LogicSoftware EngineeringGATEGATE Computer Science NotesLast Minute NotesGATE CS Solved PapersGATE CS Original Papers and Official KeysGATE 2021 DatesGATE CS 2021 SyllabusImportant Topics for GATE CSWeb TechnologiesHTMLCSSJavaScriptAngularJSReactJSNodeJSBootstrapjQueryPHPSoftware DesignsSoftware Design PatternsSystem Design TutorialSchool LearningSchool ProgrammingMathematicsNumber SystemAlgebraTrigonometryStatisticsProbabilityGeometryMensurationCalculusMaths Notes (Class 8-12)Class 8 NotesClass 9 NotesClass 10 NotesClass 11 NotesClass 12 NotesNCERT SolutionsClass 8 Maths SolutionClass 9 Maths SolutionClass 10 Maths SolutionClass 11 Maths SolutionClass 12 Maths SolutionRD Sharma SolutionsClass 8 Maths SolutionClass 9 Maths SolutionClass 10 Maths SolutionClass 11 Maths SolutionClass 12 Maths SolutionPhysics Notes (Class 8-11)Class 8 NotesClass 9 NotesClass 10 NotesClass 11 NotesISRO CSISRO CS Solved PapersISRO CS Original Papers and Official KeysISRO CS Syllabus for Scientist/Engineer ExamUGC NET CSUGC NET CS Notes Paper IIUGC NET CS Notes Paper IIIUGC NET CS Solved PapersStudentCampus Ambassador ProgramSchool Ambassador ProgramProjectGeek of the MonthCampus Geek of the MonthPlacement CourseCompetititve ProgrammingTestimonialsGeek on the TopCareersInternshipJobsApply for JobsPost a JobCourses WriteCome write articles for us and get featuredPracticeLearn and code with the best industry expertsPremiumGet access to ad-free content, doubt assistance and more!JobsCome and find your dream job with usGeeks DigestQuizzesGeeks CampusGblog ArticlesIDECampus Mantri HomeSaved VideosCoursesGBlogPuzzlesWhat's New ? Change Language Data StructuresAlgorithmsInterview PreparationTopic-wise PracticeC++JavaPythonCompetitive ProgrammingMachine LearningWeb DevelopmentPuzzlesProject IdeasGFG School Related Articles ▲Related ArticlesWrapper Classes in JavaPrimitive Wrapper Classes are Immutable in JavaJava.lang.Number Class in JavaJava.lang.Integer class in JavaJava.Lang.Byte class in JavaJava.Lang.Short class in JavaJava.Lang.Long class in JavaJava.Lang.Float class in JavaJava.Lang.Double class in JavaJava.lang.Boolean Class in JavaJava.lang.Character Class in JavaAutoboxing and Unboxing in JavaTable of ContentsWrapper Classes in JavaPrimitive Wrapper Classes are Immutable in JavaJava.lang.Number Class in JavaJava.lang.Integer class in JavaJava.Lang.Byte class in JavaJava.Lang.Short class in JavaJava.Lang.Long class in JavaJava.Lang.Float class in JavaJava.Lang.Double class in JavaJava.lang.Boolean Class in JavaJava.lang.Character Class in JavaAutoboxing and Unboxing in JavaImprove Article Save Article Like Article Java.Lang.Short class in JavaDifficulty Level : BasicLast Updated : 29 Jul, 2021Short class is a wrapper class for the primitive type short which contains several methods to effectively deal with a short value like converting it to a string representation, and vice-versa. An object of Short class can hold a single short value. There are mainly two constructors to initialize a Short object- Short(short b): Creates a Short object initialized with the value provided. Syntax : public Short(short b) Parameters : b : value with which to initialize Short(String s): Creates a Short object initialized with the short value provided by string representation. Default radix is taken to be 10. Syntax : public Short(String s) throws NumberFormatException Parameters : s : string representation of the short value Throws : NumberFormatException : If the string provided does not represent any short value. Methods: toString() : Returns the string corresponding to the short value. Syntax : public String toString(short b) Parameters : b : short value for which string representation required.valueOf() : returns the Short object initialiszed with the value provided. Syntax : public static Short valueOf(short b) Parameters : b : a short valueAnother overloaded function valueOf(String val,int radix) which provides function similar to new Short(Short.parseShort(val,radix)) Syntax : public static Short valueOf(String val, int radix) throws NumberFormatException Parameters : val : String to be parsed into short value radix : radix to be used while parsing Throws : NumberFormatException : if String cannot be parsed to a short value in given radix.Another overloaded function valueOf(String val) which provides function similar to new Short(Short.parseShort(val,10)) Syntax : public static Short valueOf(String s) throws NumberFormatException Parameters : s : a String object to be parsed as short Throws : NumberFormatException : if String cannot be parsed to a short value in given radix.parseShort() : returns short value by parsing the string in radix provided. Differs from valueOf() as it returns a primitive short value and valueOf() return Short object. Syntax : public static short parseShort(String val, int radix) throws NumberFormatException Parameters : val : String representation of short radix : radix to be used while parsing Throws : NumberFormatException : if String cannot be parsed to a short value in given radix.Another overloaded method containing only String as a parameter, radix is by default set to 10. Syntax : public static short parseShort(String val) throws NumberFormatException Parameters : val : String representation of short Throws : NumberFormatException : if String cannot be parsed to a short value in given radix.decode() : returns a Short object holding the decoded value of string provided. String provided must be of the following form else NumberFormatException will be thrown- Decimal- (Sign)Decimal_Number Hex- (Sign)”0x”Hex_Digits Hex- (Sign)”0X”Hex_Digits Octal- (Sign)”0″Octal_Digits Syntax : public static Short decode(String s) throws NumberFormatException Parameters : s : encoded string to be parsed into short val Throws : NumberFormatException : If the string cannot be decoded into a short valuebyteValue() : returns a byte value corresponding to this Short Object. Syntax : public byte byteValue()shortValue() : returns a short value corresponding to this Short Object. Syntax : public short shortValue()intValue() : returns a int value corresponding to this Short Object. Syntax : public int intValue()longValue() : returns a long value corresponding to this Short Object. Syntax : public long longValue()doubleValue() : returns a double value corresponding to this Short Object. Syntax : public double doubleValue()floatValue() : returns a float value corresponding to this Short Object. Syntax : public float floatValue()hashCode() : returns the hashcode corresponding to this Short Object. Syntax : public int hashCode()equals() : Used to compare the equality of two Short objects. This methods returns true if both the objects contains same short value. Should be used only if checking for equality. In all other cases compareTo method should be preferred. Syntax : public boolean equals(Object obj) Parameters : obj : object to compare withcompareTo() : Used to compare two Short objects for numerical equality. This should be used when comparing two Short values for numerical equality as it would differentiate between less and greater values. Returns a value less than 0,0,value greater than 0 for less than,equal to and greater than. Syntax : public int compareTo(Short b) Parameters : b : Short object to compare withcompare() : Used to compare two primitive short values for numerical equality. As it is a static method therefore it can be used without creating any object of Short. Syntax : public static int compare(short x,short y) Parameters : x : short value y : another short valuereverseBytes() : returns a primitive short value reversing the the order of bits in two’s complement form of the given short value. Syntax : public static short reverseBytes(short val) Parameters : val : short value whose bits to reverse in order. Java// Java program to illustrate// various methods of Short classpublic class Short_test{ public static void main(String[] args) { short b = 55; String bb = "45"; // Construct two Short objects Short x = new Short(b); Short y = new Short(bb); // toString() System.out.println("toString(b) = " + Short.toString(b)); // valueOf() // return Short object Short z = Short.valueOf(b); System.out.println("valueOf(b) = " + z); z = Short.valueOf(bb); System.out.println("ValueOf(bb) = " + z); z = Short.valueOf(bb, 6); System.out.println("ValueOf(bb,6) = " + z); // parseShort() // return primitive short value short zz = Short.parseShort(bb); System.out.println("parseShort(bb) = " + zz); zz = Short.parseShort(bb, 6); System.out.println("parseShort(bb,6) = " + zz); //decode() String decimal = "45"; String octal = "005"; String hex = "0x0f"; Short dec = Short.decode(decimal); System.out.println("decode(45) = " + dec); dec = Short.decode(octal); System.out.println("decode(005) = " + dec); dec = Short.decode(hex); System.out.println("decode(0x0f) = " + dec); System.out.println("bytevalue(x) = " + x.byteValue()); System.out.println("shortvalue(x) = " + x.shortValue()); System.out.println("intvalue(x) = " + x.intValue()); System.out.println("longvalue(x) = " + x.longValue()); System.out.println("doublevalue(x) = " + x.doubleValue()); System.out.println("floatvalue(x) = " + x.floatValue()); int hash = x.hashCode(); System.out.println("hashcode(x) = " + hash); boolean eq = x.equals(y); System.out.println("x.equals(y) = " + eq); int e = Short.compare(x, y); System.out.println("compare(x,y) = " + e); int f = x.compareTo(y); System.out.println("x.compareTo(y) = " + f); short to_rev = 45; System.out.println("Short.reverseBytes(to_rev) = " + Short.reverseBytes(to_rev)); }}Output : toString(b) = 55 valueOf(b) = 55 ValueOf(bb) = 45 ValueOf(bb,6) = 29 parseShort(bb) = 45 parseShort(bb,6) = 29 decode(45) = 45 decode(005) = 5 decode(0x0f) = 15 bytevalue(x) = 55 shortvalue(x) = 55 intvalue(x) = 55 longvalue(x) = 55 doublevalue(x) = 55.0 floatvalue(x) = 55.0 hashcode(x) = 55 x.equals(y) = false compare(x,y) = 10 x.compareTo(y) = 10 Short.reverseBytes(to_rev) = 11520This article is contributed by Rishabh Mahrsee. If you like GeeksforGeeks and would like to contribute, you can also write an article using write.geeksforgeeks.org or mail your article to review-team@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above. Attention reader! Don’t stop learning now. Get hold of all the important Java Foundation and Collections concepts with the Fundamentals of Java and Java Collections Course at a student-friendly price and become industry ready. To complete your preparation from learning a language to DS Algo and many more, please refer Complete Interview Preparation Course.My Personal Notes arrow_drop_upSave LikePreviousJava.Lang.Byte class in JavaNext Java.Lang.Long class in JavaRecommended ArticlesPage :Java.lang.Class class in Java | Set 130, Mar 17Java.lang.Class class in Java | Set 203, Apr 17Implement Pair Class with Unit Class in Java using JavaTuples20, Sep 18Implement Triplet Class with Pair Class in Java using JavaTuples20, Sep 18Implement Quintet Class with Quartet Class in Java using JavaTuples20, Sep 18Implement Quartet Class with Triplet Class in Java using JavaTuples20, Sep 18Implement Octet Class from Septet Class in Java using JavaTuples24, Sep 18Implement Ennead Class from Octet Class in Java using JavaTuples24, Sep 18Implement Sextet Class from Quintet Class in Java using JavaTuples24, Sep 18Implement Septet Class from Sextet Class in Java using JavaTuples24, Sep 18Implement Decade Class from Ennead Class in Java using JavaTuples24, Sep 18Difference between Abstract Class and Concrete Class in Java11, Jan 19In Java, Can we call the main() method of a class from another class?28, Nov 19Java Program to Check if a Given Class is a Local Inner Class16, Nov 20Java Program to Check if a Given Class is an Anonymous Class16, Nov 20Java Program to Check if a Given Class is an Inner Class14, Dec 20Using predefined class name as Class or Variable name in Java26, May 17Java.util.TimeZone Class (Set-2) | Example On TimeZone Class25, Apr 18Java Program to Illustrate the Availability of Default Constructor of the Super Class to the Sub Class by Default05, Dec 20Does JVM create object of Main class (the class with main())?06, Apr 16Inner Class And Anonymous Inner Class that Implements Runnable | Concurrent Programming Approach 308, Apr 19Java.util.BitSet class methods in Java with Examples | Set 218, Nov 16Java.Lang.Float class in Java27, Mar 17Java.io.BufferedInputStream class in Java20, Jan 17Article Contributed By :GeeksforGeeksVote for difficultyCurrent difficulty : BasicEasy Normal Medium Hard ExpertImproved By :sumitgumber28abhishek0719kadiyansagar0719kumarArticle Tags :Java-lang packageJava-Shortjava-wrapper-classJavaPractice Tags :JavaReport IssueWriting code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load CommentsWhat's NewJava Backend Development- LIVE ClassesView DetailsComplete Interview PreparationView DetailsSystem Design-Live Classes for Working ProfessionalsView DetailsMost popular in JavaArrays in JavaObject Oriented Programming (OOPs) Concept in JavaSplit() String method in Java with examplesFor-each loop in JavaArrays.sort() in Java with examplesMore related articles in JavaReverse a string in JavaArrayList in JavaHashMap in Java with ExamplesInitialize an ArrayList in JavaMultidimensional Arrays in Java× 5th Floor, A-118,Sector-136, Noida, Uttar Pradesh - 201305 feedback@geeksforgeeks.orgCompanyAbout UsCareersPrivacy PolicyContact UsCopyright PolicyLearnAlgorithmsData StructuresLanguagesCS SubjectsVideo TutorialsWeb DevelopmentWeb TutorialsHTMLCSSJavaScriptBootstrapContributeWrite an ArticleWrite Interview ExperienceInternshipsVideos@geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It ! Start Your Coding Journey Now!Login Register