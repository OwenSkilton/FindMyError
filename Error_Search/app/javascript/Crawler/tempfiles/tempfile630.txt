Ways to read input from console in Java - GeeksforGeeksSkip to content TutorialsPractice DS & Algo.Must Do QuestionsDSA Topic-wiseDSA Company-wiseAlgorithmsAnalysis of AlgorithmsAsymptotic AnalysisWorst, Average and Best CasesAsymptotic NotationsLittle o and little omega notationsLower and Upper Bound TheoryAnalysis of LoopsSolving RecurrencesAmortized AnalysisWhat does 'Space Complexity' mean ?Pseudo-polynomial AlgorithmsPolynomial Time Approximation SchemeA Time Complexity QuestionSearching AlgorithmsSorting AlgorithmsGraph AlgorithmsPattern SearchingGeometric AlgorithmsMathematicalBitwise AlgorithmsRandomized AlgorithmsGreedy AlgorithmsDynamic ProgrammingDivide and ConquerBacktrackingBranch and BoundAll AlgorithmsData StructuresArraysLinked ListStackQueueBinary TreeBinary Search TreeHeapHashingGraphAdvanced Data StructureMatrixStringsAll Data StructuresInterview CornerCompany PreparationTop TopicsPractice Company QuestionsInterview ExperiencesExperienced InterviewsInternship InterviewsCompetititve ProgrammingDesign PatternsSystem Design TutorialMultiple Choice QuizzesLanguagesCC++JavaPythonC#JavaScriptjQuerySQLPHPScalaPerlGo LanguageHTMLCSSKotlinCS SubjectsMathematicsOperating SystemDBMSComputer NetworksComputer Organization and ArchitectureTheory of ComputationCompiler DesignDigital LogicSoftware EngineeringGATEGATE Computer Science NotesLast Minute NotesGATE CS Solved PapersGATE CS Original Papers and Official KeysGATE 2021 DatesGATE CS 2021 SyllabusImportant Topics for GATE CSWeb TechnologiesHTMLCSSJavaScriptAngularJSReactJSNodeJSBootstrapjQueryPHPSoftware DesignsSoftware Design PatternsSystem Design TutorialSchool LearningSchool ProgrammingMathematicsNumber SystemAlgebraTrigonometryStatisticsProbabilityGeometryMensurationCalculusMaths Notes (Class 8-12)Class 8 NotesClass 9 NotesClass 10 NotesClass 11 NotesClass 12 NotesNCERT SolutionsClass 8 Maths SolutionClass 9 Maths SolutionClass 10 Maths SolutionClass 11 Maths SolutionClass 12 Maths SolutionRD Sharma SolutionsClass 8 Maths SolutionClass 9 Maths SolutionClass 10 Maths SolutionClass 11 Maths SolutionClass 12 Maths SolutionPhysics Notes (Class 8-11)Class 8 NotesClass 9 NotesClass 10 NotesClass 11 NotesISRO CSISRO CS Solved PapersISRO CS Original Papers and Official KeysISRO CS Syllabus for Scientist/Engineer ExamUGC NET CSUGC NET CS Notes Paper IIUGC NET CS Notes Paper IIIUGC NET CS Solved PapersStudentCampus Ambassador ProgramSchool Ambassador ProgramProjectGeek of the MonthCampus Geek of the MonthPlacement CourseCompetititve ProgrammingTestimonialsGeek on the TopCareersInternshipJobsApply for JobsPost a JobCourses WriteCome write articles for us and get featuredPracticeLearn and code with the best industry expertsPremiumGet access to ad-free content, doubt assistance and more!JobsCome and find your dream job with usGeeks DigestQuizzesGeeks CampusGblog ArticlesIDECampus Mantri HomeSaved VideosCoursesGBlogPuzzlesWhat's New ? Change Language Data StructuresAlgorithmsInterview PreparationTopic-wise PracticeC++JavaPythonCompetitive ProgrammingMachine LearningWeb DevelopmentPuzzlesProject IdeasGFG School Related Articles ▲Related ArticlesBasicsJava Programming LanguageIntroduction to JavaSetting up the environment in JavaJava Basic SyntaxJava Hello World ProgramCommand Line arguments in JavaHow JVM Works – JVM Architecture?Differences between JDK, JRE and JVMJava IdentifiersData types in JavaVariables in JavaComments in JavaOperators in JavaWays to read input from console in JavaFlow ControlDecision Making in Java (if, if-else, switch, break, continue, jump)Loops in JavaJava For loop with ExamplesFor-each loop in JavaJava while loop with ExamplesSwitch Statement in JavaContinue Statement in JavaBreak statement in JavaStringsStrings in JavaString class in Java | Set 1StringBuffer class in JavaStringBuilder Class in Java with ExamplesArraysArrays in JavaMultidimensional Arrays in JavaJagged Array in JavaArray Copy in JavaHow to convert an Array to String in Java?How to compare two arrays in Java?MethodsMethods in JavaParameter Passing Techniques in Java with ExamplesReturning Multiple values in JavaDifferent ways of Method Overloading in JavaScope of Variables In JavaConstructorsConstructors in JavaCopy Constructor in JavaConstructor Overloading in JavaConstructor Chaining In Java with ExamplesPrivate Constructors and Singleton Classes in JavaOOP ConceptsClasses and Objects in JavaInheritance in JavaEncapsulation in JavaPolymorphism in JavaAbstraction in JavaOverriding in JavaOverloading in JavaException HandlingExceptions in JavaTypes of Exception in Java with ExamplesChecked vs Unchecked Exceptions in Javathrow and throws in JavaUser-defined Custom Exception in JavaInterfaces & Abstract ClassesInterfaces in JavaNested Interface in JavaMarker interface in JavaAbstract Classes in JavaDifference between Abstract Class and Interface in JavaFunctional Interfaces in JavaComparator Interface in Java with ExamplesCollectionsCollections in JavaCollections Class in JavaCollection vs Collections in Java with ExampleJava | Implementing Iterator and Iterable InterfaceList Interface in Java with ExamplesArrayList in JavaVector Class in JavaStack Class in JavaLinkedList in JavaQueue Interface In JavaPriorityQueue in JavaDeque interface in Java with ExampleArrayDeque in JavaSet in JavaHashSet in JavaLinkedHashSet in Java with ExamplesSortedSet Interface in Java with ExamplesNavigableSet in Java with ExamplesTreeSet in JavaMap Interface in JavaHashMap in Java with ExamplesHashtable in JavaLinkedHashMap in JavaSortedMap Interface in Java with ExamplesTreeMap in JavaMultithreadingMultithreading in JavaLifecycle and States of a Thread in JavaMain thread in JavaJava Thread Priority in MultithreadingSynchronization in JavaFile HandlingFile Handling in Java with CRUD operationsJava.io.InputStream Class in JavaJava.io.OutputStream class in JavaJava.io.File Class in JavaFile Permissions in JavaCopying file using FileStreams in JavaDelete a file using JavaTable of ContentsBasicsJava Programming LanguageIntroduction to JavaSetting up the environment in JavaJava Basic SyntaxJava Hello World ProgramCommand Line arguments in JavaHow JVM Works – JVM Architecture?Differences between JDK, JRE and JVMJava IdentifiersData types in JavaVariables in JavaComments in JavaOperators in JavaWays to read input from console in JavaFlow ControlDecision Making in Java (if, if-else, switch, break, continue, jump)Loops in JavaJava For loop with ExamplesFor-each loop in JavaJava while loop with ExamplesSwitch Statement in JavaContinue Statement in JavaBreak statement in JavaStringsStrings in JavaString class in Java | Set 1StringBuffer class in JavaStringBuilder Class in Java with ExamplesArraysArrays in JavaMultidimensional Arrays in JavaJagged Array in JavaArray Copy in JavaHow to convert an Array to String in Java?How to compare two arrays in Java?MethodsMethods in JavaParameter Passing Techniques in Java with ExamplesReturning Multiple values in JavaDifferent ways of Method Overloading in JavaScope of Variables In JavaConstructorsConstructors in JavaCopy Constructor in JavaConstructor Overloading in JavaConstructor Chaining In Java with ExamplesPrivate Constructors and Singleton Classes in JavaOOP ConceptsClasses and Objects in JavaInheritance in JavaEncapsulation in JavaPolymorphism in JavaAbstraction in JavaOverriding in JavaOverloading in JavaException HandlingExceptions in JavaTypes of Exception in Java with ExamplesChecked vs Unchecked Exceptions in Javathrow and throws in JavaUser-defined Custom Exception in JavaInterfaces & Abstract ClassesInterfaces in JavaNested Interface in JavaMarker interface in JavaAbstract Classes in JavaDifference between Abstract Class and Interface in JavaFunctional Interfaces in JavaComparator Interface in Java with ExamplesCollectionsCollections in JavaCollections Class in JavaCollection vs Collections in Java with ExampleJava | Implementing Iterator and Iterable InterfaceList Interface in Java with ExamplesArrayList in JavaVector Class in JavaStack Class in JavaLinkedList in JavaQueue Interface In JavaPriorityQueue in JavaDeque interface in Java with ExampleArrayDeque in JavaSet in JavaHashSet in JavaLinkedHashSet in Java with ExamplesSortedSet Interface in Java with ExamplesNavigableSet in Java with ExamplesTreeSet in JavaMap Interface in JavaHashMap in Java with ExamplesHashtable in JavaLinkedHashMap in JavaSortedMap Interface in Java with ExamplesTreeMap in JavaMultithreadingMultithreading in JavaLifecycle and States of a Thread in JavaMain thread in JavaJava Thread Priority in MultithreadingSynchronization in JavaFile HandlingFile Handling in Java with CRUD operationsJava.io.InputStream Class in JavaJava.io.OutputStream class in JavaJava.io.File Class in JavaFile Permissions in JavaCopying file using FileStreams in JavaDelete a file using JavaImprove Article Save Article Like Article Ways to read input from console in JavaDifficulty Level : EasyLast Updated : 30 Apr, 2021In Java, there are four different ways for reading input from the user in the command line environment(console). 1.Using Buffered Reader ClassThis is the Java classical method to take input, Introduced in JDK1.0. This method is used by wrapping the System.in (standard input stream) in an InputStreamReader which is wrapped in a BufferedReader, we can read input from the user in the command line. The input is buffered for efficient reading.The wrapping code is hard to remember.Implementation:Java// Java program to demonstrate BufferedReaderimport java.io.BufferedReader;import java.io.IOException;import java.io.InputStreamReader;public class Test { public static void main(String[] args) throws IOException { // Enter data using BufferReader BufferedReader reader = new BufferedReader( new InputStreamReader(System.in)); // Reading data using readLine String name = reader.readLine(); // Printing the read line System.out.println(name); }} Input: GeekOutput: GeekNote: To read other types, we use functions like Integer.parseInt(), Double.parseDouble(). To read multiple values, we use split(). 2. Using Scanner Class This is probably the most preferred method to take input. The main purpose of the Scanner class is to parse primitive types and strings using regular expressions, however, it is also can be used to read input from the user in the command line. Convenient methods for parsing primitives (nextInt(), nextFloat(), …) from the tokenized input.Regular expressions can be used to find tokens.The reading methods are not synchronizedTo see more differences, please see this article. Java// Java program to demonstrate working of Scanner in Javaimport java.util.Scanner; class GetInputFromUser { public static void main(String args[]) { // Using Scanner for Getting Input from User Scanner in = new Scanner(System.in); String s = in.nextLine(); System.out.println("You entered string " + s); int a = in.nextInt(); System.out.println("You entered integer " + a); float b = in.nextFloat(); System.out.println("You entered float " + b); // closing scanner in.close(); }} Input: GeeksforGeeks 12 3.4Output: You entered string GeeksforGeeks You entered integer 12 You entered float 3.43. Using Console Class It has been becoming a preferred way for reading user’s input from the command line. In addition, it can be used for reading password-like input without echoing the characters entered by the user; the format string syntax can also be used (like System.out.printf()). Advantages: Reading password without echoing the entered characters.Reading methods are synchronized.Format string syntax can be used.Does not work in non-interactive environment (such as in an IDE). Java// Java program to demonstrate working of System.console()// Note that this program does not work on IDEs as// System.console() may require consolepublic class Sample { public static void main(String[] args) { // Using Console to input data from user String name = System.console().readLine(); System.out.println("You entered string " + name); }} Input: GeeksforGeeksOutput: You entered string GeeksforGeeks4. Using Command line argument Most used user input for competitive coding. The command-line arguments are stored in the String format. The parseInt method of the Integer class converts string argument into Integer. Similarly, for float and others during execution. The usage of args[] comes into existence in this input form. The passing of information takes place during the program run. The command line is given to args[]. These programs have to be run on cmd. Code: Java// Program to check for command line argumentsclass Hello { public static void main(String[] args) { // check if length of args array is // greater than 0 if (args.length > 0) { System.out.println( "The command line arguments are:"); // iterating the args array and printing // the command line arguments for (String val : args) System.out.println(val); } else System.out.println("No command line " + "arguments found."); }} Command Line Arguments: javac GFG1.java java Main Hello WorldOutput: The command line arguments are: Hello WorldPlease refer this for more faster ways of reading input. This article is contributed by D Raj Ranu. If you like GeeksforGeeks and would like to contribute, you can also write an article using contribute.geeksforgeeks.org or mail your article to contribute@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above. My Personal Notes arrow_drop_upSave LikePreviousOperators in JavaNext Decision Making in Java (if, if-else, switch, break, continue, jump)Recommended ArticlesPage :How to read user or console input in PHP ?28, Jan 20Taking input from console in Python03, Sep 18Java.io.Console class in Java09, Jan 17Console printf(String, Object) method in Java with Examples10, Jun 20Console readPassword() method in Java with Examples10, Jun 20Console flush() method in Java with Examples10, Jun 20Console reader() method in Java with Examples10, Jun 20Console format(String, Object) method in Java with Examples10, Jun 20Console writer() method in Java with Examples10, Jun 20Console readLine() method in Java with Examples10, Jun 20Java Program to Write an Array of Strings to the Output Console26, Oct 20How to Print Colored Text in Java Console?11, Aug 21Console.TreatControlCAsInput Property in C# with examples13, Mar 19Laravel | Artisan Console Introduction29, Nov 19How to print JavaScript console with PHP ?16, Oct 19How to configure node.js console font ?27, Feb 20Colorizing text and console background in C++27, Jan 21Difference between process.stdout.write and console.log in Node.js16, Feb 21How to fill all input fields automatically from database by entering input in one textbox using PHP ?08, Feb 21Java program to read all mobile numbers present in given file11, Dec 17How to make an ArrayList read only in Java31, Oct 18How to Read and Print an Integer value in Java04, Dec 18Reader read(char[]) method in Java with Examples06, Feb 19Reader read(char[], int, int) method in Java with Examples06, Feb 19Article Contributed By :GeeksforGeeksVote for difficultyCurrent difficulty : EasyEasy Normal Medium Hard ExpertImproved By :sanjayrajputcsepallabipami32itsyoursumitArticle Tags :Java-I/OJavaSchool ProgrammingTechnical ScripterPractice Tags :JavaReport IssueWriting code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load CommentsWhat's NewJava Backend Development- LIVE ClassesView DetailsComplete Interview PreparationView DetailsSystem Design-Live Classes for Working ProfessionalsView DetailsMost popular in JavaObject Oriented Programming (OOPs) Concept in JavaSplit() String method in Java with examplesArrays.sort() in Java with examplesReverse a string in JavaHow to iterate any Map in JavaMost visited in School ProgrammingPython DictionaryArrays in C/C++Reverse a string in JavaInheritance in C++C++ Data Types× 5th Floor, A-118,Sector-136, Noida, Uttar Pradesh - 201305 feedback@geeksforgeeks.orgCompanyAbout UsCareersPrivacy PolicyContact UsCopyright PolicyLearnAlgorithmsData StructuresLanguagesCS SubjectsVideo TutorialsWeb DevelopmentWeb TutorialsHTMLCSSJavaScriptBootstrapContributeWrite an ArticleWrite Interview ExperienceInternshipsVideos@geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It ! Start Your Coding Journey Now!Login Register