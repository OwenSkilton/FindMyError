Analysis of Algorithms | Set 1 (Asymptotic Analysis) - GeeksforGeeksSkip to content TutorialsPractice DS & Algo.Must Do QuestionsDSA Topic-wiseDSA Company-wiseAlgorithmsAnalysis of AlgorithmsAsymptotic AnalysisWorst, Average and Best CasesAsymptotic NotationsLittle o and little omega notationsLower and Upper Bound TheoryAnalysis of LoopsSolving RecurrencesAmortized AnalysisWhat does 'Space Complexity' mean ?Pseudo-polynomial AlgorithmsPolynomial Time Approximation SchemeA Time Complexity QuestionSearching AlgorithmsSorting AlgorithmsGraph AlgorithmsPattern SearchingGeometric AlgorithmsMathematicalBitwise AlgorithmsRandomized AlgorithmsGreedy AlgorithmsDynamic ProgrammingDivide and ConquerBacktrackingBranch and BoundAll AlgorithmsData StructuresArraysLinked ListStackQueueBinary TreeBinary Search TreeHeapHashingGraphAdvanced Data StructureMatrixStringsAll Data StructuresInterview CornerCompany PreparationTop TopicsPractice Company QuestionsInterview ExperiencesExperienced InterviewsInternship InterviewsCompetititve ProgrammingDesign PatternsSystem Design TutorialMultiple Choice QuizzesLanguagesCC++JavaPythonC#JavaScriptjQuerySQLPHPScalaPerlGo LanguageHTMLCSSKotlinCS SubjectsMathematicsOperating SystemDBMSComputer NetworksComputer Organization and ArchitectureTheory of ComputationCompiler DesignDigital LogicSoftware EngineeringGATEGATE Computer Science NotesLast Minute NotesGATE CS Solved PapersGATE CS Original Papers and Official KeysGATE 2021 DatesGATE CS 2021 SyllabusImportant Topics for GATE CSWeb TechnologiesHTMLCSSJavaScriptAngularJSReactJSNodeJSBootstrapjQueryPHPSoftware DesignsSoftware Design PatternsSystem Design TutorialSchool LearningSchool ProgrammingMathematicsNumber SystemAlgebraTrigonometryStatisticsProbabilityGeometryMensurationCalculusMaths Notes (Class 8-12)Class 8 NotesClass 9 NotesClass 10 NotesClass 11 NotesClass 12 NotesNCERT SolutionsClass 8 Maths SolutionClass 9 Maths SolutionClass 10 Maths SolutionClass 11 Maths SolutionClass 12 Maths SolutionRD Sharma SolutionsClass 8 Maths SolutionClass 9 Maths SolutionClass 10 Maths SolutionClass 11 Maths SolutionClass 12 Maths SolutionPhysics Notes (Class 8-11)Class 8 NotesClass 9 NotesClass 10 NotesClass 11 NotesISRO CSISRO CS Solved PapersISRO CS Original Papers and Official KeysISRO CS Syllabus for Scientist/Engineer ExamUGC NET CSUGC NET CS Notes Paper IIUGC NET CS Notes Paper IIIUGC NET CS Solved PapersStudentCampus Ambassador ProgramSchool Ambassador ProgramProjectGeek of the MonthCampus Geek of the MonthPlacement CourseCompetititve ProgrammingTestimonialsGeek on the TopCareersInternshipJobsApply for JobsPost a JobCourses WriteCome write articles for us and get featuredPracticeLearn and code with the best industry expertsPremiumGet access to ad-free content, doubt assistance and more!JobsCome and find your dream job with usGeeks DigestQuizzesGeeks CampusGblog ArticlesIDECampus Mantri HomeSaved VideosCoursesGBlogPuzzlesWhat's New ? Change Language Data StructuresAlgorithmsInterview PreparationTopic-wise PracticeC++JavaPythonCompetitive ProgrammingMachine LearningWeb DevelopmentPuzzlesProject IdeasGFG School Related Articles ▲Related ArticlesAnalysis of Algorithms | Set 1 (Asymptotic Analysis)Analysis of Algorithms | Set 2 (Worst, Average and Best Cases)Analysis of Algorithms | Set 3 (Asymptotic Notations)Analysis of Algorithms | Set 4 (Analysis of Loops)Analysis of Algorithm | Set 4 (Solving Recurrences)Analysis of Algorithm | Set 5 (Amortized Analysis Introduction)What does ‘Space Complexity’ mean?Pseudo-polynomial AlgorithmsNP-Completeness | Set 1 (Introduction)A Time Complexity QuestionMerge SortQuickSortHeapSortBinary HeapTime Complexity of building a heapApplications of Heap Data StructureBinomial HeapFibonacci Heap | Set 1 (Introduction)Fibonacci Heap – Insertion and UnionFibonacci Heap – Deletion, Extract min and Decrease keyLeftist Tree / Leftist HeapK-ary HeapIterative HeapSortPractice Questions on Time Complexity AnalysisUnderstanding Time Complexity with Simple ExamplesComplexity of different operations in Binary tree, Binary Search Tree and AVL treeTable of ContentsAnalysis of Algorithms | Set 1 (Asymptotic Analysis)Analysis of Algorithms | Set 2 (Worst, Average and Best Cases)Analysis of Algorithms | Set 3 (Asymptotic Notations)Analysis of Algorithms | Set 4 (Analysis of Loops)Analysis of Algorithm | Set 4 (Solving Recurrences)Analysis of Algorithm | Set 5 (Amortized Analysis Introduction)What does ‘Space Complexity’ mean?Pseudo-polynomial AlgorithmsNP-Completeness | Set 1 (Introduction)A Time Complexity QuestionMerge SortQuickSortHeapSortBinary HeapTime Complexity of building a heapApplications of Heap Data StructureBinomial HeapFibonacci Heap | Set 1 (Introduction)Fibonacci Heap – Insertion and UnionFibonacci Heap – Deletion, Extract min and Decrease keyLeftist Tree / Leftist HeapK-ary HeapIterative HeapSortPractice Questions on Time Complexity AnalysisUnderstanding Time Complexity with Simple ExamplesComplexity of different operations in Binary tree, Binary Search Tree and AVL treeImprove Article Save Article Like Article Analysis of Algorithms | Set 1 (Asymptotic Analysis)Difficulty Level : BasicLast Updated : 09 Nov, 2020Why performance analysis?There are many important things that should be taken care of, like user friendliness, modularity, security, maintainability, etc. Why to worry about performance?The answer to this is simple, we can have all the above things only if we have performance. So performance is like currency through which we can buy all the above things. Another reason for studying performance is – speed is fun!To summarize, performance == scale. Imagine a text editor that can load 1000 pages, but can spell check 1 page per minute OR an image editor that takes 1 hour to rotate your image 90 degrees left OR … you get it. If a software feature can not cope with the scale of tasks users need to perform – it is as good as dead.Given two algorithms for a task, how do we find out which one is better?One naive way of doing this is – implement both the algorithms and run the two programs on your computer for different inputs and see which one takes less time. There are many problems with this approach for analysis of algorithms.1) It might be possible that for some inputs, first algorithm performs better than the second. And for some inputs second performs better.2) It might also be possible that for some inputs, first algorithm perform better on one machine and the second works better on other machine for some other inputs.Asymptotic Analysis is the big idea that handles above issues in analyzing algorithms. In Asymptotic Analysis, we evaluate the performance of an algorithm in terms of input size (we don’t measure the actual running time). We calculate, how the time (or space) taken by an algorithm increases with the input size.For example, let us consider the search problem (searching a given item) in a sorted array. One way to search is Linear Search (order of growth is linear) and the other way is Binary Search (order of growth is logarithmic). To understand how Asymptotic Analysis solves the above mentioned problems in analyzing algorithms, let us say we run the Linear Search on a fast computer A and Binary Search on a slow computer B and we pick the constant values for the two computers so that it tells us exactly how long it takes for the given machine to perform the search in seconds. Let’s say the constant for A is 0.2 and the constant for B is 1000 which means that A is 5000 times more powerful than B. For small values of input array size n, the fast computer may take less time. But, after a certain value of input array size, the Binary Search will definitely start taking less time compared to the Linear Search even though the Binary Search is being run on a slow machine. The reason is the order of growth of Binary Search with respect to input size is logarithmic while the order of growth of Linear Search is linear. So the machine dependent constants can always be ignored after a certain value of input size.Here are some running times for this example:Linear Search running time in seconds on A: 0.2 * nBinary Search running time in seconds on B: 1000*log(n)------------------------------------------------ |n | Running time on A | Running time on B | ------------------------------------------------- |10 | 2 sec | ~ 1 h | ------------------------------------------------- |100 | 20 sec | ~ 1.8 h | ------------------------------------------------- |10^6 | ~ 55.5 h | ~ 5.5 h | ------------------------------------------------- |10^9 | ~ 6.3 years | ~ 8.3 h | ------------------------------------------------- Does Asymptotic Analysis always work?Asymptotic Analysis is not perfect, but that’s the best way available for analyzing algorithms. For example, say there are two sorting algorithms that take 1000nLogn and 2nLogn time respectively on a machine. Both of these algorithms are asymptotically same (order of growth is nLogn). So, With Asymptotic Analysis, we can’t judge which one is better as we ignore constants in Asymptotic Analysis.Also, in Asymptotic analysis, we always talk about input sizes larger than a constant value. It might be possible that those large inputs are never given to your software and an algorithm which is asymptotically slower, always performs better for your particular situation. So, you may end up choosing an algorithm that is Asymptotically slower but faster for your software.Next – Analysis of Algorithms | Set 2 (Worst, Average and Best Cases)References:MIT’s Video lecture 1 on Introduction to Algorithms.Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.My Personal Notes arrow_drop_upSave LikeNext Analysis of Algorithms | Set 2 (Worst, Average and Best Cases)Recommended ArticlesPage :Analysis of Algorithms | Set 3 (Asymptotic Notations)26, Oct 13Asymptotic Analysis and comparison of sorting algorithms28, Dec 16Guidelines for asymptotic analysis27, May 21Properties of Asymptotic Notations06, Sep 19Asymptotic Notations and how to calculate them11, Jul 21Analysis of Algorithms | Set 4 (Analysis of Loops)11, Feb 14Analysis of Algorithms | Big-O analysis28, Feb 18Analysis of Algorithm | Set 5 (Amortized Analysis Introduction)23, Sep 14Analysis of Algorithms | Set 5 (Practice Problems)02, May 17Algorithms Sample Questions | Set 3 | Time Order Analysis27, May 19Analysis of Algorithms | Set 2 (Worst, Average and Best Cases)19, Feb 12Analysis of algorithms | little o and little omega notations14, Aug 17Analysis of Algorithms | Big - Θ (Big Theta) Notation11, Jul 21Analysis of Algorithms | Big - Ω (Big- Omega) Notation11, Jul 21Analysis of Algorithm | Set 4 (Solving Recurrences)13, Feb 14Practice Questions on Time Complexity Analysis12, Dec 17Analysis of different sorting techniques29, Jan 18Complexity Analysis of Binary Search29, May 19Difference between Posteriori and Priori analysis07, Aug 19Complexity analysis of various operations of Binary Min Heap26, Jun 20What is algorithm and why analysis of it is important?12, Jan 21Prune-and-Search | A Complexity Analysis Overview19, Jul 21Amortized analysis for increment in counter23, Mar 18Examples of Big-O analysis23, Nov 20Article Contributed By :GeeksforGeeksVote for difficultyCurrent difficulty : BasicEasy Normal Medium Hard ExpertImproved By :Danail Kozhuharovbiplab_prasadBenceAmentArticle Tags :AnalysisArticlesReport IssueWriting code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load CommentsWhat's NewComplete Interview PreparationView DetailsSystem Design-Live Classes for Working ProfessionalsView DetailsData Structures & Algorithms- Self Paced CourseView DetailsMost popular in AnalysisAnalysis of Algorithms | Big-O analysisDifference between Big Oh, Big Omega and Big ThetaTime Complexity and Space ComplexityAnalysis of different sorting techniquesTail RecursionMost visited in ArticlesTree Traversals (Inorder, Preorder and Postorder)find command in Linux with examplesSQL | Join (Inner, Left, Right and Full Joins)How to write a Pseudo Code?Understanding "extern" keyword in C× 5th Floor, A-118,Sector-136, Noida, Uttar Pradesh - 201305 feedback@geeksforgeeks.orgCompanyAbout UsCareersPrivacy PolicyContact UsCopyright PolicyLearnAlgorithmsData StructuresLanguagesCS SubjectsVideo TutorialsWeb DevelopmentWeb TutorialsHTMLCSSJavaScriptBootstrapContributeWrite an ArticleWrite Interview ExperienceInternshipsVideos@geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It ! Start Your Coding Journey Now!Login Register