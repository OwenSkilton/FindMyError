LinkedHashMap in Java - GeeksforGeeksSkip to content TutorialsPractice DS & Algo.Must Do QuestionsDSA Topic-wiseDSA Company-wiseAlgorithmsAnalysis of AlgorithmsAsymptotic AnalysisWorst, Average and Best CasesAsymptotic NotationsLittle o and little omega notationsLower and Upper Bound TheoryAnalysis of LoopsSolving RecurrencesAmortized AnalysisWhat does 'Space Complexity' mean ?Pseudo-polynomial AlgorithmsPolynomial Time Approximation SchemeA Time Complexity QuestionSearching AlgorithmsSorting AlgorithmsGraph AlgorithmsPattern SearchingGeometric AlgorithmsMathematicalBitwise AlgorithmsRandomized AlgorithmsGreedy AlgorithmsDynamic ProgrammingDivide and ConquerBacktrackingBranch and BoundAll AlgorithmsData StructuresArraysLinked ListStackQueueBinary TreeBinary Search TreeHeapHashingGraphAdvanced Data StructureMatrixStringsAll Data StructuresInterview CornerCompany PreparationTop TopicsPractice Company QuestionsInterview ExperiencesExperienced InterviewsInternship InterviewsCompetititve ProgrammingDesign PatternsSystem Design TutorialMultiple Choice QuizzesLanguagesCC++JavaPythonC#JavaScriptjQuerySQLPHPScalaPerlGo LanguageHTMLCSSKotlinCS SubjectsMathematicsOperating SystemDBMSComputer NetworksComputer Organization and ArchitectureTheory of ComputationCompiler DesignDigital LogicSoftware EngineeringGATEGATE Computer Science NotesLast Minute NotesGATE CS Solved PapersGATE CS Original Papers and Official KeysGATE 2021 DatesGATE CS 2021 SyllabusImportant Topics for GATE CSWeb TechnologiesHTMLCSSJavaScriptAngularJSReactJSNodeJSBootstrapjQueryPHPSoftware DesignsSoftware Design PatternsSystem Design TutorialSchool LearningSchool ProgrammingMathematicsNumber SystemAlgebraTrigonometryStatisticsProbabilityGeometryMensurationCalculusMaths Notes (Class 8-12)Class 8 NotesClass 9 NotesClass 10 NotesClass 11 NotesClass 12 NotesNCERT SolutionsClass 8 Maths SolutionClass 9 Maths SolutionClass 10 Maths SolutionClass 11 Maths SolutionClass 12 Maths SolutionRD Sharma SolutionsClass 8 Maths SolutionClass 9 Maths SolutionClass 10 Maths SolutionClass 11 Maths SolutionClass 12 Maths SolutionPhysics Notes (Class 8-11)Class 8 NotesClass 9 NotesClass 10 NotesClass 11 NotesISRO CSISRO CS Solved PapersISRO CS Original Papers and Official KeysISRO CS Syllabus for Scientist/Engineer ExamUGC NET CSUGC NET CS Notes Paper IIUGC NET CS Notes Paper IIIUGC NET CS Solved PapersStudentCampus Ambassador ProgramSchool Ambassador ProgramProjectGeek of the MonthCampus Geek of the MonthPlacement CourseCompetititve ProgrammingTestimonialsGeek on the TopCareersInternshipJobsApply for JobsPost a JobCourses WriteCome write articles for us and get featuredPracticeLearn and code with the best industry expertsPremiumGet access to ad-free content, doubt assistance and more!JobsCome and find your dream job with usGeeks DigestQuizzesGeeks CampusGblog ArticlesIDECampus Mantri HomeSaved VideosCoursesGBlogPuzzlesWhat's New ? Change Language Data StructuresAlgorithmsInterview PreparationTopic-wise PracticeC++JavaPythonCompetitive ProgrammingMachine LearningWeb DevelopmentPuzzlesProject IdeasGFG School Related Articles ▲Related ArticlesBasics of JavaJava TutorialIntroduction to JavaSimilarities and Difference between Java and C++Setting up the environment in JavaJava Basic SyntaxJava Hello World ProgramDifferences between JDK, JRE and JVMHow JVM Works – JVM Architecture?Java IdentifiersVariables & DataTypes in JavaVariables in JavaScope of Variables In JavaData types in JavaOperators in JavaOperators in JavaJava Arithmetic Operators with ExamplesJava Assignment Operators with ExamplesJava Unary Operator with ExamplesJava Relational Operators with ExamplesJava Logical Operators with ExamplesJava Ternary Operator with ExamplesBitwise Operators in JavaPackages in JavaPackages In JavaFlow Control in JavaDecision Making in Java (if, if-else, switch, break, continue, jump)Java if statement with ExamplesJava if-else statement with ExamplesJava if-else-if ladder with ExamplesLoops in JavaLoops in JavaJava For loop with ExamplesJava while loop with ExamplesJava do-while loop with ExamplesFor-each loop in JavaJump Statements in JavaContinue Statement in JavaBreak statement in Javareturn keyword in JavaArrays in JavaArrays in JavaMultidimensional Arrays in JavaJagged Array in JavaStrings in JavaStrings in JavaString class in Java | Set 1StringBuffer class in JavaStringBuilder Class in Java with ExamplesOOPS in JavaObject Oriented Programming (OOPs) Concept in JavaClasses and Objects in JavaMethods in JavaAccess Modifiers in JavaWrapper Classes in JavaNeed of Wrapper Classes in JavaConstructors in JavaConstructors in JavaCopy Constructor in JavaConstructor Chaining In Java with ExamplesPrivate Constructors and Singleton Classes in JavaInheritance & Polymorphism in JavaInheritance in JavaJava and Multiple InheritanceComparison of Inheritance in C++ and JavaPolymorphism in JavaDynamic Method Dispatch or Runtime Polymorphism in JavaMethod overloading & OveridingOverloading in JavaDifferent ways of Method Overloading in JavaOverriding in JavaDifference Between Method Overloading and Method Overriding in JavaAbstraction & EncapsulationAbstraction in JavaAbstract Classes in JavaDifference between Abstract Class and Interface in JavaEncapsulation in JavaInterfaces in JavaInterfaces in JavaNested Interface in JavaMarker interface in JavaFunctional Interfaces in JavaComparator Interface in Java with ExamplesKeywords in JavaList of all Java KeywordsSuper Keyword in Javafinal Keyword in Javaabstract keyword in javastatic Keyword in Java‘this’ reference in Javaenum in JavaException Handling in JavaExceptions in JavaTypes of Exception in Java with ExamplesChecked vs Unchecked Exceptions in JavaTry, catch, throw and throws in JavaFlow control in try catch finally in Javathrow and throws in JavaUser-defined Custom Exception in JavaCollection FrameworkCollections in JavaCollections Class in JavaList Interface in Java with ExamplesArrayList in JavaVector Class in JavaStack Class in JavaLinkedList in JavaQueue Interface In JavaPriorityQueue in JavaDeque interface in Java with ExampleArrayDeque in JavaSet in JavaHashSet in JavaLinkedHashSet in Java with ExamplesSortedSet Interface in Java with ExamplesNavigableSet in Java with ExamplesTreeSet in JavaMap Interface in JavaHashMap in Java with ExamplesHashtable in JavaLinkedHashMap in JavaSortedMap Interface in Java with ExamplesTreeMap in JavaMulti-threading in JavaMultithreading in JavaLifecycle and States of a Thread in JavaMain thread in JavaJava Thread Priority in MultithreadingThread Pools in JavaSynchronization in JavaMethod and Block Synchronization in JavaImportance of Thread Synchronization in JavaThread Safety and how to achieve it in JavaTable of ContentsBasics of JavaJava TutorialIntroduction to JavaSimilarities and Difference between Java and C++Setting up the environment in JavaJava Basic SyntaxJava Hello World ProgramDifferences between JDK, JRE and JVMHow JVM Works – JVM Architecture?Java IdentifiersVariables & DataTypes in JavaVariables in JavaScope of Variables In JavaData types in JavaOperators in JavaOperators in JavaJava Arithmetic Operators with ExamplesJava Assignment Operators with ExamplesJava Unary Operator with ExamplesJava Relational Operators with ExamplesJava Logical Operators with ExamplesJava Ternary Operator with ExamplesBitwise Operators in JavaPackages in JavaPackages In JavaFlow Control in JavaDecision Making in Java (if, if-else, switch, break, continue, jump)Java if statement with ExamplesJava if-else statement with ExamplesJava if-else-if ladder with ExamplesLoops in JavaLoops in JavaJava For loop with ExamplesJava while loop with ExamplesJava do-while loop with ExamplesFor-each loop in JavaJump Statements in JavaContinue Statement in JavaBreak statement in Javareturn keyword in JavaArrays in JavaArrays in JavaMultidimensional Arrays in JavaJagged Array in JavaStrings in JavaStrings in JavaString class in Java | Set 1StringBuffer class in JavaStringBuilder Class in Java with ExamplesOOPS in JavaObject Oriented Programming (OOPs) Concept in JavaClasses and Objects in JavaMethods in JavaAccess Modifiers in JavaWrapper Classes in JavaNeed of Wrapper Classes in JavaConstructors in JavaConstructors in JavaCopy Constructor in JavaConstructor Chaining In Java with ExamplesPrivate Constructors and Singleton Classes in JavaInheritance & Polymorphism in JavaInheritance in JavaJava and Multiple InheritanceComparison of Inheritance in C++ and JavaPolymorphism in JavaDynamic Method Dispatch or Runtime Polymorphism in JavaMethod overloading & OveridingOverloading in JavaDifferent ways of Method Overloading in JavaOverriding in JavaDifference Between Method Overloading and Method Overriding in JavaAbstraction & EncapsulationAbstraction in JavaAbstract Classes in JavaDifference between Abstract Class and Interface in JavaEncapsulation in JavaInterfaces in JavaInterfaces in JavaNested Interface in JavaMarker interface in JavaFunctional Interfaces in JavaComparator Interface in Java with ExamplesKeywords in JavaList of all Java KeywordsSuper Keyword in Javafinal Keyword in Javaabstract keyword in javastatic Keyword in Java‘this’ reference in Javaenum in JavaException Handling in JavaExceptions in JavaTypes of Exception in Java with ExamplesChecked vs Unchecked Exceptions in JavaTry, catch, throw and throws in JavaFlow control in try catch finally in Javathrow and throws in JavaUser-defined Custom Exception in JavaCollection FrameworkCollections in JavaCollections Class in JavaList Interface in Java with ExamplesArrayList in JavaVector Class in JavaStack Class in JavaLinkedList in JavaQueue Interface In JavaPriorityQueue in JavaDeque interface in Java with ExampleArrayDeque in JavaSet in JavaHashSet in JavaLinkedHashSet in Java with ExamplesSortedSet Interface in Java with ExamplesNavigableSet in Java with ExamplesTreeSet in JavaMap Interface in JavaHashMap in Java with ExamplesHashtable in JavaLinkedHashMap in JavaSortedMap Interface in Java with ExamplesTreeMap in JavaMulti-threading in JavaMultithreading in JavaLifecycle and States of a Thread in JavaMain thread in JavaJava Thread Priority in MultithreadingThread Pools in JavaSynchronization in JavaMethod and Block Synchronization in JavaImportance of Thread Synchronization in JavaThread Safety and how to achieve it in JavaImprove Article Save Article Like Article LinkedHashMap in JavaDifficulty Level : EasyLast Updated : 06 Dec, 2021The LinkedHashMap Class is just like HashMap with an additional feature of maintaining an order of elements inserted into it. HashMap provided the advantage of quick insertion, search, and deletion but it never maintained the track and order of insertion which the LinkedHashMap provides where the elements can be accessed in their insertion order. Important Features of a LinkedHashMap are listed as follows:A LinkedHashMap contains values based on the key. It implements the Map interface and extends the HashMap class.It contains only unique elements.It may have one null key and multiple null values.It is non-synchronized.It is the same as HashMap with an additional feature that it maintains insertion order. For example, when we run the code with a HashMap, we get a different order of elements.Declaration:public class LinkedHashMap<K,​V> extends HashMap<K,​V> implements Map<K,​V>Here, K is the key Object type and V is the value Object typeK – The type of the keys in the map.V – The type of values mapped in the map.It implements Map<K, V> interface, and extends HashMap<K, V> class. Though the Hierarchy of LinkedHashMap is as depicted in below media as follows:How LinkedHashMap Work Internally?A LinkedHashMap is an extension of the HashMap class and it implements the Map interface. Therefore, the class is declared as:public class LinkedHashMap extends HashMap implements Map In this class, the data is stored in the form of nodes. The implementation of the LinkedHashMap is very similar to a doubly-linked list. Therefore, each node of the LinkedHashMap is represented as:Hash: All the input keys are converted into a hash which is a shorter form of the key so that the search and insertion are faster.Key: Since this class extends HashMap, the data is stored in the form of a key-value pair. Therefore, this parameter is the key to the data.Value: For every key, there is a value associated with it. This parameter stores the value of the keys. Due to generics, this value can be of any form.Next: Since the LinkedHashMap stores the insertion order, this contains the address to the next node of the LinkedHashMap.Previous: This parameter contains the address to the previous node of the LinkedHashMap.Synchronized LinkedHashMapThe implementation of LinkedHashMap not synchronized. If multiple threads access a linked hash map concurrently, and at least one of the threads modifies the map structurally, it must be synchronized externally. This is typically accomplished by synchronizing on some object that naturally encapsulates the map. If no such object exists, the map should be “wrapped” using the Collections.synchronizedMap method. This is best done at creation time, to prevent accidental unsynchronized access to the map:Map m = Collections.synchronizedMap(new LinkedHashMap(...));Constructors of LinkedHashMap ClassIn order to create a LinkedHashMap, we need to create an object of the LinkedHashMap class. The LinkedHashMap class consists of various constructors that allow the possible creation of the ArrayList. The following are the constructors available in this class:1. LinkedHashMap(): This is used to construct a default LinkedHashMap constructor.LinkedHashMap<K, V> lhm = new LinkedHashMap<K, V>();2. LinkedHashMap(int capacity): It is used to initialize a particular LinkedHashMap with a specified capacity.LinkedHashMap<K, V> lhm = new LinkedHashMap<K, V>(int capacity);3. LinkedHashMap(Map<? extends K,​? extends V> map): It is used to initialize a particular LinkedHashMap with the elements of the specified map.LinkedHashMap<K, V> lhm = new LinkedHashMap<K, V>(Map<? extends K,​? extends V> map);4. LinkedHashMap(int capacity, float fillRatio): It is used to initialize both the capacity and fill ratio for a LinkedHashMap. A fillRatio also called as loadFactor is a metric that determines when to increase the size of the LinkedHashMap automatically. By default, this value is 0.75 which means that the size of the map is increased when the map is 75% full.LinkedHashMap<K, V> lhm = new LinkedHashMap<K, V>(int capacity, float fillRatio);5. LinkedHashMap(int capacity, float fillRatio, boolean Order): This constructor is also used to initialize both the capacity and fill ratio for a LinkedHashMap along with whether to follow the insertion order or not.LinkedHashMap<K, V> lhm = new LinkedHashMap<K, V>(int capacity, float fillRatio, boolean Order);Here, For the Order attribute, true is passed for the last access order and false is passed for the insertion order. Methods of LinkedHashMap METHODDESCRIPTIONcontainsValue​(Object value)Returns true if this map maps one or more keys to the specified value.entrySet()Returns a Set view of the mappings contained in this map.get​(Object key)Returns the value to which the specified key is mapped, or null if this map contains no mapping for the key.keySet()Returns a Set view of the keys contained in this map.removeEldestEntry​(Map.Entry<K,​V> eldest)Returns true if this map should remove its eldest entry.values()Returns a Collection view of the values contained in this map.Application: Since the LinkedHashMap makes use of Doubly LinkedList to maintain the insertion order, we can implement LRU Cache functionality by overriding the removeEldestEntry() method to impose a policy for automatically removing stale when new mappings are added to the map. This lets you expire data using some criteria that you define.Example:Java// Java Program to Demonstrate Working of LinkedHashMap // Importing required classesimport java.util.*; // LinkedHashMapExamplepublic class GFG { // Main driver method public static void main(String a[]) { // Creating an empty LinkedHashMap LinkedHashMap<String, String> lhm = new LinkedHashMap<String, String>(); // Adding entries in Map // using put() method lhm.put("one", "practice.geeksforgeeks.org"); lhm.put("two", "code.geeksforgeeks.org"); lhm.put("four", "quiz.geeksforgeeks.org"); // Printing all entries inside Map System.out.println(lhm); // Note: It prints the elements in same order // as they were inserted // Getting and printing value for a specic key System.out.println("Getting value for key 'one': " + lhm.get("one")); // Getting size of Map using size() method System.out.println("Size of the map: " + lhm.size()); // Checking whether Map is empty or not System.out.println("Is map empty? " + lhm.isEmpty()); // Using containsKey() method to check for a key System.out.println("Contains key 'two'? " + lhm.containsKey("two")); // Using containsKey() method to check for a value System.out.println( "Contains value 'practice.geeks" + "forgeeks.org'? " + lhm.containsValue("practice" + ".geeksforgeeks.org")); // Removing entry using remove() method System.out.println("delete element 'one': " + lhm.remove("one")); // Printing mappings to the console System.out.println("Mappings of LinkedHashMap : " + lhm); }}Output{one=practice.geeksforgeeks.org, two=code.geeksforgeeks.org, four=quiz.geeksforgeeks.org} Getting value for key 'one': practice.geeksforgeeks.org Size of the map: 3 Is map empty? false Contains key 'two'? true Contains value 'practice.geeksforgeeks.org'? true delete element 'one': practice.geeksforgeeks.org Mappings of LinkedHashMap : {two=code.geeksforgeeks.org, four=quiz.geeksforgeeks.org} Various operations on the HashMap classLet’s see how to perform a few frequently used operations on the LinkedHashMap.Operation 1: Adding ElementsIn order to add an element to the LinkedHashMap, we can use the put() method. This is different from HashMap because in HashMap, the insertion order is not retained but it is retained in the LinkedHashMap. ExampleJava// Java Program to Demonstrate Adding// Elements to a LinkedHashMap // Importing required classesimport java.util.*; // Main class// AddElementsToLinkedHashMapclass GFG { // Main driver method public static void main(String args[]) { // Initialization of a LinkedHashMap // using Generics LinkedHashMap<Integer, String> hm1 = new LinkedHashMap<Integer, String>(); // Add mappings to Map // using put() method hm1.put(3, "Geeks"); hm1.put(2, "For"); hm1.put(1, "Geeks"); // Printing mappings to the console System.out.println("Mappings of LinkedHashMap : " + hm1); }}OutputMappings of LinkedHashMap : {3=Geeks, 2=For, 1=Geeks}Operation 2: Changing ElementsAfter adding the elements if we wish to change the element, it can be done by again adding the element with the put() method. Since the elements in the treemap are indexed using the keys, the value of the key can be changed by simply inserting the updated value for the key for which we wish to change.ExampleJava// Java Program to Demonstrate Updation of Elements// of LinkedHashMap import java.util.*; // Main class// UpdatingLinkedHashMapclass GFG { // Main driver method public static void main(String args[]) { // Initialization of a LinkedHashMap // using Generics LinkedHashMap<Integer, String> hm = new LinkedHashMap<Integer, String>(); // Inserting mappings into Map // using put() method hm.put(3, "Geeks"); hm.put(2, "Geeks"); hm.put(1, "Geeks"); // Printing mappings to the console System.out.println("Initial map : " + hm); // Updating the value with key 2 hm.put(2, "For"); // Printing the updated Map System.out.println("Updated Map : " + hm); }}OutputInitial map : {3=Geeks, 2=Geeks, 1=Geeks} Updated Map : {3=Geeks, 2=For, 1=Geeks}Operation 3: Removing ElementIn order to remove an element from the TreeMap, we can use the remove() method. This method takes the key value and removes the mapping for the key from this treemap if it is present in the map. Apart from that, we can also remove the first entered element from the map if the maximum size is defined.ExampleJava// Java program to Demonstrate Removal of Elements// from LinkedHashMap // Importing utility classesimport java.util.*; // Main class// RemovingMappingsFromLinkedHashMapclass GFG { // Main driver method public static void main(String args[]) { // Initialization of a LinkedHashMap // using Generics LinkedHashMap<Integer, String> hm = new LinkedHashMap<Integer, String>(); // Inserting the Elements // using put() method hm.put(3, "Geeks"); hm.put(2, "Geeks"); hm.put(1, "Geeks"); hm.put(4, "For"); // Printing the mappings to the console System.out.println("Initial Map : " + hm); // Removing the mapping with Key 4 hm.remove(4); // Printing the updated map System.out.println("Updated Map : " + hm); }}OutputInitial Map : {3=Geeks, 2=Geeks, 1=Geeks, 4=For} Updated Map : {3=Geeks, 2=Geeks, 1=Geeks}Operation 4: Iterating through the LinkedHashMapThere are multiple ways to iterate through the Map. The most famous way is to use a for-each loop and get the keys. The value of the key is found by using the getValue() method.ExampleJava// Java program to demonstrate// Iterating over LinkedHashMap // Importing required classesimport java.util.*; // Main class// IteratingOverLinkedHashMapclass GFG { // Main driver method public static void main(String args[]) { // Initialization of a LinkedHashMap // using Generics LinkedHashMap<Integer, String> hm = new LinkedHashMap<Integer, String>(); // Inserting elements into Map // using put() method hm.put(3, "Geeks"); hm.put(2, "For"); hm.put(1, "Geeks"); // For-each loop for traversal over Map for (Map.Entry<Integer, String> mapElement : hm.entrySet()) { Integer key = mapElement.getKey(); // Finding the value // using getValue() method String value = mapElement.getValue(); // Printing the key-value pairs System.out.println(key + " : " + value); } }}Output3 : Geeks 2 : For 1 : GeeksRelated Articles:LRU Cache ImplementationDifferences between TreeMap, HashMap, and LinkedHashMap in JavaAttention reader! Don’t stop learning now. Get hold of all the important Java Foundation and Collections concepts with the Fundamentals of Java and Java Collections Course at a student-friendly price and become industry ready. To complete your preparation from learning a language to DS Algo and many more, please refer Complete Interview Preparation Course.My Personal Notes arrow_drop_upSave LikePreviousHashtable in JavaNext SortedMap Interface in Java with ExamplesRecommended ArticlesPage :Differences between TreeMap, HashMap and LinkedHashMap in Java20, May 17LinkedHashMap clear() Method in Java25, Jun 18LinkedHashMap removeEldestEntry() Method in Java25, Jun 18LinkedHashMap and LinkedHashSet in Java11, Nov 18Print characters and their frequencies in order of occurrence using a LinkedHashMap in Java13, Aug 19How to Print all Mappings of the LinkedHashMap in Java?05, Dec 20How to Print all Keys of the LinkedHashMap in Java?16, Dec 20How to Convert LinkedHashMap to List in Java?16, Dec 20How to Iterate LinkedHashMap in Reverse Order in Java?16, Dec 20Java Program to Print LinkedHashMap Values05, Jan 21How to Check if LinkedHashMap Contains a value in Java?14, Dec 20How to Get All the Values of the LinkedHashMap in Java?14, Dec 20Convert ArrayList to LinkedHashMap in Java28, Dec 20How to Check if LinkedHashMap is Empty in Java?10, Dec 20How to Add Key-Value pairs to LinkedHashMap in Java?20, Dec 20Sort LinkedHashMap by Keys in Java10, Dec 20How to Convert all LinkedHashMap Values to a List in Java?16, Dec 20How to Get First or Last Entry from Java LinkedHashMap?05, Jan 21How to Convert LinkedHashMap to Two Arrays in Java?05, Jan 21How to Check the LinkedHashMap Size in Java?05, Jan 21How to Eliminate Duplicate User Defined Objects as a Key from Java LinkedHashMap?02, Jan 21Sort LinkedHashMap by Values using Comparable Interface in Java12, Jan 21Iterate through LinkedHashMap using an Iterator in Java03, Jan 21How to iterate LinkedHashMap in Java?18, Jan 21Article Contributed By :GeeksforGeeksVote for difficultyCurrent difficulty : EasyEasy Normal Medium Hard ExpertImproved By :Chinmoy Lenkanidhi_bietKaashyapMSKGaneshchowdharysadanalasolankimayankArticle Tags :Java-CollectionsJava-LinkedHashMapJavaPractice Tags :JavaJava-CollectionsReport IssueWriting code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load CommentsWhat's NewJava Backend Development- LIVE ClassesView DetailsComplete Interview PreparationView DetailsSystem Design-Live Classes for Working ProfessionalsView DetailsMost popular in JavaSplit() String method in Java with examplesArrays.sort() in Java with examplesReverse a string in JavaInitialize an ArrayList in JavaHow to iterate any Map in JavaMore related articles in JavaHow to add an element to an Array in Java?Math pow() method in Java with ExampleSingleton Class in JavaInitializing a List in JavaJava Programming Examples× 5th Floor, A-118,Sector-136, Noida, Uttar Pradesh - 201305 feedback@geeksforgeeks.orgCompanyAbout UsCareersPrivacy PolicyContact UsCopyright PolicyLearnAlgorithmsData StructuresLanguagesCS SubjectsVideo TutorialsWeb DevelopmentWeb TutorialsHTMLCSSJavaScriptBootstrapContributeWrite an ArticleWrite Interview ExperienceInternshipsVideos@geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It ! Start Your Coding Journey Now!Login Register