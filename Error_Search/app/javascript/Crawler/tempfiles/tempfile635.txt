ArrayList in Java - GeeksforGeeksSkip to content TutorialsPractice DS & Algo.Must Do QuestionsDSA Topic-wiseDSA Company-wiseAlgorithmsAnalysis of AlgorithmsAsymptotic AnalysisWorst, Average and Best CasesAsymptotic NotationsLittle o and little omega notationsLower and Upper Bound TheoryAnalysis of LoopsSolving RecurrencesAmortized AnalysisWhat does 'Space Complexity' mean ?Pseudo-polynomial AlgorithmsPolynomial Time Approximation SchemeA Time Complexity QuestionSearching AlgorithmsSorting AlgorithmsGraph AlgorithmsPattern SearchingGeometric AlgorithmsMathematicalBitwise AlgorithmsRandomized AlgorithmsGreedy AlgorithmsDynamic ProgrammingDivide and ConquerBacktrackingBranch and BoundAll AlgorithmsData StructuresArraysLinked ListStackQueueBinary TreeBinary Search TreeHeapHashingGraphAdvanced Data StructureMatrixStringsAll Data StructuresInterview CornerCompany PreparationTop TopicsPractice Company QuestionsInterview ExperiencesExperienced InterviewsInternship InterviewsCompetititve ProgrammingDesign PatternsSystem Design TutorialMultiple Choice QuizzesLanguagesCC++JavaPythonC#JavaScriptjQuerySQLPHPScalaPerlGo LanguageHTMLCSSKotlinCS SubjectsMathematicsOperating SystemDBMSComputer NetworksComputer Organization and ArchitectureTheory of ComputationCompiler DesignDigital LogicSoftware EngineeringGATEGATE Computer Science NotesLast Minute NotesGATE CS Solved PapersGATE CS Original Papers and Official KeysGATE 2021 DatesGATE CS 2021 SyllabusImportant Topics for GATE CSWeb TechnologiesHTMLCSSJavaScriptAngularJSReactJSNodeJSBootstrapjQueryPHPSoftware DesignsSoftware Design PatternsSystem Design TutorialSchool LearningSchool ProgrammingMathematicsNumber SystemAlgebraTrigonometryStatisticsProbabilityGeometryMensurationCalculusMaths Notes (Class 8-12)Class 8 NotesClass 9 NotesClass 10 NotesClass 11 NotesClass 12 NotesNCERT SolutionsClass 8 Maths SolutionClass 9 Maths SolutionClass 10 Maths SolutionClass 11 Maths SolutionClass 12 Maths SolutionRD Sharma SolutionsClass 8 Maths SolutionClass 9 Maths SolutionClass 10 Maths SolutionClass 11 Maths SolutionClass 12 Maths SolutionPhysics Notes (Class 8-11)Class 8 NotesClass 9 NotesClass 10 NotesClass 11 NotesISRO CSISRO CS Solved PapersISRO CS Original Papers and Official KeysISRO CS Syllabus for Scientist/Engineer ExamUGC NET CSUGC NET CS Notes Paper IIUGC NET CS Notes Paper IIIUGC NET CS Solved PapersStudentCampus Ambassador ProgramSchool Ambassador ProgramProjectGeek of the MonthCampus Geek of the MonthPlacement CourseCompetititve ProgrammingTestimonialsGeek on the TopCareersInternshipJobsApply for JobsPost a JobCourses WriteCome write articles for us and get featuredPracticeLearn and code with the best industry expertsPremiumGet access to ad-free content, doubt assistance and more!JobsCome and find your dream job with usGeeks DigestQuizzesGeeks CampusGblog ArticlesIDECampus Mantri HomeSaved VideosCoursesGBlogPuzzlesWhat's New ? Change Language Data StructuresAlgorithmsInterview PreparationTopic-wise PracticeC++JavaPythonCompetitive ProgrammingMachine LearningWeb DevelopmentPuzzlesProject IdeasGFG School Related Articles ▲Related ArticlesBasics of JavaJava TutorialIntroduction to JavaSimilarities and Difference between Java and C++Setting up the environment in JavaJava Basic SyntaxJava Hello World ProgramDifferences between JDK, JRE and JVMHow JVM Works – JVM Architecture?Java IdentifiersVariables & DataTypes in JavaVariables in JavaScope of Variables In JavaData types in JavaOperators in JavaOperators in JavaJava Arithmetic Operators with ExamplesJava Assignment Operators with ExamplesJava Unary Operator with ExamplesJava Relational Operators with ExamplesJava Logical Operators with ExamplesJava Ternary Operator with ExamplesBitwise Operators in JavaPackages in JavaPackages In JavaFlow Control in JavaDecision Making in Java (if, if-else, switch, break, continue, jump)Java if statement with ExamplesJava if-else statement with ExamplesJava if-else-if ladder with ExamplesLoops in JavaLoops in JavaJava For loop with ExamplesJava while loop with ExamplesJava do-while loop with ExamplesFor-each loop in JavaJump Statements in JavaContinue Statement in JavaBreak statement in Javareturn keyword in JavaArrays in JavaArrays in JavaMultidimensional Arrays in JavaJagged Array in JavaStrings in JavaStrings in JavaString class in Java | Set 1StringBuffer class in JavaStringBuilder Class in Java with ExamplesOOPS in JavaObject Oriented Programming (OOPs) Concept in JavaClasses and Objects in JavaMethods in JavaAccess Modifiers in JavaWrapper Classes in JavaNeed of Wrapper Classes in JavaConstructors in JavaConstructors in JavaCopy Constructor in JavaConstructor Chaining In Java with ExamplesPrivate Constructors and Singleton Classes in JavaInheritance & Polymorphism in JavaInheritance in JavaJava and Multiple InheritanceComparison of Inheritance in C++ and JavaPolymorphism in JavaDynamic Method Dispatch or Runtime Polymorphism in JavaMethod overloading & OveridingOverloading in JavaDifferent ways of Method Overloading in JavaOverriding in JavaDifference Between Method Overloading and Method Overriding in JavaAbstraction & EncapsulationAbstraction in JavaAbstract Classes in JavaDifference between Abstract Class and Interface in JavaEncapsulation in JavaInterfaces in JavaInterfaces in JavaNested Interface in JavaMarker interface in JavaFunctional Interfaces in JavaComparator Interface in Java with ExamplesKeywords in JavaList of all Java KeywordsSuper Keyword in Javafinal Keyword in Javaabstract keyword in javastatic Keyword in Java‘this’ reference in Javaenum in JavaException Handling in JavaExceptions in JavaTypes of Exception in Java with ExamplesChecked vs Unchecked Exceptions in JavaTry, catch, throw and throws in JavaFlow control in try catch finally in Javathrow and throws in JavaUser-defined Custom Exception in JavaCollection FrameworkCollections in JavaCollections Class in JavaList Interface in Java with ExamplesArrayList in JavaVector Class in JavaStack Class in JavaLinkedList in JavaQueue Interface In JavaPriorityQueue in JavaDeque interface in Java with ExampleArrayDeque in JavaSet in JavaHashSet in JavaLinkedHashSet in Java with ExamplesSortedSet Interface in Java with ExamplesNavigableSet in Java with ExamplesTreeSet in JavaMap Interface in JavaHashMap in Java with ExamplesHashtable in JavaLinkedHashMap in JavaSortedMap Interface in Java with ExamplesTreeMap in JavaMulti-threading in JavaMultithreading in JavaLifecycle and States of a Thread in JavaMain thread in JavaJava Thread Priority in MultithreadingThread Pools in JavaSynchronization in JavaMethod and Block Synchronization in JavaImportance of Thread Synchronization in JavaThread Safety and how to achieve it in JavaTable of ContentsBasics of JavaJava TutorialIntroduction to JavaSimilarities and Difference between Java and C++Setting up the environment in JavaJava Basic SyntaxJava Hello World ProgramDifferences between JDK, JRE and JVMHow JVM Works – JVM Architecture?Java IdentifiersVariables & DataTypes in JavaVariables in JavaScope of Variables In JavaData types in JavaOperators in JavaOperators in JavaJava Arithmetic Operators with ExamplesJava Assignment Operators with ExamplesJava Unary Operator with ExamplesJava Relational Operators with ExamplesJava Logical Operators with ExamplesJava Ternary Operator with ExamplesBitwise Operators in JavaPackages in JavaPackages In JavaFlow Control in JavaDecision Making in Java (if, if-else, switch, break, continue, jump)Java if statement with ExamplesJava if-else statement with ExamplesJava if-else-if ladder with ExamplesLoops in JavaLoops in JavaJava For loop with ExamplesJava while loop with ExamplesJava do-while loop with ExamplesFor-each loop in JavaJump Statements in JavaContinue Statement in JavaBreak statement in Javareturn keyword in JavaArrays in JavaArrays in JavaMultidimensional Arrays in JavaJagged Array in JavaStrings in JavaStrings in JavaString class in Java | Set 1StringBuffer class in JavaStringBuilder Class in Java with ExamplesOOPS in JavaObject Oriented Programming (OOPs) Concept in JavaClasses and Objects in JavaMethods in JavaAccess Modifiers in JavaWrapper Classes in JavaNeed of Wrapper Classes in JavaConstructors in JavaConstructors in JavaCopy Constructor in JavaConstructor Chaining In Java with ExamplesPrivate Constructors and Singleton Classes in JavaInheritance & Polymorphism in JavaInheritance in JavaJava and Multiple InheritanceComparison of Inheritance in C++ and JavaPolymorphism in JavaDynamic Method Dispatch or Runtime Polymorphism in JavaMethod overloading & OveridingOverloading in JavaDifferent ways of Method Overloading in JavaOverriding in JavaDifference Between Method Overloading and Method Overriding in JavaAbstraction & EncapsulationAbstraction in JavaAbstract Classes in JavaDifference between Abstract Class and Interface in JavaEncapsulation in JavaInterfaces in JavaInterfaces in JavaNested Interface in JavaMarker interface in JavaFunctional Interfaces in JavaComparator Interface in Java with ExamplesKeywords in JavaList of all Java KeywordsSuper Keyword in Javafinal Keyword in Javaabstract keyword in javastatic Keyword in Java‘this’ reference in Javaenum in JavaException Handling in JavaExceptions in JavaTypes of Exception in Java with ExamplesChecked vs Unchecked Exceptions in JavaTry, catch, throw and throws in JavaFlow control in try catch finally in Javathrow and throws in JavaUser-defined Custom Exception in JavaCollection FrameworkCollections in JavaCollections Class in JavaList Interface in Java with ExamplesArrayList in JavaVector Class in JavaStack Class in JavaLinkedList in JavaQueue Interface In JavaPriorityQueue in JavaDeque interface in Java with ExampleArrayDeque in JavaSet in JavaHashSet in JavaLinkedHashSet in Java with ExamplesSortedSet Interface in Java with ExamplesNavigableSet in Java with ExamplesTreeSet in JavaMap Interface in JavaHashMap in Java with ExamplesHashtable in JavaLinkedHashMap in JavaSortedMap Interface in Java with ExamplesTreeMap in JavaMulti-threading in JavaMultithreading in JavaLifecycle and States of a Thread in JavaMain thread in JavaJava Thread Priority in MultithreadingThread Pools in JavaSynchronization in JavaMethod and Block Synchronization in JavaImportance of Thread Synchronization in JavaThread Safety and how to achieve it in JavaImprove Article Save Article Like Article ArrayList in JavaDifficulty Level : EasyLast Updated : 07 Oct, 2021ArrayList is a part of collection framework and is present in java.util package. It provides us with dynamic arrays in Java. Though, it may be slower than standard arrays but can be helpful in programs where lots of manipulation in the array is needed. This class is found in java.util package. Illustration: Example: The following implementation demonstrates how to create and use an ArrayList.Java// Java program to demonstrate the// working of ArrayList in Java import java.io.*;import java.util.*; class ArrayListExample { public static void main(String[] args) { // Size of the // ArrayList int n = 5; // Declaring the ArrayList with // initial size n ArrayList<Integer> arrli = new ArrayList<Integer>(n); // Appending new elements at // the end of the list for (int i = 1; i <= n; i++) arrli.add(i); // Printing elements System.out.println(arrli); // Remove element at index 3 arrli.remove(3); // Displaying the ArrayList // after deletion System.out.println(arrli); // Printing elements one by one for (int i = 0; i < arrli.size(); i++) System.out.print(arrli.get(i) + " "); }}Output[1, 2, 3, 4, 5] [1, 2, 3, 5] 1 2 3 5 Since ArrayList is a dynamic array and we do not have to specify the size while creating it, the size of the array automatically increases when we dynamically add and remove items. Though the actual library implementation may be more complex, the following is a very basic idea explaining the working of the array when the array becomes full and if we try to add an item:Creates a bigger-sized memory on heap memory (for example memory of double size).Copies the current memory elements to the new memory.New item is added now as there is bigger memory available now.Delete the old memory.Important Features:ArrayList inherits AbstractList class and implements the List interface.ArrayList is initialized by the size. However, the size is increased automatically if the collection grows or shrinks if the objects are removed from the collection.Java ArrayList allows us to randomly access the list.ArrayList can not be used for primitive types, like int, char, etc. We need a wrapper class for such cases.ArrayList in Java can be seen as a vector in C++.ArrayList is not Synchronized. Its equivalent synchronized class in Java is Vector.Let’s understand the Java ArrayList in depth. Look at the below image:In the above illustration, AbstractList, CopyOnWriteArrayList, and the AbstractSequentialList are the classes that implement the list interface. A separate functionality is implemented in each of the mentioned classes. They are:AbstractList: This class is used to implement an unmodifiable list, for which one needs to only extend this AbstractList Class and implement only the get() and the size() methods.CopyOnWriteArrayList: This class implements the list interface. It is an enhanced version of ArrayList in which all the modifications(add, set, remove, etc.) are implemented by making a fresh copy of the list.AbstractSequentialList: This class implements the Collection interface and the AbstractCollection class. This class is used to implement an unmodifiable list, for which one needs to only extend this AbstractList Class and implement only the get() and the size() methods.Constructors in the ArrayListIn order to create an ArrayList, we need to create an object of the ArrayList class. The ArrayList class consists of various constructors which allow the possible creation of the array list. The following are the constructors available in this class: 1. ArrayList(): This constructor is used to build an empty array list. If we wish to create an empty ArrayList with the name arr, then, it can be created as:ArrayList arr = new ArrayList(); 2. ArrayList(Collection c): This constructor is used to build an array list initialized with the elements from the collection c. Suppose, we wish to create an ArrayList arr which contains the elements present in the collection c, then, it can be created as: ArrayList arr = new ArrayList(c); 3. ArrayList(int capacity): This constructor is used to build an array list with initial capacity being specified. Suppose we wish to create an ArrayList with the initial size being N, then, it can be created as:ArrayList arr = new ArrayList(N); Methods in Java ArrayListMethodDescriptionadd(int index, Object element)This method is used to insert a specific element at a specific position index in a list.add(Object o)This method is used to append a specific element to the end of a list.addAll(Collection C)This method is used to append all the elements from a specific collection to the end of the mentioned list, in such an order that the values are returned by the specified collection’s iterator.addAll(int index, Collection C)Used to insert all of the elements starting at the specified position from a specific collection into the mentioned list.clear()This method is used to remove all the elements from any list.clone()This method is used to return a shallow copy of an ArrayList.contains?(Object o)Returns true if this list contains the specified element.ensureCapacity?(int minCapacity)Increases the capacity of this ArrayList instance, if necessary, to ensure that it can hold at least the number of elements specified by the minimum capacity argument.forEach?(Consumer<? super E> action)Performs the given action for each element of the Iterable until all elements have been processed or the action throws an exception.get?(int index)Returns the element at the specified position in this list.indexOf(Object O)The index the first occurrence of a specific element is either returned, or -1 in case the element is not in the list.isEmpty?()Returns true if this list contains no elements.lastIndexOf(Object O)The index of the last occurrence of a specific element is either returned or -1 in case the element is not in the list.listIterator?()Returns a list iterator over the elements in this list (in proper sequence).listIterator?(int index)Returns a list iterator over the elements in this list (in proper sequence), starting at the specified position in the list.remove?(int index)Removes the element at the specified position in this list.remove?(Object o)Removes the first occurrence of the specified element from this list, if it is present.removeAll?(Collection c)Removes from this list all of its elements that are contained in the specified collection.removeIf?(Predicate filter)Removes all of the elements of this collection that satisfy the given predicate.removeRange?(int fromIndex, int toIndex)Removes from this list all of the elements whose index is between fromIndex, inclusive, and toIndex, exclusive.retainAll?(Collection<?> c)Retains only the elements in this list that are contained in the specified collection.set?(int index, E element)Replaces the element at the specified position in this list with the specified element.size?()Returns the number of elements in this list.spliterator?()Creates a late-binding and fail-fast Spliterator over the elements in this list.subList?(int fromIndex, int toIndex)Returns a view of the portion of this list between the specified fromIndex, inclusive, and toIndex, exclusive.toArray()This method is used to return an array containing all of the elements in the list in the correct order.toArray(Object[] O)It is also used to return an array containing all of the elements in this list in the correct order same as the previous method.trimToSize()This method is used to trim the capacity of the instance of the ArrayList to the list’s current size.Note: You can also create a generic ArrayList:// Creating generic integer ArrayList ArrayList<Integer> arrli = new ArrayList<Integer>();Let’s see how to perform some basics operations on the ArrayList as listed which we are going to discuss further alongside implementing every operation.Adding element to ListChanging elementsRemoving elementsIterating elements Operation 1: Adding ElementsIn order to add an element to an ArrayList, we can use the add() method. This method is overloaded to perform multiple operations based on different parameters. They are as follows: add(Object): This method is used to add an element at the end of the ArrayList.add(int index, Object): This method is used to add an element at a specific index in the ArrayList.Example:Java// Java Program to Add elements to An ArrayList // Importing all utility classesimport java.util.*; // Main classclass GFG { // Main driver method public static void main(String args[]) { // Creating an Array of string type ArrayList<String> al = new ArrayList<>(); // Adding elements to ArrayList // Cutom inpus al.add("Geeks"); al.add("Geeks"); // Here we are mentioning the index // at which it is to be added al.add(1, "For"); // Printing all the elements in an ArrayList System.out.println(al); }}Output: [Geeks, For, Geeks] Operation 2: Changing ElementsAfter adding the elements, if we wish to change the element, it can be done using the set() method. Since an ArrayList is indexed, the element which we wish to change is referenced by the index of the element. Therefore, this method takes an index and the updated element which needs to be inserted at that index. ExampleJava// Java Program to Change elements in ArrayList // Importing all utility classesimport java.util.*; // main classclass GFG { // Main driver method public static void main(String args[]) { // Creating an Arratlist object of string type ArrayList<String> al = new ArrayList<>(); // Adding elements to Arraylist // Custom input elements al.add("Geeks"); al.add("Geeks"); // Adding specifying the index to be added al.add(1, "Geeks"); // Printing the Arraylist elements System.out.println("Initial ArrayList " + al); // Setting element at 1st index al.set(1, "For"); // Printing the updated Arraylist System.out.println("Updated ArrayList " + al); }}Output: Initial ArrayList [Geeks, Geeks, Geeks] Updated ArrayList [Geeks, For, Geeks] Operation 3: Removing ElementsIn order to remove an element from an ArrayList, we can use the remove() method. This method is overloaded to perform multiple operations based on different parameters. They are as follows: remove(Object): This method is used to simply remove an object from the ArrayList. If there are multiple such objects, then the first occurrence of the object is removed.remove(int index): Since an ArrayList is indexed, this method takes an integer value which simply removes the element present at that specific index in the ArrayList. After removing the element, all the elements are moved to the left to fill the space and the indices of the objects are updated.ExampleJava// Java program to Remove Elements in ArrayList // Importing all utility classesimport java.util.*; // Main classclass GFG { // Main driver method public static void main(String args[]) { // Creating an object of arraylist class ArrayList<String> al = new ArrayList<>(); // Adding elements to ArrayList // Custom addition al.add("Geeks"); al.add("Geeks"); // Adding element at specific index al.add(1, "For"); // Printing all elements of ArrayList System.out.println("Initial ArrayList " + al); // Removing element from above ArrayList al.remove(1); // Printing the updated Arraylist elements System.out.println("After the Index Removal " + al); // Removing this word element in ArrayList al.remove("Geeks"); // Now printing updated ArrayList System.out.println("After the Object Removal " + al); }}Output: Initial ArrayList [Geeks, For, Geeks] After the Index Removal [Geeks, Geeks] After the Object Removal [Geeks] Operation 4: Iterating the ArrayListThere are multiple ways to iterate through the ArrayList. The most famous ways are by using the basic for loop in combination with a get() method to get the element at a specific index and the advanced for loop. ExampleJava// Java program to Iterate the elements// in an ArrayList // Importing all utility classesimport java.util.*; // Main classclass GFG { // Main driver method public static void main(String args[]) { // Creating an Arraylist of string type ArrayList<String> al = new ArrayList<>(); // Adding elements to ArrayList // using standard add() method al.add("Geeks"); al.add("Geeks"); al.add(1, "For"); // Using the Get method and the // for loop for (int i = 0; i < al.size(); i++) { System.out.print(al.get(i) + " "); } System.out.println(); // Using the for each loop for (String str : al) System.out.print(str + " "); }}Output: Geeks For Geeks Geeks For Geeks Must Read: Array vs ArrayList in JavaMy Personal Notes arrow_drop_upSave LikePreviousList Interface in Java with ExamplesNext Vector Class in JavaRecommended ArticlesPage :ArrayList of ArrayList in Java09, Aug 18How to clone an ArrayList to another ArrayList in Java?06, Dec 20Copy Elements of One ArrayList to Another ArrayList in Java17, Jan 21Java.util.ArrayList.add() Method in Java28, Sep 17Java.util.ArrayList.addall() method in Java28, Sep 17Java.util.Arraylist.indexOf() in Java06, Oct 17Java Program to Empty an ArrayList in Java10, Dec 20Array vs ArrayList in Java04, Feb 16ArrayList vs LinkedList in Java23, Oct 16How to remove an element from ArrayList in Java?28, Oct 16ArrayList to Array Conversion in Java : toArray() Methods01, Nov 16Conversion of Array To ArrayList in Java22, Nov 16Custom ArrayList in Java02, Feb 17Initialize an ArrayList in Java05, Oct 18ArrayList toArray() method in Java with Examples19, Dec 18Arraylist removeRange() in Java with examples09, Mar 18ArrayList get(index) Method in Java with Examples09, Mar 18Arraylist lastIndexOf() in Java with example10, Mar 18ArrayList trimToSize() in Java with example13, Mar 18ArrayList isEmpty() in Java with example13, Mar 18ArrayList retainAll() method in Java18, Jun 18Array of ArrayList in Java09, Aug 18Array to ArrayList Conversion in Java16, Aug 18Reverse an ArrayList in Java23, Aug 18Article Contributed By :GeeksforGeeksVote for difficultyCurrent difficulty : EasyEasy Normal Medium Hard ExpertImproved By :KaashyapMSKsolankimayanksagartomar9927Article Tags :Java - util packageJava-ArrayListJava-Collectionsjava-listJavaTechnical ScripterPractice Tags :JavaJava-CollectionsReport IssueWriting code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load CommentsWhat's NewJava Backend Development- LIVE ClassesView DetailsComplete Interview PreparationView DetailsSystem Design-Live Classes for Working ProfessionalsView DetailsMost popular in JavaSplit() String method in Java with examplesReverse a string in JavaArrays.sort() in Java with examplesHow to iterate any Map in JavaInitialize an ArrayList in JavaMore related articles in JavaSingleton Class in JavaStream In JavaHow to add an element to an Array in Java?Initializing a List in JavaJava Programming Examples× 5th Floor, A-118,Sector-136, Noida, Uttar Pradesh - 201305 feedback@geeksforgeeks.orgCompanyAbout UsCareersPrivacy PolicyContact UsCopyright PolicyLearnAlgorithmsData StructuresLanguagesCS SubjectsVideo TutorialsWeb DevelopmentWeb TutorialsHTMLCSSJavaScriptBootstrapContributeWrite an ArticleWrite Interview ExperienceInternshipsVideos@geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It ! Start Your Coding Journey Now!Login Register