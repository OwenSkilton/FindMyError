Different Ways to Create the Instances of Wrapper Classes in Java - GeeksforGeeksSkip to content TutorialsPractice DS & Algo.Must Do QuestionsDSA Topic-wiseDSA Company-wiseAlgorithmsAnalysis of AlgorithmsAsymptotic AnalysisWorst, Average and Best CasesAsymptotic NotationsLittle o and little omega notationsLower and Upper Bound TheoryAnalysis of LoopsSolving RecurrencesAmortized AnalysisWhat does 'Space Complexity' mean ?Pseudo-polynomial AlgorithmsPolynomial Time Approximation SchemeA Time Complexity QuestionSearching AlgorithmsSorting AlgorithmsGraph AlgorithmsPattern SearchingGeometric AlgorithmsMathematicalBitwise AlgorithmsRandomized AlgorithmsGreedy AlgorithmsDynamic ProgrammingDivide and ConquerBacktrackingBranch and BoundAll AlgorithmsData StructuresArraysLinked ListStackQueueBinary TreeBinary Search TreeHeapHashingGraphAdvanced Data StructureMatrixStringsAll Data StructuresInterview CornerCompany PreparationTop TopicsPractice Company QuestionsInterview ExperiencesExperienced InterviewsInternship InterviewsCompetititve ProgrammingDesign PatternsSystem Design TutorialMultiple Choice QuizzesLanguagesCC++JavaPythonC#JavaScriptjQuerySQLPHPScalaPerlGo LanguageHTMLCSSKotlinCS SubjectsMathematicsOperating SystemDBMSComputer NetworksComputer Organization and ArchitectureTheory of ComputationCompiler DesignDigital LogicSoftware EngineeringGATEGATE Computer Science NotesLast Minute NotesGATE CS Solved PapersGATE CS Original Papers and Official KeysGATE 2021 DatesGATE CS 2021 SyllabusImportant Topics for GATE CSWeb TechnologiesHTMLCSSJavaScriptAngularJSReactJSNodeJSBootstrapjQueryPHPSoftware DesignsSoftware Design PatternsSystem Design TutorialSchool LearningSchool ProgrammingMathematicsNumber SystemAlgebraTrigonometryStatisticsProbabilityGeometryMensurationCalculusMaths Notes (Class 8-12)Class 8 NotesClass 9 NotesClass 10 NotesClass 11 NotesClass 12 NotesNCERT SolutionsClass 8 Maths SolutionClass 9 Maths SolutionClass 10 Maths SolutionClass 11 Maths SolutionClass 12 Maths SolutionRD Sharma SolutionsClass 8 Maths SolutionClass 9 Maths SolutionClass 10 Maths SolutionClass 11 Maths SolutionClass 12 Maths SolutionPhysics Notes (Class 8-11)Class 8 NotesClass 9 NotesClass 10 NotesClass 11 NotesISRO CSISRO CS Solved PapersISRO CS Original Papers and Official KeysISRO CS Syllabus for Scientist/Engineer ExamUGC NET CSUGC NET CS Notes Paper IIUGC NET CS Notes Paper IIIUGC NET CS Solved PapersStudentCampus Ambassador ProgramSchool Ambassador ProgramProjectGeek of the MonthCampus Geek of the MonthPlacement CourseCompetititve ProgrammingTestimonialsGeek on the TopCareersInternshipJobsApply for JobsPost a JobCourses WriteCome write articles for us and get featuredPracticeLearn and code with the best industry expertsPremiumGet access to ad-free content, doubt assistance and more!JobsCome and find your dream job with usGeeks DigestQuizzesGeeks CampusGblog ArticlesIDECampus Mantri HomeSaved VideosCoursesGBlogPuzzlesWhat's New ? Change Language Data StructuresAlgorithmsInterview PreparationTopic-wise PracticeC++JavaPythonCompetitive ProgrammingMachine LearningWeb DevelopmentPuzzlesProject IdeasGFG School Related Articles ▲Related ArticlesArrays in JavaSplit() String method in Java with examplesArrays.sort() in Java with examplesFor-each loop in JavaReverse a string in JavaHow to iterate any Map in JavaObject Oriented Programming (OOPs) Concept in JavaHashMap in Java with ExamplesInitialize an ArrayList in JavaMultidimensional Arrays in JavaStack Class in JavaArrayList in JavaHow to add an element to an Array in Java?Overriding in JavaCollections.sort() in Java with ExamplesLinkedList in JavaSingleton Class in JavaQueue Interface In JavaInterfaces in JavaSet in JavaInheritance in JavaClasses and Objects in JavaCollections in JavaMath pow() method in Java with ExampleHow to determine length or size of an Array in Java?Difference Between == and .equals() Method in JavaCompare two Strings in JavaInitializing a List in JavaPolymorphism in JavaMultithreading in JavaTable of ContentsArrays in JavaSplit() String method in Java with examplesArrays.sort() in Java with examplesFor-each loop in JavaReverse a string in JavaHow to iterate any Map in JavaObject Oriented Programming (OOPs) Concept in JavaHashMap in Java with ExamplesInitialize an ArrayList in JavaMultidimensional Arrays in JavaStack Class in JavaArrayList in JavaHow to add an element to an Array in Java?Overriding in JavaCollections.sort() in Java with ExamplesLinkedList in JavaSingleton Class in JavaQueue Interface In JavaInterfaces in JavaSet in JavaInheritance in JavaClasses and Objects in JavaCollections in JavaMath pow() method in Java with ExampleHow to determine length or size of an Array in Java?Difference Between == and .equals() Method in JavaCompare two Strings in JavaInitializing a List in JavaPolymorphism in JavaMultithreading in JavaImprove Article Save Article Like Article Different Ways to Create the Instances of Wrapper Classes in JavaLast Updated : 17 Mar, 2021Wrapper Class a class whose object wraps or contains primitive data types. When we create an object to a wrapper class, it contains a field and in this field, we can store primitive data types. In other words, we can wrap a primitive value into a wrapper class object.Methods:We can use two ways to construct the instance of the Wrapper ClassesUsing the constructor of the wrapper classUsing the valueOf() method provided by the Wrapper classesUsing concept of AutoBoxingLet us discuss both ways individually in detailMethod 1: Using the constructor of the wrapper classSyntax:ClassName object = new ClassName(argument);Illustration:Integer number = new Integer(5);Method 2: Using the valueOf() method provided by the Wrapper classesSyntax:ClassName object = ClassName.valueOf(argument);Illustration:Integer number = Integer.valueOf(5);Now the question arises what is the difference between the two methods in the creation of instances of the Wrapper classes and which method is better for constructing instances. Let us implement both of the methods to get fair play among them.Implementation:ExampleJava// Importing input output classes import java.io.*; // Main classclass GFG { // Main driver method public static void main (String[] args) { // Creating and initializing two integer numbers // Value is passed as an argument to which it is initialized // Custom entries // Number 1 where N = 5 Integer num1 = new Integer(5); // Number 2 where N = 5 Integer num2 = new Integer(5); // Creating objects of Integer class // using valueOf() method // Again, creating and initializing two integer numbers // Value is passed as an argument to which it is initialized Integer num3 = Integer.valueOf(5); Integer num4 = Integer.valueOf(5); // Now by far, all the objects contain the same value // N = 5 // Boolean will return true if numbers are equal // else eturning false // Comparing two numbers boolean value1 = (num1 == num2); boolean value2 = (num3 == num4); // Print and display the bool results System.out.println(value1); System.out.println(value2); }}Output:false trueOutput explanation:Note that, the instances of the classes point to the memory locations assigned in the heap and themselves do not hold the value. While we are creating objects with the help of the constructor of the wrapper class, each time a new memory is allocated in the heap and the objects point to the different memory locations. Hence, in the above example, In this case, both num1 and num2 are pointing to different memory locations, thus on the comparison, they return false.Do note is not so in the case of the valueOf() method as the valueOf() method checks if any memory is allocated to the same value for that class in the heap. If it finds the value, then it provides the location of the previously allotted memory to the new instance and both start pointing to the same memory location in the heap. Hence, on the comparison, it returns true.Since the wrapper class object’s values are immutable just like String and thus can not be changed once allotted, it does not affect how many instances are pointing to the same memory location. Hence, in the above example, the memory was allotted to value 5 and the num3 was pointing to that memory location, but when we created one more instance num4 with the same value, it also started pointing to the same memory location as pointed by num3.Currently, the method using a constructor to create an instance is deprecated, and therefore it is always best to use the valueOf() method. So let us move ahead a bit discussing the new concept of autoboxing.Method 3: Using the concept of AutoBoxingAutoBoxing is to reduce the efforts to write the valueOf() method each time we are creating instances, AutoBoxing is implemented. The automatic conversion of primitive types to the object of their corresponding wrapper classes is known as AutoBoxing.We were creating wrapper classes until now by using valueOf() method, but it seems quite lengthy when we can use AutoBoxing. In AutoBoxing, our work is done by the compiler, i.e. Java compiler in the background would perform the valueOf() operation and create the instance of it.Instances created using autoboxing follow the process of valueOf() in the background and hence in this also, multiple instances with the same value point to the same memory location.Illustration: In the above example, it can also be written as Integer.valueOf(15)) and put the reference of it in the object (i.e. a number).Integer number = 15;Syntax:ClassName object = value; // of primitive data type associated with the wrapper class.Example:Java// Importing input output classesimport java.io.*; // Main class class GFG { // Main driver method public static void main (String[] args) { // Creating Instances using AutoBoxing Integer num1 = 5; Integer num2 = 5; boolean bool = (num1 == num2); System.out.println(bool); }}OutputtrueOutput explanation:Both the num1 and num2 are pointing to the same memory location in the heap as we discussed in the valueOf() method. Attention reader! Don’t stop learning now. Get hold of all the important Java Foundation and Collections concepts with the Fundamentals of Java and Java Collections Course at a student-friendly price and become industry ready. To complete your preparation from learning a language to DS Algo and many more, please refer Complete Interview Preparation Course.My Personal Notes arrow_drop_upSave LikePreviousJava Program to Check Armstrong Number between Two IntegersNext Filter Pattern in JavaRecommended ArticlesPage :Wrapper Classes in Java20, Dec 16Need of Wrapper Classes in Java09, Mar 21Sorting Elements of Arrays and Wrapper Classes that Already Implements Comparable in Java08, Mar 21Primitive Wrapper Classes are Immutable in Java10, Mar 16Utility methods of Wrapper classes | valueOf(), xxxValue(), parseXxx(), toString()28, Nov 17How to Create Different Packages For Different Classes in Java?21, Sep 21Compute modulus division by a power-of-2-number using Wrapper Class21, Jun 17Different ways to create objects in Java22, May 17Different Ways to Convert java.util.Date to java.time.LocalDate in Java05, Jan 21How to Create Classes in Android Studio?23, Nov 20Different ways for Integer to String Conversions In Java12, Jul 16Sort a String in Java (2 different ways)02, Sep 17Different Ways to Copy Content From One File to Another File in Java23, Oct 20Different ways for String to Integer Conversions in Java29, May 19Different Ways to Print First K Characters of the String in Java22, Aug 20Different Ways to Remove all the Digits from String in Java05, Sep 20Different Ways to Generate String by using Characters and Numbers in Java20, Sep 20Different Ways To Check Java Version In Windows25, Oct 20Different Ways to Achieve Pass By Reference in Java28, Dec 20Different Ways to Prevent Method Overriding in Java18, Jan 21Different Ways to Copy Files in Java25, Mar 21Different Ways to Capture Java Heap Dumps17, Apr 21Different Ways to Set a Classpath in Java23, Oct 21Different Ways to Run Applet in Java09, Nov 21Article Contributed By :ankitsinghrajput@ankitsinghrajputVote for difficultyEasy Normal Medium Hard ExpertArticle Tags :java-wrapper-classJavaPractice Tags :JavaReport IssueWriting code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load CommentsWhat's NewJava Backend Development- LIVE ClassesView DetailsComplete Interview PreparationView DetailsSystem Design-Live Classes for Working ProfessionalsView DetailsMost popular in JavaJava Programming ExamplesStream In JavaStrings in JavaIntroduction to JavaSystem.out.println in JavaMore related articles in JavaScanner Class in JavaDifferent ways of Reading a text file in JavaComparator Interface in Java with ExamplesStringBuilder Class in Java with ExamplesFunctional Interfaces in Java× 5th Floor, A-118,Sector-136, Noida, Uttar Pradesh - 201305 feedback@geeksforgeeks.orgCompanyAbout UsCareersPrivacy PolicyContact UsCopyright PolicyLearnAlgorithmsData StructuresLanguagesCS SubjectsVideo TutorialsWeb DevelopmentWeb TutorialsHTMLCSSJavaScriptBootstrapContributeWrite an ArticleWrite Interview ExperienceInternshipsVideos@geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It ! Start Your Coding Journey Now!Login Register