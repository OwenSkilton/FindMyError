PriorityQueue in Java - GeeksforGeeksSkip to content TutorialsPractice DS & Algo.Must Do QuestionsDSA Topic-wiseDSA Company-wiseAlgorithmsAnalysis of AlgorithmsAsymptotic AnalysisWorst, Average and Best CasesAsymptotic NotationsLittle o and little omega notationsLower and Upper Bound TheoryAnalysis of LoopsSolving RecurrencesAmortized AnalysisWhat does 'Space Complexity' mean ?Pseudo-polynomial AlgorithmsPolynomial Time Approximation SchemeA Time Complexity QuestionSearching AlgorithmsSorting AlgorithmsGraph AlgorithmsPattern SearchingGeometric AlgorithmsMathematicalBitwise AlgorithmsRandomized AlgorithmsGreedy AlgorithmsDynamic ProgrammingDivide and ConquerBacktrackingBranch and BoundAll AlgorithmsData StructuresArraysLinked ListStackQueueBinary TreeBinary Search TreeHeapHashingGraphAdvanced Data StructureMatrixStringsAll Data StructuresInterview CornerCompany PreparationTop TopicsPractice Company QuestionsInterview ExperiencesExperienced InterviewsInternship InterviewsCompetititve ProgrammingDesign PatternsSystem Design TutorialMultiple Choice QuizzesLanguagesCC++JavaPythonC#JavaScriptjQuerySQLPHPScalaPerlGo LanguageHTMLCSSKotlinCS SubjectsMathematicsOperating SystemDBMSComputer NetworksComputer Organization and ArchitectureTheory of ComputationCompiler DesignDigital LogicSoftware EngineeringGATEGATE Computer Science NotesLast Minute NotesGATE CS Solved PapersGATE CS Original Papers and Official KeysGATE 2021 DatesGATE CS 2021 SyllabusImportant Topics for GATE CSWeb TechnologiesHTMLCSSJavaScriptAngularJSReactJSNodeJSBootstrapjQueryPHPSoftware DesignsSoftware Design PatternsSystem Design TutorialSchool LearningSchool ProgrammingMathematicsNumber SystemAlgebraTrigonometryStatisticsProbabilityGeometryMensurationCalculusMaths Notes (Class 8-12)Class 8 NotesClass 9 NotesClass 10 NotesClass 11 NotesClass 12 NotesNCERT SolutionsClass 8 Maths SolutionClass 9 Maths SolutionClass 10 Maths SolutionClass 11 Maths SolutionClass 12 Maths SolutionRD Sharma SolutionsClass 8 Maths SolutionClass 9 Maths SolutionClass 10 Maths SolutionClass 11 Maths SolutionClass 12 Maths SolutionPhysics Notes (Class 8-11)Class 8 NotesClass 9 NotesClass 10 NotesClass 11 NotesISRO CSISRO CS Solved PapersISRO CS Original Papers and Official KeysISRO CS Syllabus for Scientist/Engineer ExamUGC NET CSUGC NET CS Notes Paper IIUGC NET CS Notes Paper IIIUGC NET CS Solved PapersStudentCampus Ambassador ProgramSchool Ambassador ProgramProjectGeek of the MonthCampus Geek of the MonthPlacement CourseCompetititve ProgrammingTestimonialsGeek on the TopCareersInternshipJobsApply for JobsPost a JobCourses WriteCome write articles for us and get featuredPracticeLearn and code with the best industry expertsPremiumGet access to ad-free content, doubt assistance and more!JobsCome and find your dream job with usGeeks DigestQuizzesGeeks CampusGblog ArticlesIDECampus Mantri HomeSaved VideosCoursesGBlogPuzzlesWhat's New ? Change Language Data StructuresAlgorithmsInterview PreparationTopic-wise PracticeC++JavaPythonCompetitive ProgrammingMachine LearningWeb DevelopmentPuzzlesProject IdeasGFG School Related Articles ▲Related ArticlesBasics of JavaJava TutorialIntroduction to JavaSimilarities and Difference between Java and C++Setting up the environment in JavaJava Basic SyntaxJava Hello World ProgramDifferences between JDK, JRE and JVMHow JVM Works – JVM Architecture?Java IdentifiersVariables & DataTypes in JavaVariables in JavaScope of Variables In JavaData types in JavaOperators in JavaOperators in JavaJava Arithmetic Operators with ExamplesJava Assignment Operators with ExamplesJava Unary Operator with ExamplesJava Relational Operators with ExamplesJava Logical Operators with ExamplesJava Ternary Operator with ExamplesBitwise Operators in JavaPackages in JavaPackages In JavaFlow Control in JavaDecision Making in Java (if, if-else, switch, break, continue, jump)Java if statement with ExamplesJava if-else statement with ExamplesJava if-else-if ladder with ExamplesLoops in JavaLoops in JavaJava For loop with ExamplesJava while loop with ExamplesJava do-while loop with ExamplesFor-each loop in JavaJump Statements in JavaContinue Statement in JavaBreak statement in Javareturn keyword in JavaArrays in JavaArrays in JavaMultidimensional Arrays in JavaJagged Array in JavaStrings in JavaStrings in JavaString class in Java | Set 1StringBuffer class in JavaStringBuilder Class in Java with ExamplesOOPS in JavaObject Oriented Programming (OOPs) Concept in JavaClasses and Objects in JavaMethods in JavaAccess Modifiers in JavaWrapper Classes in JavaNeed of Wrapper Classes in JavaConstructors in JavaConstructors in JavaCopy Constructor in JavaConstructor Chaining In Java with ExamplesPrivate Constructors and Singleton Classes in JavaInheritance & Polymorphism in JavaInheritance in JavaJava and Multiple InheritanceComparison of Inheritance in C++ and JavaPolymorphism in JavaDynamic Method Dispatch or Runtime Polymorphism in JavaMethod overloading & OveridingOverloading in JavaDifferent ways of Method Overloading in JavaOverriding in JavaDifference Between Method Overloading and Method Overriding in JavaAbstraction & EncapsulationAbstraction in JavaAbstract Classes in JavaDifference between Abstract Class and Interface in JavaEncapsulation in JavaInterfaces in JavaInterfaces in JavaNested Interface in JavaMarker interface in JavaFunctional Interfaces in JavaComparator Interface in Java with ExamplesKeywords in JavaList of all Java KeywordsSuper Keyword in Javafinal Keyword in Javaabstract keyword in javastatic Keyword in Java‘this’ reference in Javaenum in JavaException Handling in JavaExceptions in JavaTypes of Exception in Java with ExamplesChecked vs Unchecked Exceptions in JavaTry, catch, throw and throws in JavaFlow control in try catch finally in Javathrow and throws in JavaUser-defined Custom Exception in JavaCollection FrameworkCollections in JavaCollections Class in JavaList Interface in Java with ExamplesArrayList in JavaVector Class in JavaStack Class in JavaLinkedList in JavaQueue Interface In JavaPriorityQueue in JavaDeque interface in Java with ExampleArrayDeque in JavaSet in JavaHashSet in JavaLinkedHashSet in Java with ExamplesSortedSet Interface in Java with ExamplesNavigableSet in Java with ExamplesTreeSet in JavaMap Interface in JavaHashMap in Java with ExamplesHashtable in JavaLinkedHashMap in JavaSortedMap Interface in Java with ExamplesTreeMap in JavaMulti-threading in JavaMultithreading in JavaLifecycle and States of a Thread in JavaMain thread in JavaJava Thread Priority in MultithreadingThread Pools in JavaSynchronization in JavaMethod and Block Synchronization in JavaImportance of Thread Synchronization in JavaThread Safety and how to achieve it in JavaTable of ContentsBasics of JavaJava TutorialIntroduction to JavaSimilarities and Difference between Java and C++Setting up the environment in JavaJava Basic SyntaxJava Hello World ProgramDifferences between JDK, JRE and JVMHow JVM Works – JVM Architecture?Java IdentifiersVariables & DataTypes in JavaVariables in JavaScope of Variables In JavaData types in JavaOperators in JavaOperators in JavaJava Arithmetic Operators with ExamplesJava Assignment Operators with ExamplesJava Unary Operator with ExamplesJava Relational Operators with ExamplesJava Logical Operators with ExamplesJava Ternary Operator with ExamplesBitwise Operators in JavaPackages in JavaPackages In JavaFlow Control in JavaDecision Making in Java (if, if-else, switch, break, continue, jump)Java if statement with ExamplesJava if-else statement with ExamplesJava if-else-if ladder with ExamplesLoops in JavaLoops in JavaJava For loop with ExamplesJava while loop with ExamplesJava do-while loop with ExamplesFor-each loop in JavaJump Statements in JavaContinue Statement in JavaBreak statement in Javareturn keyword in JavaArrays in JavaArrays in JavaMultidimensional Arrays in JavaJagged Array in JavaStrings in JavaStrings in JavaString class in Java | Set 1StringBuffer class in JavaStringBuilder Class in Java with ExamplesOOPS in JavaObject Oriented Programming (OOPs) Concept in JavaClasses and Objects in JavaMethods in JavaAccess Modifiers in JavaWrapper Classes in JavaNeed of Wrapper Classes in JavaConstructors in JavaConstructors in JavaCopy Constructor in JavaConstructor Chaining In Java with ExamplesPrivate Constructors and Singleton Classes in JavaInheritance & Polymorphism in JavaInheritance in JavaJava and Multiple InheritanceComparison of Inheritance in C++ and JavaPolymorphism in JavaDynamic Method Dispatch or Runtime Polymorphism in JavaMethod overloading & OveridingOverloading in JavaDifferent ways of Method Overloading in JavaOverriding in JavaDifference Between Method Overloading and Method Overriding in JavaAbstraction & EncapsulationAbstraction in JavaAbstract Classes in JavaDifference between Abstract Class and Interface in JavaEncapsulation in JavaInterfaces in JavaInterfaces in JavaNested Interface in JavaMarker interface in JavaFunctional Interfaces in JavaComparator Interface in Java with ExamplesKeywords in JavaList of all Java KeywordsSuper Keyword in Javafinal Keyword in Javaabstract keyword in javastatic Keyword in Java‘this’ reference in Javaenum in JavaException Handling in JavaExceptions in JavaTypes of Exception in Java with ExamplesChecked vs Unchecked Exceptions in JavaTry, catch, throw and throws in JavaFlow control in try catch finally in Javathrow and throws in JavaUser-defined Custom Exception in JavaCollection FrameworkCollections in JavaCollections Class in JavaList Interface in Java with ExamplesArrayList in JavaVector Class in JavaStack Class in JavaLinkedList in JavaQueue Interface In JavaPriorityQueue in JavaDeque interface in Java with ExampleArrayDeque in JavaSet in JavaHashSet in JavaLinkedHashSet in Java with ExamplesSortedSet Interface in Java with ExamplesNavigableSet in Java with ExamplesTreeSet in JavaMap Interface in JavaHashMap in Java with ExamplesHashtable in JavaLinkedHashMap in JavaSortedMap Interface in Java with ExamplesTreeMap in JavaMulti-threading in JavaMultithreading in JavaLifecycle and States of a Thread in JavaMain thread in JavaJava Thread Priority in MultithreadingThread Pools in JavaSynchronization in JavaMethod and Block Synchronization in JavaImportance of Thread Synchronization in JavaThread Safety and how to achieve it in JavaImprove Article Save Article Like Article PriorityQueue in JavaDifficulty Level : MediumLast Updated : 27 Oct, 2021A PriorityQueue is used when the objects are supposed to be processed based on the priority. It is known that a Queue follows the First-In-First-Out algorithm, but sometimes the elements of the queue are needed to be processed according to the priority, that’s when the PriorityQueue comes into play. The PriorityQueue is based on the priority heap. The elements of the priority queue are ordered according to the natural ordering, or by a Comparator provided at queue construction time, depending on which constructor is used. In the below priority queue, an element with maximum ASCII value will have the highest priority.Declaration:public class PriorityQueue<E> extends AbstractQueue<E> implements Serializable where E is the type of elements held in this queue The class implements Serializable, Iterable<E>, Collection<E>, Queue<E> interfaces.Few important points on Priority Queue are as follows: PriorityQueue doesn’t permit null.We can’t create PriorityQueue of Objects that are non-comparablePriorityQueue are unbound queues.The head of this queue is the least element with respect to the specified ordering. If multiple elements are tied for least value, the head is one of those elements — ties are broken arbitrarily.Since PriorityQueue is not thread-safe, so java provides PriorityBlockingQueue class that implements the BlockingQueue interface to use in java multithreading environment.The queue retrieval operations poll, remove, peek, and element access the element at the head of the queue.It provides O(log(n)) time for add and poll methods.It inherits methods from AbstractQueue, AbstractCollection, Collection and Object class.Constructors:1. PriorityQueue(): Creates a PriorityQueue with the default initial capacity (11) that orders its elements according to their natural ordering.PriorityQueue<E> pq = new PriorityQueue<E>();2. PriorityQueue(Collection<E> c): Creates a PriorityQueue containing the elements in the specified collection.PriorityQueue<E> pq = new PriorityQueue<E>(Collection<E> c);3. PriorityQueue(int initialCapacity): Creates a PriorityQueue with the specified initial capacity that orders its elements according to their natural ordering.PriorityQueue<E> pq = new PriorityQueue<E>(int initialCapacity);4. PriorityQueue(int initialCapacity, Comparator<E> comparator): Creates a PriorityQueue with the specified initial capacity that orders its elements according to the specified comparator.PriorityQueue<E> pq = new PriorityQueue(int initialCapacity, Comparator<E> comparator);5. PriorityQueue(PriorityQueue<E> c): Creates a PriorityQueue containing the elements in the specified priority queue.PriorityQueue<E> pq = new PriorityQueue(PriorityQueue<E> c);6. PriorityQueue(SortedSet<E> c): Creates a PriorityQueue containing the elements in the specified sorted set.PriorityQueue<E> pq = new PriorityQueue<E>(SortedSet<E> c);Example:The example below explains the following basic operations of the priority queue.boolean add(E element): This method inserts the specified element into this priority queue.public peek(): This method retrieves, but does not remove, the head of this queue, or returns null if this queue is empty.public poll(): This method retrieves and removes the head of this queue, or returns null if this queue is empty.Java// Java program to demonstrate the// working of PriorityQueueimport java.util.*; class PriorityQueueDemo { // Main Method public static void main(String args[]) { // Creating empty priority queue PriorityQueue<Integer> pQueue = new PriorityQueue<Integer>(); // Adding items to the pQueue using add() pQueue.add(10); pQueue.add(20); pQueue.add(15); // Printing the top element of PriorityQueue System.out.println(pQueue.peek()); // Printing the top element and removing it // from the PriorityQueue container System.out.println(pQueue.poll()); // Printing the top element again System.out.println(pQueue.peek()); }}Output:10 10 15 Operations on PriorityQueueLet’s see how to perform a few frequently used operations on the Priority Queue class.1. Adding Elements: In order to add an element in a priority queue, we can use the add() method. The insertion order is not retained in the PriorityQueue. The elements are stored based on the priority order which is ascending by default.Java// Java program to add elements// to a PriorityQueueimport java.util.*;import java.io.*; public class PriorityQueueDemo { public static void main(String args[]) { PriorityQueue<String> pq = new PriorityQueue<>(); pq.add("Geeks"); pq.add("For"); pq.add("Geeks"); System.out.println(pq); }}Output:[For, Geeks, Geeks] 2. Removing Elements: In order to remove an element from a priority queue, we can use the remove() method. If there are multiple such objects, then the first occurrence of the object is removed. Apart from that, the poll() method is also used to remove the head and return it.Java// Java program to remove elements// from a PriorityQueue import java.util.*;import java.io.*; public class PriorityQueueDemo { public static void main(String args[]) { PriorityQueue<String> pq = new PriorityQueue<>(); pq.add("Geeks"); pq.add("For"); pq.add("Geeks"); System.out.println("Initial PriorityQueue " + pq); // using the method pq.remove("Geeks"); System.out.println("After Remove - " + pq); System.out.println("Poll Method - " + pq.poll()); System.out.println("Final PriorityQueue - " + pq); }}Output:Initial PriorityQueue [For, Geeks, Geeks] After Remove - [For, Geeks] Poll Method - For Final PriorityQueue - [Geeks] 3. Accessing the elements: Since Queue follows the First In First Out principle, we can access only the head of the queue. To access elements from a priority queue, we can use the peek() method. Java// Java program to access elements// from a PriorityQueueimport java.util.*; class PriorityQueueDemo { // Main Method public static void main(String[] args) { // Creating a priority queue PriorityQueue<String> pq = new PriorityQueue<>(); pq.add("Geeks"); pq.add("For"); pq.add("Geeks"); System.out.println("PriorityQueue: " + pq); // Using the peek() method String element = pq.peek(); System.out.println("Accessed Element: " + element); }}Output:PriorityQueue: [For, Geeks, Geeks] Accessed Element: For 4. Iterating the PriorityQueue: There are multiple ways to iterate through the PriorityQueue. The most famous way is converting the queue to the array and traversing using the for loop. However, the queue also has an inbuilt iterator which can be used to iterate through the queue.Java// Java program to iterate elements// to a PriorityQueue import java.util.*; public class PriorityQueueDemo { // Main Method public static void main(String args[]) { PriorityQueue<String> pq = new PriorityQueue<>(); pq.add("Geeks"); pq.add("For"); pq.add("Geeks"); Iterator iterator = pq.iterator(); while (iterator.hasNext()) { System.out.print(iterator.next() + " "); } }}Output:For Geeks Geeks Methods in PriorityQueue classMETHODDESCRIPTIONadd(E e)Inserts the specified element into this priority queue.clear()Removes all of the elements from this priority queue.comparator()Returns the comparator used to order the elements in this queue, or null if this queue is sorted according to the natural ordering of its elements.contains​(Object o)Returns true if this queue contains the specified element.forEach​(Consumer<? super E> action)Performs the given action for each element of the Iterable until all elements have been processed or the action throws an exception.iterator()Returns an iterator over the elements in this queue. offer​(E e)Inserts the specified element into this priority queue.remove​(Object o)Removes a single instance of the specified element from this queue, if it is present.removeAll​(Collection<?> c)Removes all of this collection’s elements that are also contained in the specified collection (optional operation).removeIf​(Predicate<? super E> filter)Removes all of the elements of this collection that satisfy the given predicate.retainAll​(Collection<?> c)Retains only the elements in this collection that are contained in the specified collection (optional operation).spliterator()Creates a late-binding and fail-fast Spliterator over the elements in this queue. toArray()Returns an array containing all of the elements in this queue. toArray​(T[] a)Returns an array containing all of the elements in this queue; the runtime type of the returned array is that of the specified array.Methods Declared in class java.util.AbstractQueueMETHODDESCRIPTIONaddAll(Collection<? extends E> c)Adds all of the elements in the specified collection to this queue.element()Retrieves, but does not remove, the head of this queue.remove()Retrieves and removes the head of this queue.Methods Declared in class java.util.AbstractCollectionMETHODDESCRIPTIONcontainsAll(Collection<?> c)Returns true if this collection contains all of the elements in the specified collection.isEmpty()Returns true if this collection contains no elements.toString()Returns a string representation of this collection.Methods Declared in interface java.util.CollectionMETHODDESCRIPTIONcontainsAll(Collection<?> c)Returns true if this collection contains all of the elements in the specified collection.equals(Object o)Compares the specified object with this collection for equality.hashCode()Returns the hash code value for this collection.isEmpty()Returns true if this collection contains no elements.parallelStream()Returns a possibly parallel Stream with this collection as its source.size()Returns the number of elements in this collection.stream()Returns a sequential Stream with this collection as its source.toArray(IntFunction<T[]> generator)Returns an array containing all of the elements in this collection, using the provided generator function to allocate the returned array.Methods Declared in interface java.util.QueueMETHODDESCRIPTIONpeek()Retrieves, but does not remove, the head of this queue, or returns null if this queue is empty.poll()Retrieves and removes the head of this queue, or returns null if this queue is empty.Applications: Implementing Dijkstra’s and Prim’s algorithms.Maximize array sum after K negationsRelated Articles: Java.util.PriorityQueue class in JavaImplement PriorityQueue through Comparator in JavaThis article is contributed by Mehak Kumar. Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.My Personal Notes arrow_drop_upSave LikePreviousQueue Interface In JavaNext Deque interface in Java with ExampleRecommended ArticlesPage :Java.util.PriorityQueue class in Java10, Apr 17PriorityQueue toArray() Method in Java20, Jun 18Implement PriorityQueue through Comparator in Java12, Mar 18PriorityQueue comparator() Method in Java20, Jun 18PriorityQueue clear() Method in Java20, Jun 18PriorityQueue add() Method in Java20, Jun 18PriorityQueue peek() Method in Java20, Jun 18PriorityQueue iterator() Method in Java20, Jun 18PriorityQueue offer() Method in Java20, Jun 18PriorityQueue contains() Method in Java20, Jun 18PriorityQueue poll() Method in Java20, Jun 18PriorityQueue size() Method in Java20, Jun 18PriorityQueue spliterator() method in Java20, Sep 18Dijkstra's shortest path algorithm in Java using PriorityQueue11, Dec 18Java Program to Implement PriorityQueue API18, Jan 21PriorityQueue remove() Method in Java20, Jun 18Difference Between PriorityQueue and TreeSet28, Dec 20Difference Between java.sql.Time, java.sql.Timestamp and java.sql.Date in Java07, Apr 21How to Convert java.sql.Date to java.util.Date in Java?02, Feb 21Different Ways to Convert java.util.Date to java.time.LocalDate in Java05, Jan 21How to Convert java.util.Date to java.sql.Date in Java?23, Mar 21Java.util.BitSet class methods in Java with Examples | Set 218, Nov 16Java.Lang.Float class in Java27, Mar 17Java.io.BufferedInputStream class in Java20, Jan 17Article Contributed By :GeeksforGeeksVote for difficultyCurrent difficulty : MediumEasy Normal Medium Hard ExpertImproved By :harsha1397Chinmoy Lenkashubham_singhAmrutesh99GaneshchowdharysadanalatriloksharmamArticle Tags :Java - util packageJava-CollectionsJava-Functionsjava-priority-queuepriority-queueJavaPractice Tags :Javapriority-queueJava-CollectionsReport IssueWriting code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load CommentsWhat's NewJava Backend Development- LIVE ClassesView DetailsComplete Interview PreparationView DetailsSystem Design-Live Classes for Working ProfessionalsView DetailsMost popular in JavaSplit() String method in Java with examplesArrays.sort() in Java with examplesReverse a string in JavaInitialize an ArrayList in JavaHow to iterate any Map in JavaMore related articles in JavaHow to add an element to an Array in Java?Singleton Class in JavaStream In JavaInitializing a List in JavaMath pow() method in Java with Example× 5th Floor, A-118,Sector-136, Noida, Uttar Pradesh - 201305 feedback@geeksforgeeks.orgCompanyAbout UsCareersPrivacy PolicyContact UsCopyright PolicyLearnAlgorithmsData StructuresLanguagesCS SubjectsVideo TutorialsWeb DevelopmentWeb TutorialsHTMLCSSJavaScriptBootstrapContributeWrite an ArticleWrite Interview ExperienceInternshipsVideos@geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It ! Start Your Coding Journey Now!Login Register