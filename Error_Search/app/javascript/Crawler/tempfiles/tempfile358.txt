Reflection in Java - GeeksforGeeksSkip to content TutorialsPractice DS & Algo.Must Do QuestionsDSA Topic-wiseDSA Company-wiseAlgorithmsAnalysis of AlgorithmsAsymptotic AnalysisWorst, Average and Best CasesAsymptotic NotationsLittle o and little omega notationsLower and Upper Bound TheoryAnalysis of LoopsSolving RecurrencesAmortized AnalysisWhat does 'Space Complexity' mean ?Pseudo-polynomial AlgorithmsPolynomial Time Approximation SchemeA Time Complexity QuestionSearching AlgorithmsSorting AlgorithmsGraph AlgorithmsPattern SearchingGeometric AlgorithmsMathematicalBitwise AlgorithmsRandomized AlgorithmsGreedy AlgorithmsDynamic ProgrammingDivide and ConquerBacktrackingBranch and BoundAll AlgorithmsData StructuresArraysLinked ListStackQueueBinary TreeBinary Search TreeHeapHashingGraphAdvanced Data StructureMatrixStringsAll Data StructuresInterview CornerCompany PreparationTop TopicsPractice Company QuestionsInterview ExperiencesExperienced InterviewsInternship InterviewsCompetititve ProgrammingDesign PatternsSystem Design TutorialMultiple Choice QuizzesLanguagesCC++JavaPythonC#JavaScriptjQuerySQLPHPScalaPerlGo LanguageHTMLCSSKotlinCS SubjectsMathematicsOperating SystemDBMSComputer NetworksComputer Organization and ArchitectureTheory of ComputationCompiler DesignDigital LogicSoftware EngineeringGATEGATE Computer Science NotesLast Minute NotesGATE CS Solved PapersGATE CS Original Papers and Official KeysGATE 2021 DatesGATE CS 2021 SyllabusImportant Topics for GATE CSWeb TechnologiesHTMLCSSJavaScriptAngularJSReactJSNodeJSBootstrapjQueryPHPSoftware DesignsSoftware Design PatternsSystem Design TutorialSchool LearningSchool ProgrammingMathematicsNumber SystemAlgebraTrigonometryStatisticsProbabilityGeometryMensurationCalculusMaths Notes (Class 8-12)Class 8 NotesClass 9 NotesClass 10 NotesClass 11 NotesClass 12 NotesNCERT SolutionsClass 8 Maths SolutionClass 9 Maths SolutionClass 10 Maths SolutionClass 11 Maths SolutionClass 12 Maths SolutionRD Sharma SolutionsClass 8 Maths SolutionClass 9 Maths SolutionClass 10 Maths SolutionClass 11 Maths SolutionClass 12 Maths SolutionPhysics Notes (Class 8-11)Class 8 NotesClass 9 NotesClass 10 NotesClass 11 NotesISRO CSISRO CS Solved PapersISRO CS Original Papers and Official KeysISRO CS Syllabus for Scientist/Engineer ExamUGC NET CSUGC NET CS Notes Paper IIUGC NET CS Notes Paper IIIUGC NET CS Solved PapersStudentCampus Ambassador ProgramSchool Ambassador ProgramProjectGeek of the MonthCampus Geek of the MonthPlacement CourseCompetititve ProgrammingTestimonialsGeek on the TopCareersInternshipJobsApply for JobsPost a JobCourses WriteCome write articles for us and get featuredPracticeLearn and code with the best industry expertsPremiumGet access to ad-free content, doubt assistance and more!JobsCome and find your dream job with usGeeks DigestQuizzesGeeks CampusGblog ArticlesIDECampus Mantri HomeSaved VideosCoursesGBlogPuzzlesWhat's New ? Change Language Data StructuresAlgorithmsInterview PreparationTopic-wise PracticeC++JavaPythonCompetitive ProgrammingMachine LearningWeb DevelopmentPuzzlesProject IdeasGFG School Related Articles ▲Related ArticlesReflection in Javanew operator vs newInstance() method in Javainstanceof operator vs isInstance() Method in JavaClass isInstance() method in Java with ExamplesThrowable getStackTrace() method in Java with ExamplesThrowable printStackTrace() method in Java with ExamplesDifferent Ways to Print Exception Messages in Javathrow and throws in JavaUser-defined Custom Exception in JavaInfinity or Exception in Java when divide by 0?Java Multiple Catch BlockChained Exceptions in JavaNull Pointer Exception In JavaOutput of Java program | Set 12(Exception Handling)Java | Exception Handling | Question 1Java | Exception Handling | Question 2Java | Exception Handling | Question 3Java | Exception Handling | Question 4Java | Exception Handling | Question 8Java | Exception Handling | Question 6Java | Exception Handling | Question 7Java | Exception Handling | Question 8Nested try blocks in Exception Handling in JavaFlow control in try catch finally in JavaTypes of Exception in Java with ExamplesArrays in JavaSplit() String method in Java with examplesArrays.sort() in Java with examplesFor-each loop in JavaReverse a string in JavaTable of ContentsReflection in Javanew operator vs newInstance() method in Javainstanceof operator vs isInstance() Method in JavaClass isInstance() method in Java with ExamplesThrowable getStackTrace() method in Java with ExamplesThrowable printStackTrace() method in Java with ExamplesDifferent Ways to Print Exception Messages in Javathrow and throws in JavaUser-defined Custom Exception in JavaInfinity or Exception in Java when divide by 0?Java Multiple Catch BlockChained Exceptions in JavaNull Pointer Exception In JavaOutput of Java program | Set 12(Exception Handling)Java | Exception Handling | Question 1Java | Exception Handling | Question 2Java | Exception Handling | Question 3Java | Exception Handling | Question 4Java | Exception Handling | Question 8Java | Exception Handling | Question 6Java | Exception Handling | Question 7Java | Exception Handling | Question 8Nested try blocks in Exception Handling in JavaFlow control in try catch finally in JavaTypes of Exception in Java with ExamplesArrays in JavaSplit() String method in Java with examplesArrays.sort() in Java with examplesFor-each loop in JavaReverse a string in JavaImprove Article Save Article Like Article Reflection in JavaDifficulty Level : MediumLast Updated : 22 Mar, 2017Reflection is an API which is used to examine or modify the behavior of methods, classes, interfaces at runtime.The required classes for reflection are provided under java.lang.reflect package.Reflection gives us information about the class to which an object belongs and also the methods of that class which can be executed by using the object.Through reflection we can invoke methods at runtime irrespective of the access specifier used with them.Reflection can be used to get information about –Class The getClass() method is used to get the name of the class to which an object belongs.Constructors The getConstructors() method is used to get the public constructors of the class to which an object belongs.Methods The getMethods() method is used to get the public methods of the class to which an objects belongs.// A simple Java program to demonstrate the use of reflectionimport java.lang.reflect.Method;import java.lang.reflect.Field;import java.lang.reflect.Constructor; // class whose object is to be createdclass Test{ // creating a private field private String s; // creating a public constructor public Test() { s = "GeeksforGeeks"; } // Creating a public method with no arguments public void method1() { System.out.println("The string is " + s); } // Creating a public method with int as argument public void method2(int n) { System.out.println("The number is " + n); } // creating a private method private void method3() { System.out.println("Private method invoked"); }} class Demo{ public static void main(String args[]) throws Exception { // Creating object whose property is to be checked Test obj = new Test(); // Creating class object from the object using // getclass method Class cls = obj.getClass(); System.out.println("The name of class is " + cls.getName()); // Getting the constructor of the class through the // object of the class Constructor constructor = cls.getConstructor(); System.out.println("The name of constructor is " + constructor.getName()); System.out.println("The public methods of class are : "); // Getting methods of the class through the object // of the class by using getMethods Method[] methods = cls.getMethods(); // Printing method names for (Method method:methods) System.out.println(method.getName()); // creates object of desired method by providing the // method name and parameter class as arguments to // the getDeclaredMethod Method methodcall1 = cls.getDeclaredMethod("method2", int.class); // invokes the method at runtime methodcall1.invoke(obj, 19); // creates object of the desired field by providing // the name of field as argument to the // getDeclaredField method Field field = cls.getDeclaredField("s"); // allows the object to access the field irrespective // of the access specifier used with the field field.setAccessible(true); // takes object and the new value to be assigned // to the field as arguments field.set(obj, "JAVA"); // Creates object of desired method by providing the // method name as argument to the getDeclaredMethod Method methodcall2 = cls.getDeclaredMethod("method1"); // invokes the method at runtime methodcall2.invoke(obj); // Creates object of the desired method by providing // the name of method as argument to the // getDeclaredMethod method Method methodcall3 = cls.getDeclaredMethod("method3"); // allows the object to access the method irrespective // of the access specifier used with the method methodcall3.setAccessible(true); // invokes the method at runtime methodcall3.invoke(obj); }}Output :The name of class is Test The name of constructor is Test The public methods of class are : method2 method1 wait wait wait equals toString hashCode getClass notify notifyAll The number is 19 The string is JAVA Private method invokedImportant observations :We can invoke an method through reflection if we know its name and parameter types. We use below two methods for this purposegetDeclaredMethod() : To create an object of method to be invoked. The syntax for this method isClass.getDeclaredMethod(name, parametertype) name- the name of method whose object is to be created parametertype - parameter is an array of Class objectsinvoke() : To invoke a method of the class at runtime we use following method–Method.invoke(Object, parameter) If the method of the class doesn’t accepts any parameter then null is passed as argument.Through reflection we can access the private variables and methods of a class with the help of its class object and invoke the method by using the object as discussed above. We use below two methods for this purpose.Class.getDeclaredField(FieldName) : Used to get the private field. Returns an object of type Field for specified field name.Field.setAccessible(true) : Allows to access the field irrespective of the access modifier used with the field. Advantages of Using Reflection:Extensibility Features: An application may make use of external, user-defined classes by creating instances of extensibility objects using their fully-qualified names.Debugging and testing tools: Debuggers use the property of reflection to examine private members on classes. Drawbacks:Performance Overhead: Reflective operations have slower performance than their non-reflective counterparts, and should be avoided in sections of code which are called frequently in performance-sensitive applications.Exposure of Internals: Reflective code breaks abstractions and therefore may change behavior with upgrades of the platform.Reference:https://docs.oracle.com/javase/tutorial/reflect/index.htmlThis article is contributed by Akash Ojha.If you like GeeksforGeeks and would like to contribute, you can also write an article and mail your article to contribute@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.Attention reader! Don’t stop learning now. Get hold of all the important Java Foundation and Collections concepts with the Fundamentals of Java and Java Collections Course at a student-friendly price and become industry ready. To complete your preparation from learning a language to DS Algo and many more, please refer Complete Interview Preparation Course.My Personal Notes arrow_drop_upSave LikeNext new operator vs newInstance() method in JavaRecommended ArticlesPage :How to call private method from another class in Java with help of Reflection API?17, Jun 19How to Access Private Field and Method Using Reflection in Java?02, Feb 21How to Invoke Method by Name in Java Dynamically Using Reflection?08, Feb 21Reflection Array Class in Java30, Nov 18How to prevent Singleton Pattern from Reflection, Serialization and Cloning?18, May 17JavaFX | Reflection Class17, Aug 18Difference Between java.sql.Time, java.sql.Timestamp and java.sql.Date in Java07, Apr 21How to Convert java.sql.Date to java.util.Date in Java?02, Feb 21Different Ways to Convert java.util.Date to java.time.LocalDate in Java05, Jan 21How to Convert java.util.Date to java.sql.Date in Java?23, Mar 21Java.util.BitSet class methods in Java with Examples | Set 218, Nov 16Java.Lang.Float class in Java27, Mar 17Java.io.BufferedInputStream class in Java20, Jan 17Java.io.ObjectInputStream Class in Java | Set 102, Feb 17Java.util.BitSet class in Java with Examples | Set 116, Nov 16Java.io.BufferedWriter class methods in Java29, Dec 16Java.io.DataOutputStream in Java06, Jan 17Java.io.StreamTokenizer Class in Java | Set 106, Jan 17Java.io.InputStream Class in Java09, Jan 17Java.io.SequenceInputStream in Java06, Jan 17Java.io.StreamTokenizer Class in Java | Set 209, Jan 17Java.io.Console class in Java09, Jan 17Java.io.FilterOutputStream Class in Java13, Jan 17Java.io.CharArrayReader Class in Java16, Jan 17Article Contributed By :GeeksforGeeksVote for difficultyCurrent difficulty : MediumEasy Normal Medium Hard ExpertArticle Tags :JavaPractice Tags :JavaReport IssueWriting code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load CommentsWhat's NewJava Backend Development- LIVE ClassesView DetailsComplete Interview PreparationView DetailsSystem Design-Live Classes for Working ProfessionalsView DetailsMost popular in JavaObject Oriented Programming (OOPs) Concept in JavaArrayList in JavaHashMap in Java with ExamplesMultidimensional Arrays in JavaInitialize an ArrayList in JavaMore related articles in JavaHow to iterate any Map in JavaHow to add an element to an Array in Java?Overriding in JavaLinkedList in JavaInterfaces in Java× 5th Floor, A-118,Sector-136, Noida, Uttar Pradesh - 201305 feedback@geeksforgeeks.orgCompanyAbout UsCareersPrivacy PolicyContact UsCopyright PolicyLearnAlgorithmsData StructuresLanguagesCS SubjectsVideo TutorialsWeb DevelopmentWeb TutorialsHTMLCSSJavaScriptBootstrapContributeWrite an ArticleWrite Interview ExperienceInternshipsVideos@geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It ! Start Your Coding Journey Now!Login Register