Java IO : Input-output in Java with Examples - GeeksforGeeksSkip to content TutorialsPractice DS & Algo.Must Do QuestionsDSA Topic-wiseDSA Company-wiseAlgorithmsAnalysis of AlgorithmsAsymptotic AnalysisWorst, Average and Best CasesAsymptotic NotationsLittle o and little omega notationsLower and Upper Bound TheoryAnalysis of LoopsSolving RecurrencesAmortized AnalysisWhat does 'Space Complexity' mean ?Pseudo-polynomial AlgorithmsPolynomial Time Approximation SchemeA Time Complexity QuestionSearching AlgorithmsSorting AlgorithmsGraph AlgorithmsPattern SearchingGeometric AlgorithmsMathematicalBitwise AlgorithmsRandomized AlgorithmsGreedy AlgorithmsDynamic ProgrammingDivide and ConquerBacktrackingBranch and BoundAll AlgorithmsData StructuresArraysLinked ListStackQueueBinary TreeBinary Search TreeHeapHashingGraphAdvanced Data StructureMatrixStringsAll Data StructuresInterview CornerCompany PreparationTop TopicsPractice Company QuestionsInterview ExperiencesExperienced InterviewsInternship InterviewsCompetititve ProgrammingDesign PatternsSystem Design TutorialMultiple Choice QuizzesLanguagesCC++JavaPythonC#JavaScriptjQuerySQLPHPScalaPerlGo LanguageHTMLCSSKotlinCS SubjectsMathematicsOperating SystemDBMSComputer NetworksComputer Organization and ArchitectureTheory of ComputationCompiler DesignDigital LogicSoftware EngineeringGATEGATE Computer Science NotesLast Minute NotesGATE CS Solved PapersGATE CS Original Papers and Official KeysGATE 2021 DatesGATE CS 2021 SyllabusImportant Topics for GATE CSWeb TechnologiesHTMLCSSJavaScriptAngularJSReactJSNodeJSBootstrapjQueryPHPSoftware DesignsSoftware Design PatternsSystem Design TutorialSchool LearningSchool ProgrammingMathematicsNumber SystemAlgebraTrigonometryStatisticsProbabilityGeometryMensurationCalculusMaths Notes (Class 8-12)Class 8 NotesClass 9 NotesClass 10 NotesClass 11 NotesClass 12 NotesNCERT SolutionsClass 8 Maths SolutionClass 9 Maths SolutionClass 10 Maths SolutionClass 11 Maths SolutionClass 12 Maths SolutionRD Sharma SolutionsClass 8 Maths SolutionClass 9 Maths SolutionClass 10 Maths SolutionClass 11 Maths SolutionClass 12 Maths SolutionPhysics Notes (Class 8-11)Class 8 NotesClass 9 NotesClass 10 NotesClass 11 NotesISRO CSISRO CS Solved PapersISRO CS Original Papers and Official KeysISRO CS Syllabus for Scientist/Engineer ExamUGC NET CSUGC NET CS Notes Paper IIUGC NET CS Notes Paper IIIUGC NET CS Solved PapersStudentCampus Ambassador ProgramSchool Ambassador ProgramProjectGeek of the MonthCampus Geek of the MonthPlacement CourseCompetititve ProgrammingTestimonialsGeek on the TopCareersInternshipJobsApply for JobsPost a JobCourses WriteCome write articles for us and get featuredPracticeLearn and code with the best industry expertsPremiumGet access to ad-free content, doubt assistance and more!JobsCome and find your dream job with usGeeks DigestQuizzesGeeks CampusGblog ArticlesIDECampus Mantri HomeSaved VideosCoursesGBlogPuzzlesWhat's New ? Change Language Data StructuresAlgorithmsInterview PreparationTopic-wise PracticeC++JavaPythonCompetitive ProgrammingMachine LearningWeb DevelopmentPuzzlesProject IdeasGFG School Related Articles â–²Related ArticlesJava.io.DataInputStream class in Java | Set 1Java.io.DataInputStream class in Java | Set 2Java.io.DataOutputStream in JavaJava IO : Input-output in Java with ExamplesBitwise Operators in JavaBitwise Right Shift Operators in Javainstanceof Keyword in JavaComparison of Autoboxed Integer objects in JavaAddition and Concatenation Using + Operator in JavaJava Numeric Promotion in Conditional ExpressionCharacter Stream Vs Byte Stream in JavaDoubleStream mapToObj() in JavaCommand Line Arguments in JavaScanner Class in JavaScanner and nextChar() in JavaDifference Between Scanner and BufferedReader Class in JavaFormatted output in JavaFast I/O in Java in Competitive ProgrammingWays to read input from console in JavaReturning Multiple values in JavaArrays in JavaHow to add an element to an Array in Java?How to determine length or size of an Array in Java?length vs length() in JavaSplit() String method in Java with examplesArrays.sort() in Java with examplesFor-each loop in JavaReverse a string in JavaTable of ContentsJava.io.DataInputStream class in Java | Set 1Java.io.DataInputStream class in Java | Set 2Java.io.DataOutputStream in JavaJava IO : Input-output in Java with ExamplesBitwise Operators in JavaBitwise Right Shift Operators in Javainstanceof Keyword in JavaComparison of Autoboxed Integer objects in JavaAddition and Concatenation Using + Operator in JavaJava Numeric Promotion in Conditional ExpressionCharacter Stream Vs Byte Stream in JavaDoubleStream mapToObj() in JavaCommand Line Arguments in JavaScanner Class in JavaScanner and nextChar() in JavaDifference Between Scanner and BufferedReader Class in JavaFormatted output in JavaFast I/O in Java in Competitive ProgrammingWays to read input from console in JavaReturning Multiple values in JavaArrays in JavaHow to add an element to an Array in Java?How to determine length or size of an Array in Java?length vs length() in JavaSplit() String method in Java with examplesArrays.sort() in Java with examplesFor-each loop in JavaReverse a string in JavaImprove Article Save Article Like Article Java IO : Input-output in Java with ExamplesDifficulty Level : MediumLast Updated : 01 Sep, 2021Java brings various Streams with its I/O package that helps the user to perform all the input-output operations. These streams support all the types of objects, data-types, characters, files etc to fully execute the I/O operations.Before exploring various input and output streams lets look at 3 standard or default streams that Java has to provide which are also most common in use:System.in: This is the standard input stream that is used to read characters from the keyboard or any other standard input device.System.out: This is the standard output stream that is used to produce the result of a program on an output device like the computer screen.Here is a list of the various print functions that we use to output statements:print(): This method in Java is used to display a text on the console. This text is passed as the parameter to this method in the form of String. This method prints the text on the console and the cursor remains at the end of the text at the console. The next printing takes place from just here.Syntax:System.out.print(parameter);Example:// Java code to illustrate print()import java.io.*; class Demo_print { public static void main(String[] args) { // using print() // all are printed in the // same line System.out.print("GfG! "); System.out.print("GfG! "); System.out.print("GfG! "); }}Output:GfG! GfG! GfG! println(): This method in Java is also used to display a text on the console. It prints the text on the console and the cursor moves to the start of the next line at the console. The next printing takes place from the next line.Syntax:System.out.println(parameter);Example:// Java code to illustrate println() import java.io.*; class Demo_print { public static void main(String[] args) { // using println() // all are printed in the // different line System.out.println("GfG! "); System.out.println("GfG! "); System.out.println("GfG! "); }}Output:GfG! GfG! GfG! printf(): This is the easiest of all methods as this is similar to printf in C. Note that System.out.print() and System.out.println() take a single argument, but printf() may take multiple arguments. This is used to format the output in Java.Example:// A Java program to demonstrate working of printf() in Javaclass JavaFormatter1 { public static void main(String args[]) { int x = 100; System.out.printf( "Printing simple" + " integer: x = %d\n", x); // this will print it upto // 2 decimal places System.out.printf( "Formatted with" + " precision: PI = %.2f\n", Math.PI); float n = 5.2f; // automatically appends zero // to the rightmost part of decimal System.out.printf( "Formatted to " + "specific width: n = %.4f\n", n); n = 2324435.3f; // here number is formatted from // right margin and occupies a // width of 20 characters System.out.printf( "Formatted to " + "right margin: n = %20.4f\n", n); }}Output:Printing simple integer: x = 100 Formatted with precision: PI = 3.14 Formatted to specific width: n = 5.2000 Formatted to right margin: n = 2324435.2500System.err: This is the standard error stream that is used to output all the error data that a program might throw, on a computer screen or any standard output device.This stream also uses all the 3 above-mentioned functions to output the error data:print()println()printf()Example:// Java code to illustrate standard// input output streams import java.io.*;public class SimpleIO { public static void main(String args[]) throws IOException { // InputStreamReader class to read input InputStreamReader inp = null; // Storing the input in inp inp = new InputStreamReader(System.in); System.out.println("Enter characters, " + " and '0' to quit."); char c; do { c = (char)inp.read(); System.out.println(c); } while (c != '0'); }}Input:GeeksforGeeks0Output:Enter characters, and '0' to quit. G e e k s f o r G e e k s 0Types of Streams:Depending on the type of operations, streams can be divided into two primary classes:Input Stream: These streams are used to read data that must be taken as an input from a source array or file or any peripheral device. For eg., FileInputStream, BufferedInputStream, ByteArrayInputStream etc.Output Stream: These streams are used to write data as outputs into an array or file or any output peripheral device. For eg., FileOutputStream, BufferedOutputStream, ByteArrayOutputStream etc.Depending on the types of file, Streams can be divided into two primary classes which can be further divided into other classes as can be seen through the diagram below followed by the explanations.ByteStream: This is used to process data byte by byte (8 bits). Though it has many classes, the FileInputStream and the FileOutputStream are the most popular ones. The FileInputStream is used to read from the source and FileOutputStream is used to write to the destination. Here is the list of various ByteStream Classes:Stream classDescriptionBufferedInputStreamIt is used for Buffered Input Stream.DataInputStreamIt contains method for reading java standard datatypes.FileInputStreamThis is used to reads from a fileInputStreamThis is an abstract class that describes stream input.PrintStreamThis contains the most used print() and println() methodBufferedOutputStreamThis is used for Buffered Output Stream.DataOutputStreamThis contains method for writing java standard data types.FileOutputStreamThis is used to write to a file.OutputStreamThis is an abstract class that describe stream output.Example:// Java Program illustrating the// Byte Stream to copy// contents of one file to another file.import java.io.*;public class BStream { public static void main( String[] args) throws IOException { FileInputStream sourceStream = null; FileOutputStream targetStream = null; try { sourceStream = new FileInputStream("sorcefile.txt"); targetStream = new FileOutputStream("targetfile.txt"); // Reading source file and writing // content to target file byte by byte int temp; while (( temp = sourceStream.read()) != -1) targetStream.write((byte)temp); } finally { if (sourceStream != null) sourceStream.close(); if (targetStream != null) targetStream.close(); } }}Output:Shows contents of file test.txt CharacterStream: In Java, characters are stored using Unicode conventions (Refer this for details). Character stream automatically allows us to read/write data character by character. Though it has many classes, the FileReader and the FileWriter are the most popular ones. FileReader and FileWriter are character streams used to read from the source and write to the destination respectively. Here is the list of various CharacterStream Classes:Stream classDescriptionBufferedReaderIt is used to handle buffered input stream.FileReaderThis is an input stream that reads from file.InputStreamReaderThis input stream is used to translate byte to character.OutputStreamReaderThis output stream is used to translate character to byte.ReaderThis is an abstract class that define character stream input.PrintWriterThis contains the most used print() and println() methodWriterThis is an abstract class that define character stream output.BufferedWriterThis is used to handle buffered output stream.FileWriterThis is used to output stream that writes to file.Example:// Java Program illustrating that// we can read a file in a human-readable// format using FileReader // Accessing FileReader, FileWriter,// and IOExceptionimport java.io.*;public class GfG { public static void main( String[] args) throws IOException { FileReader sourceStream = null; try { sourceStream = new FileReader("test.txt"); // Reading sourcefile and // writing content to target file // character by character. int temp; while (( temp = sourceStream.read()) != -1) System.out.println((char)temp); } finally { // Closing stream as no longer in use if (sourceStream != null) sourceStream.close(); } }}Refer here for the complete difference between Byte and Character Stream Class in Java.Attention reader! Donâ€™t stop learning now. Get hold of all the important Java Foundation and Collections concepts with the Fundamentals of Java and Java Collections Course at a student-friendly price and become industry ready. To complete your preparation from learning a language to DS Algo and many more, please refer Complete Interview Preparation Course.My Personal Notes arrow_drop_upSave LikePreviousJava.io.DataOutputStream in JavaNext Bitwise Operators in JavaRecommended ArticlesPage :Java.util.BitSet class methods in Java with Examples | Set 218, Nov 16Java.util.BitSet class in Java with Examples | Set 116, Nov 16Java 8 | Consumer Interface in Java with Examples24, Sep 18Java.util.LinkedList.poll(), pollFirst(), pollLast() with examples in Java24, Oct 17Java 8 | ArrayDeque removeIf() method in Java with Examples18, Sep 18Java lang.Long.lowestOneBit() method in Java with Examples16, May 18Java lang.Long.numberOfTrailingZeros() method in Java with Examples17, May 18Java lang.Long.numberOfLeadingZeros() method in Java with Examples21, May 18Java lang.Long.highestOneBit() method in Java with Examples21, May 18Java lang.Long.byteValue() method in Java with Examples23, May 18Java lang.Long.reverse() method in Java with Examples24, May 18Java Clock tickMinutes() method in Java with Examples24, Aug 18Java Clock withZone() method in Java with Examples24, Aug 18Java.util.concurrent.RecursiveAction class in Java with Examples17, Jun 19Java 8 | BiConsumer Interface in Java with Examples24, Sep 18Java 8 | IntToDoubleFunction Interface in Java with Examples28, Sep 18Java 8 | DoubleToLongFunction Interface in Java with Examples28, Sep 18Java 8 | IntToLongFunction Interface in Java with Examples28, Sep 18Java.util.concurrent.Phaser class in Java with Examples22, Apr 19Java.util.concurrent.RecursiveTask class in Java with Examples27, Jun 19Java.lang.Short toString() method in Java with Examples17, Jun 19Java.util.function.BiPredicate interface in Java with Examples18, Jul 19Java.util.function.DoublePredicate interface in Java with Examples18, Jul 19Java.util.function.LongPredicate interface in Java with Examples18, Jul 19Article Contributed By :Chinmoy Lenka@Chinmoy LenkaVote for difficultyCurrent difficulty : MediumEasy Normal Medium Hard ExpertImproved By :anikaseth98Article Tags :java-basicsJava-BufferedInputStreamJava-IO packageJavaPractice Tags :JavaReport IssueWriting code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load CommentsWhat's NewJava Backend Development- LIVE ClassesView DetailsJava FoundationView DetailsComplete Interview PreparationView DetailsMost popular in JavaObject Oriented Programming (OOPs) Concept in JavaArrayList in JavaHashMap in Java with ExamplesMultidimensional Arrays in JavaInitialize an ArrayList in JavaMore related articles in JavaHow to iterate any Map in JavaOverriding in JavaLinkedList in JavaInterfaces in JavaStack Class in JavaÃ— 5th Floor, A-118,Sector-136, Noida, Uttar Pradesh - 201305 feedback@geeksforgeeks.orgCompanyAbout UsCareersPrivacy PolicyContact UsCopyright PolicyLearnAlgorithmsData StructuresLanguagesCS SubjectsVideo TutorialsWeb DevelopmentWeb TutorialsHTMLCSSJavaScriptBootstrapContributeWrite an ArticleWrite Interview ExperienceInternshipsVideos@geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It ! Start Your Coding Journey Now!Login Register