Java 8 Optional Class - GeeksforGeeksSkip to content TutorialsPractice DS & Algo.Must Do QuestionsDSA Topic-wiseDSA Company-wiseAlgorithmsAnalysis of AlgorithmsAsymptotic AnalysisWorst, Average and Best CasesAsymptotic NotationsLittle o and little omega notationsLower and Upper Bound TheoryAnalysis of LoopsSolving RecurrencesAmortized AnalysisWhat does 'Space Complexity' mean ?Pseudo-polynomial AlgorithmsPolynomial Time Approximation SchemeA Time Complexity QuestionSearching AlgorithmsSorting AlgorithmsGraph AlgorithmsPattern SearchingGeometric AlgorithmsMathematicalBitwise AlgorithmsRandomized AlgorithmsGreedy AlgorithmsDynamic ProgrammingDivide and ConquerBacktrackingBranch and BoundAll AlgorithmsData StructuresArraysLinked ListStackQueueBinary TreeBinary Search TreeHeapHashingGraphAdvanced Data StructureMatrixStringsAll Data StructuresInterview CornerCompany PreparationTop TopicsPractice Company QuestionsInterview ExperiencesExperienced InterviewsInternship InterviewsCompetititve ProgrammingDesign PatternsSystem Design TutorialMultiple Choice QuizzesLanguagesCC++JavaPythonC#JavaScriptjQuerySQLPHPScalaPerlGo LanguageHTMLCSSKotlinCS SubjectsMathematicsOperating SystemDBMSComputer NetworksComputer Organization and ArchitectureTheory of ComputationCompiler DesignDigital LogicSoftware EngineeringGATEGATE Computer Science NotesLast Minute NotesGATE CS Solved PapersGATE CS Original Papers and Official KeysGATE 2021 DatesGATE CS 2021 SyllabusImportant Topics for GATE CSWeb TechnologiesHTMLCSSJavaScriptAngularJSReactJSNodeJSBootstrapjQueryPHPSoftware DesignsSoftware Design PatternsSystem Design TutorialSchool LearningSchool ProgrammingMathematicsNumber SystemAlgebraTrigonometryStatisticsProbabilityGeometryMensurationCalculusMaths Notes (Class 8-12)Class 8 NotesClass 9 NotesClass 10 NotesClass 11 NotesClass 12 NotesNCERT SolutionsClass 8 Maths SolutionClass 9 Maths SolutionClass 10 Maths SolutionClass 11 Maths SolutionClass 12 Maths SolutionRD Sharma SolutionsClass 8 Maths SolutionClass 9 Maths SolutionClass 10 Maths SolutionClass 11 Maths SolutionClass 12 Maths SolutionPhysics Notes (Class 8-11)Class 8 NotesClass 9 NotesClass 10 NotesClass 11 NotesISRO CSISRO CS Solved PapersISRO CS Original Papers and Official KeysISRO CS Syllabus for Scientist/Engineer ExamUGC NET CSUGC NET CS Notes Paper IIUGC NET CS Notes Paper IIIUGC NET CS Solved PapersStudentCampus Ambassador ProgramSchool Ambassador ProgramProjectGeek of the MonthCampus Geek of the MonthPlacement CourseCompetititve ProgrammingTestimonialsGeek on the TopCareersInternshipJobsApply for JobsPost a JobCourses WriteCome write articles for us and get featuredPracticeLearn and code with the best industry expertsPremiumGet access to ad-free content, doubt assistance and more!JobsCome and find your dream job with usGeeks DigestQuizzesGeeks CampusGblog ArticlesIDECampus Mantri HomeSaved VideosCoursesGBlogPuzzlesWhat's New ? Change Language Data StructuresAlgorithmsInterview PreparationTopic-wise PracticeC++JavaPythonCompetitive ProgrammingMachine LearningWeb DevelopmentPuzzlesProject IdeasGFG School Related Articles ▲Related ArticlesOptional isPresent() method in Java with examplesOptional Class | isPresent() functionJava 8 Optional ClassAnnotations in JavaSerialization and Deserialization in Java with Exampletransient keyword in Javavolatile Keyword in Javastrictfp keyword in javaNative Keyword in JavaMarker interface in JavaFunctional Interfaces in JavaLambda Expressions in Java 8Stream In Javathrow and throws in JavaUser-defined Custom Exception in JavaInfinity or Exception in Java when divide by 0?Java Multiple Catch BlockChained Exceptions in JavaNull Pointer Exception In JavaOutput of Java program | Set 12(Exception Handling)Java | Exception Handling | Question 1Java | Exception Handling | Question 2Java | Exception Handling | Question 3Java | Exception Handling | Question 4Java | Exception Handling | Question 8Arrays in JavaSplit() String method in Java with examplesArrays.sort() in Java with examplesFor-each loop in JavaReverse a string in JavaTable of ContentsOptional isPresent() method in Java with examplesOptional Class | isPresent() functionJava 8 Optional ClassAnnotations in JavaSerialization and Deserialization in Java with Exampletransient keyword in Javavolatile Keyword in Javastrictfp keyword in javaNative Keyword in JavaMarker interface in JavaFunctional Interfaces in JavaLambda Expressions in Java 8Stream In Javathrow and throws in JavaUser-defined Custom Exception in JavaInfinity or Exception in Java when divide by 0?Java Multiple Catch BlockChained Exceptions in JavaNull Pointer Exception In JavaOutput of Java program | Set 12(Exception Handling)Java | Exception Handling | Question 1Java | Exception Handling | Question 2Java | Exception Handling | Question 3Java | Exception Handling | Question 4Java | Exception Handling | Question 8Arrays in JavaSplit() String method in Java with examplesArrays.sort() in Java with examplesFor-each loop in JavaReverse a string in JavaImprove Article Save Article Like Article Java 8 Optional ClassDifficulty Level : MediumLast Updated : 15 Apr, 2019Java Optional Class : Every Java Programmer is familiar with NullPointerException. It can crash your code. And it is very hard to avoid it without using too many null checks.Java 8 has introduced a new class Optional in java.util package. It can help in writing a neat code without using too many null checks. By using Optional, we can specify alternate values to return or alternate code to run. This makes the code more readable because the facts which were hidden are now visible to the developer.// Java program without Optional Classpublic class OptionalDemo{ public static void main(String[] args) { String[] words = new String[10]; String word = words[5].toLowerCase(); System.out.print(word); } }Output :Exception in thread "main" java.lang.NullPointerExceptionTo avoid abnormal termination, we use the Optional class. In the following example, we are using Optional. So, our program can execute without crashing.The above program using Optional Class// Java program with Optional Classimport java.util.Optional; public class OptionalDemo{ public static void main(String[] args) { String[] words = new String[10]; Optional<String> checkNull = Optional.ofNullable(words[5]); if (checkNull.isPresent()) { String word = words[5].toLowerCase(); System.out.print(word); } else System.out.println("word is null"); } } Output :word is nullPrerequisite : Java 8 Optional ClassOptional is a container object which may or may not contain a non-null value. You must import java.util package to use this class. If a value is present, isPresent() will return true and get() will return the value. Additional methods that depend on the presence or absence of a contained value are provided, such as orElse() which returns a default value if value not present and ifPresent() which executes a block of code if the value is present. This is a value-based class, i.e their instances are :Final and immutable (though may contain references to mutable objects).Considered equal solely based on equals(), not based on reference equality(==).Do not have accessible constructors.Static Methods : Static methods are the methods in Java that can be called without creating an object of class. They are referenced by the class name itself or reference to the Object of that class.Syntax :public static void geek(String name) { // code to be executed.... } // Must have static modifier in their declaration. // Return type can be int, float, String or user-defined data type. Important Points : Since Static methods belong to the class, so they can be called to without creating the object of the class. Below given are some important points regarding Static Methods :Static method(s) are associated with the class in which they reside i.e. they can be called even without creating an instance of the class.They are designed with the aim to be shared among all Objects created from the same class.Static methods can not be overridden. But can be overloaded since they are resolved using static binding by the compiler at compile time.Following table shows the list of Static Methods provided by Optional Class :Instance Methods: Instance method are methods which require an object of its class to be created before it can be called. To invoke an instance method, we have to create an Object of the class within which it is defined.Syntax :public void geek(String name) { // code to be executed.... } // Return type can be int, float String or user defined data type. Important Points : Instance Methods can be called within the same class in which they reside or from the different classes defined either in the same package or other packages depend on the access type provided to the desired instance method. Below given are some important points regarding Instance Methods :Instance method(s) belong to the Object of the class not to the class i.e. they can be called after creating the Object of the class.Every individual Object created from the class has its own copy of the instance method(s) of that class.They can be overridden since they are resolved using dynamic binding at run time.Following table shows the list of Instance Methods provided by Optional Class :Concrete Methods : A concrete method means, the method have complete definition but it can be overridden in the inherited class. If we make this method final, then it can not be overridden. Declaring method or class “final” means it’s implementation is complete. It is compulsory to override the abstract methods. Concrete Methods can be overridden in the inherited classes if they are not final.Following table shows the list of Concrete Methods provided by Optional Class :Below given are some examples :Example 1 :// Java program to illustrate// optional class methodsimport java.util.Optional; class GFG { // Driver code public static void main(String[] args) { // creating a string array String[] str = new String[5]; // Setting value for 2nd index str[2] = "Geeks Classes are coming soon"; // It returns an empty instance of Optional class Optional<String> empty = Optional.empty(); System.out.println(empty); // It returns a non-empty Optional Optional<String> value = Optional.of(str[2]); System.out.println(value); }}Output :Optional.empty Optional[Geeks Classes are coming soon] Example 2 :// Java program to illustrate// optional class methodsimport java.util.Optional; class GFG { // Driver code public static void main(String[] args) { // creating a string array String[] str = new String[5]; // Setting value for 2nd index str[2] = "Geeks Classes are coming soon"; // It returns a non-empty Optional Optional<String> value = Optional.of(str[2]); // It returns value of an Optional. // If value is not present, it throws // an NoSuchElementException System.out.println(value.get()); // It returns hashCode of the value System.out.println(value.hashCode()); // It returns true if value is present, // otherwise false System.out.println(value.isPresent()); }}Output :Geeks Classes are coming soon 1967487235 true Reference : Java 8 Optional ClassThis article is contributed by loginakanksha and Sahil Bansal . If you like GeeksforGeeks and would like to contribute, you can also write an article using contribute.geeksforgeeks.org or mail your article to contribute@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.Attention reader! Don’t stop learning now. Get hold of all the important Java Foundation and Collections concepts with the Fundamentals of Java and Java Collections Course at a student-friendly price and become industry ready. To complete your preparation from learning a language to DS Algo and many more, please refer Complete Interview Preparation Course.My Personal Notes arrow_drop_upSave LikePreviousOptional Class | isPresent() functionNext Annotations in JavaRecommended ArticlesPage :Optional Class | Guava | Java16, May 18How to avoid NullPointerException in Java using Optional class?16, Apr 19Optional Class | isPresent() function22, Feb 18Optional stream() method in Java with examples30, Jul 19Optional isPresent() method in Java with examples30, Jul 19Optional empty() method in Java with examples30, Jul 19Optional filter() method in Java with examples30, Jul 19Optional ofNullable() method in Java with examples30, Jul 19Optional get() method in Java with examples30, Jul 19Optional toString() method in Java with examples30, Jul 19Optional equals() method in Java with Examples30, Jul 19Optional hashCode() method in Java with examples30, Jul 19Optional orElse() method in Java with examples30, Jul 19Optional or() method in Java with examples30, Jul 19Optional of() method in Java with examples30, Jul 19Optional orElseGet() method in Java with examples30, Jul 19Optional orElseThrow() method in Java with examples30, Jul 19Optional ifPresentOrElse() method in Java with examples30, Jul 19Java.lang.Class class in Java | Set 130, Mar 17Java.lang.Class class in Java | Set 203, Apr 17Implement Pair Class with Unit Class in Java using JavaTuples20, Sep 18Implement Triplet Class with Pair Class in Java using JavaTuples20, Sep 18Implement Quintet Class with Quartet Class in Java using JavaTuples20, Sep 18Implement Quartet Class with Triplet Class in Java using JavaTuples20, Sep 18Article Contributed By :GeeksforGeeksVote for difficultyCurrent difficulty : MediumEasy Normal Medium Hard ExpertImproved By :Kirti_MangalArticle Tags :JavaPractice Tags :JavaReport IssueWriting code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load CommentsWhat's NewJava Backend Development- LIVE ClassesView DetailsComplete Interview PreparationView DetailsSystem Design-Live Classes for Working ProfessionalsView DetailsMost popular in JavaObject Oriented Programming (OOPs) Concept in JavaArrayList in JavaHashMap in Java with ExamplesMultidimensional Arrays in JavaInitialize an ArrayList in JavaMore related articles in JavaHow to iterate any Map in JavaHow to add an element to an Array in Java?Overriding in JavaLinkedList in JavaInterfaces in Java× 5th Floor, A-118,Sector-136, Noida, Uttar Pradesh - 201305 feedback@geeksforgeeks.orgCompanyAbout UsCareersPrivacy PolicyContact UsCopyright PolicyLearnAlgorithmsData StructuresLanguagesCS SubjectsVideo TutorialsWeb DevelopmentWeb TutorialsHTMLCSSJavaScriptBootstrapContributeWrite an ArticleWrite Interview ExperienceInternshipsVideos@geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It ! Start Your Coding Journey Now!Login Register