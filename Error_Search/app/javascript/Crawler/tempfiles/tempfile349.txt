ConcurrentSkipListSet in Java with Examples - GeeksforGeeksSkip to content TutorialsPractice DS & Algo.Must Do QuestionsDSA Topic-wiseDSA Company-wiseAlgorithmsAnalysis of AlgorithmsAsymptotic AnalysisWorst, Average and Best CasesAsymptotic NotationsLittle o and little omega notationsLower and Upper Bound TheoryAnalysis of LoopsSolving RecurrencesAmortized AnalysisWhat does 'Space Complexity' mean ?Pseudo-polynomial AlgorithmsPolynomial Time Approximation SchemeA Time Complexity QuestionSearching AlgorithmsSorting AlgorithmsGraph AlgorithmsPattern SearchingGeometric AlgorithmsMathematicalBitwise AlgorithmsRandomized AlgorithmsGreedy AlgorithmsDynamic ProgrammingDivide and ConquerBacktrackingBranch and BoundAll AlgorithmsData StructuresArraysLinked ListStackQueueBinary TreeBinary Search TreeHeapHashingGraphAdvanced Data StructureMatrixStringsAll Data StructuresInterview CornerCompany PreparationTop TopicsPractice Company QuestionsInterview ExperiencesExperienced InterviewsInternship InterviewsCompetititve ProgrammingDesign PatternsSystem Design TutorialMultiple Choice QuizzesLanguagesCC++JavaPythonC#JavaScriptjQuerySQLPHPScalaPerlGo LanguageHTMLCSSKotlinCS SubjectsMathematicsOperating SystemDBMSComputer NetworksComputer Organization and ArchitectureTheory of ComputationCompiler DesignDigital LogicSoftware EngineeringGATEGATE Computer Science NotesLast Minute NotesGATE CS Solved PapersGATE CS Original Papers and Official KeysGATE 2021 DatesGATE CS 2021 SyllabusImportant Topics for GATE CSWeb TechnologiesHTMLCSSJavaScriptAngularJSReactJSNodeJSBootstrapjQueryPHPSoftware DesignsSoftware Design PatternsSystem Design TutorialSchool LearningSchool ProgrammingMathematicsNumber SystemAlgebraTrigonometryStatisticsProbabilityGeometryMensurationCalculusMaths Notes (Class 8-12)Class 8 NotesClass 9 NotesClass 10 NotesClass 11 NotesClass 12 NotesNCERT SolutionsClass 8 Maths SolutionClass 9 Maths SolutionClass 10 Maths SolutionClass 11 Maths SolutionClass 12 Maths SolutionRD Sharma SolutionsClass 8 Maths SolutionClass 9 Maths SolutionClass 10 Maths SolutionClass 11 Maths SolutionClass 12 Maths SolutionPhysics Notes (Class 8-11)Class 8 NotesClass 9 NotesClass 10 NotesClass 11 NotesISRO CSISRO CS Solved PapersISRO CS Original Papers and Official KeysISRO CS Syllabus for Scientist/Engineer ExamUGC NET CSUGC NET CS Notes Paper IIUGC NET CS Notes Paper IIIUGC NET CS Solved PapersStudentCampus Ambassador ProgramSchool Ambassador ProgramProjectGeek of the MonthCampus Geek of the MonthPlacement CourseCompetititve ProgrammingTestimonialsGeek on the TopCareersInternshipJobsApply for JobsPost a JobCourses WriteCome write articles for us and get featuredPracticeLearn and code with the best industry expertsPremiumGet access to ad-free content, doubt assistance and more!JobsCome and find your dream job with usGeeks DigestQuizzesGeeks CampusGblog ArticlesIDECampus Mantri HomeSaved VideosCoursesGBlogPuzzlesWhat's New ? Change Language Data StructuresAlgorithmsInterview PreparationTopic-wise PracticeC++JavaPythonCompetitive ProgrammingMachine LearningWeb DevelopmentPuzzlesProject IdeasGFG School Related Articles â–²Related ArticlesSet in JavaAbstractSet Class in Java with ExamplesEnumSet in JavaHashSet in JavaTreeSet in JavaConcurrentSkipListSet in Java with ExamplesCopyOnWriteArraySet in JavaLinkedHashSet in Java with ExamplesConvert HashSet to TreeSet in JavaDifference and similarities between HashSet, LinkedHashSet and TreeSet in JavaLinkedHashMap and LinkedHashSet in JavaDifference between ArrayList and HashSet in JavaHow to sort TreeSet in descending order in Java?How to sort HashSet in JavaHow to Loop Over TreeSet in Java?Difference between HashMap and HashSetConvert Set of String to Array of String in JavaProgram to convert Array to Set in JavaProgram to convert set of String to set of Integer in JavaProgram to convert a Set to Stream in Java using GenericsTable of ContentsSet in JavaAbstractSet Class in Java with ExamplesEnumSet in JavaHashSet in JavaTreeSet in JavaConcurrentSkipListSet in Java with ExamplesCopyOnWriteArraySet in JavaLinkedHashSet in Java with ExamplesConvert HashSet to TreeSet in JavaDifference and similarities between HashSet, LinkedHashSet and TreeSet in JavaLinkedHashMap and LinkedHashSet in JavaDifference between ArrayList and HashSet in JavaHow to sort TreeSet in descending order in Java?How to sort HashSet in JavaHow to Loop Over TreeSet in Java?Difference between HashMap and HashSetConvert Set of String to Array of String in JavaProgram to convert Array to Set in JavaProgram to convert set of String to set of Integer in JavaProgram to convert a Set to Stream in Java using GenericsImprove Article Save Article Like Article ConcurrentSkipListSet in Java with ExamplesLast Updated : 11 Nov, 2020The ConcurrentSkipListSet class in Java is a part of the Java Collection Framework and implements the Collection interface and the AbstractSet class. It provides a scalable and concurrent version of NavigableSet in Java. The implementation of ConcurrentSkipListSet is based on ConcurrentSkipListMap. The elements in ConcurrentSkipListSet are sorted by default in their natural ordering or by a Comparator provided at set creation time, depending on which constructor is used.Since it implements SortedSet<E> and NavigableSet<E>, it is similar to TreeSet with an added feature of being concurrent. Since it is a thread-safe, it can be used by multiple threads concurrently whereas TreeSet is not thread-safe.Class Hierarchy: Declaration: public class ConcurrentSkipListSet<E> extends AbstractSet<E> implements NavigableSet<E>, Cloneable, Serializable Where E is the type of elements maintained by this collection Some important points on ConcurrentSkipListSet:It implements Serializable, Cloneable, Iterable<E>, Collection<E>, NavigableSet<E>, Set<E>, SortedSet<E> interfaces.It does not allow null elements, because null arguments and return values cannot be reliably distinguished from the absence of elements.Its implementation provides average log(n) time cost for contains, add, and remove operations and their variants.It is thread-safe.It should be preferred over implementing Set interface when concurrent modification of set is required.Constructors:1. ConcurrentSkipListSet(): This constructor is used to construct an empty set.ConcurrentSkipListSet<E> set = new ConcurrentSkipListSet<E>();2. ConcurrentSkipListSet(Collection<E> c): This constructor is used to construct a set with the elements of the Collection passed as the parameter.ConcurrentSkipListSet<E> set = new ConcurrentSkipListSet<E>(Collection<E> c);3. ConcurrentSkipListSet(Comparator<E> comparator): This constructor is used to construct a new, empty set that orders its elements according to the specified comparator.ConcurrentSkipListSet<E> set = new ConcurrentSkipListSet<E>(Comparator<E> comparator);4. ConcurrentSkipListSet(SortedSet<E> s): This constructor is used to construct a new set containing the same elements and using the same ordering as the specified sorted set.ConcurrentSkipListSet<E> set = new ConcurrentSkipListSet<E>(SortedSet<E> s);Example 1:Java// Java program to demonstrate ConcurrentSkipListSet import java.util.*;import java.util.concurrent.ConcurrentSkipListSet; class ConcurrentSkipListSetLastExample1 { public static void main(String[] args) { // Initializing the set using // ConcurrentSkipListSet() ConcurrentSkipListSet<Integer> set = new ConcurrentSkipListSet<Integer>(); // Adding elements to this set set.add(78); set.add(64); set.add(12); set.add(45); set.add(8); // Printing the ConcurrentSkipListSet System.out.println("ConcurrentSkipListSet: " + set); // Initializing the set using // ConcurrentSkipListSet(Collection) ConcurrentSkipListSet<Integer> set1 = new ConcurrentSkipListSet<Integer>(set); // Printing the ConcurrentSkipListSet1 System.out.println("ConcurrentSkipListSet1: " + set1); // Initializing the set using // ConcurrentSkipListSet() ConcurrentSkipListSet<String> set2 = new ConcurrentSkipListSet<>(); // Adding elements to this set set2.add("Apple"); set2.add("Lemon"); set2.add("Banana"); set2.add("Apple"); // creating an iterator Iterator<String> itr = set2.iterator(); System.out.print("Fruits Set: "); while (itr.hasNext()) { System.out.print(itr.next() + " "); } }}Output:ConcurrentSkipListSet: [8, 12, 45, 64, 78] ConcurrentSkipListSet1: [8, 12, 45, 64, 78] Fruits Set: Apple Banana Lemon Example 2: Java// Java program to demonstrate ConcurrentSkipListSet import java.util.concurrent.ConcurrentSkipListSet; class ConcurrentSkipListSetLastExample1 { public static void main(String[] args) { // Initializing the set using ConcurrentSkipListSet() ConcurrentSkipListSet<Integer> set = new ConcurrentSkipListSet<Integer>(); // Adding elements to this set // using add() method set.add(78); set.add(64); set.add(12); set.add(45); set.add(8); // Printing the ConcurrentSkipListSet System.out.println("ConcurrentSkipListSet: " + set); // Printing the highest element of the set // using last() method System.out.println("The highest element of the set: " + set.last()); // Retrieving and removing first element of the set System.out.println("The first element of the set: " + set.pollFirst()); // Checks if 9 is present in the set // using contains() method if (set.contains(9)) System.out.println("9 is present in the set."); else System.out.println("9 is not present in the set."); // Printing the size of the set // using size() method System.out.println("Number of elements in the set = " + set.size()); }}Output:ConcurrentSkipListSet: [8, 12, 45, 64, 78] The highest element of the set: 78 The first element of the set: 8 9 is not present in the set. Number of elements in the set = 4Methods of ConcurrentSkipListSetMETHODDESCRIPTIONadd(E e)Adds the specified element to this set if it is not already present.ceiling(E e)Returns the least element in this set greater than or equal to the given element, or null if there is no such element. clear()Removes all of the elements from this set. clone()Returns a shallow copy of this ConcurrentSkipListSet instance.comparator()Returns the comparator used to order the elements in this set, or null if this set uses the natural ordering of its elements.contains(Object o)Returns true if this set contains the specified element.descendingIterator()Returns an iterator over the elements in this set in descending order.descendingSet()Returns a reverse order view of the elements contained in this set.equals(Object o)Compares the specified object with this set for equality.first()Returns the first (lowest) element currently in this set.floor(E e)Returns the greatest element in this set less than or equal to the given element, or null if there is no such element.headSet(E toElement)Returns a view of the portion of this set whose elements are strictly less than toElement.headSet(E toElement, boolean inclusive)Returns a view of the portion of this set whose elements are less than (or equal to, if inclusive is true) toElement.higher(E e)Returns the least element in this set strictly greater than the given element, or null if there is no such element.isEmpty()Returns an iterator over the elements in this set in ascending order.last()Returns the last (highest) element currently in this set.lower(E e)Returns the greatest element in this set strictly less than the given element, or null if there is no such element.pollFirst()Retrieves and removes the first (lowest) element, or returns null if this set is empty.pollLast()Retrieves and removes the last (highest) element, or returns null if this set is empty. remove(Object o)Removes the specified element from this set if it is present.removeAll(Collection<?> c)Removes from this set all of its elements that are contained in the specified collection.size()Returns the number of elements in this set.spliterator()Returns a Spliterator over the elements in this set. subSet(E fromElement, boolean fromInclusive, E toElement, boolean toInclusive)Returns a view of the portion of this set whose elements range from fromElement to toElement.subSet(E fromElement, E toElement)Returns a view of the portion of this set whose elements range from fromElement, inclusive, to toElement, exclusive.tailSet(E fromElement)Returns a view of the portion of this set whose elements are greater than or equal to fromElement.tailSet(E fromElement, boolean inclusive)Returns a view of the portion of this set whose elements are greater than (or equal to, if inclusive is true) fromElement.Methods inherited from class java.util.AbstractSetMETHODDESCRIPTIONhashCode()Returns the hash code value for this set.Methods inherited from class java.util.AbstractCollectionMETHODDESCRIPTIONaddAll(Collection<? extends E> c)Adds all of the elements in the specified collection to this collection (optional operation).containsAll(Collection<?> c)Returns true if this collection contains all of the elements in the specified collection.retainAll(Collection<?> c)Retains only the elements in this collection that are contained in the specified collection (optional operation).toArray()Returns an array containing all of the elements in this collection.toArray(T[] a)Returns an array containing all of the elements in this collection; the runtime type of the returned array is that of the specified array.toString()Returns a string representation of this collection.Methods inherited from interface java.util.SetMETHODDESCRIPTIONaddAll(Collection<? extends E> c)Adds all of the elements in the specified collection to this set if theyâ€™re not already present (optional operation).containsAll(Collection<?> c)Returns true if this set contains all of the elements of the specified collection.hashCode()Returns the hash code value for this set.retainAll(Collection<?> c)Retains only the elements in this set that are contained in the specified collection (optional operation).toArray()Returns an array containing all of the elements in this set.toArray(T[] a)Returns an array containing all of the elements in this set; the runtime type of the returned array is that of the specified array.Methods inherited from interface java.util.CollectionMETHODDESCRIPTIONparallelStream()Returns a possibly parallel Stream with this collection as its source.removeIf(Predicate<? super E> filter)Removes all of the elements of this collection that satisfy the given predicate.stream()Returns a sequential Stream with this collection as its source.Methods inherited from interface java.lang.IterableMETHODDESCRIPTIONforEach(Consumer<? super T> action)Performs the given action for each element of the Iterable until all elements have been processed or the action throws an exception.Attention reader! Donâ€™t stop learning now. Get hold of all the important Java Foundation and Collections concepts with the Fundamentals of Java and Java Collections Course at a student-friendly price and become industry ready. To complete your preparation from learning a language to DS Algo and many more, please refer Complete Interview Preparation Course.My Personal Notes arrow_drop_upSave LikePreviousTreeSet in JavaNext CopyOnWriteArraySet in JavaRecommended ArticlesPage :ConcurrentSkipListSet lower() method in Java with Examples25, Jan 19ConcurrentSkipListSet comparator() method in Java with Examples18, Mar 19ConcurrentSkipListSet tailSet() method in Java with Examples26, Dec 18ConcurrentSkipListSet subSet() method in Java with Examples26, Dec 18ConcurrentSkipListSet first() method in Java17, Sep 18ConcurrentSkipListSet equals() method in Java17, Sep 18ConcurrentSkipListSet descendingSet() method in Java17, Sep 18ConcurrentSkipListSet remove() method in Java17, Sep 18ConcurrentSkipListSet size() method in Java17, Sep 18ConcurrentSkipListSet clear() method in Java17, Sep 18ConcurrentSkipListSet isEmpty() method in Java17, Sep 18ConcurrentSkipListSet contains() method in Java17, Sep 18ConcurrentSkipListSet clone() method in Java17, Sep 18ConcurrentSkipListSet add() method in Java17, Sep 18ConcurrentSkipListSet ceiling() method in Java17, Sep 18ConcurrentSkipListSet iterator() method in Java17, Sep 18ConcurrentSkipListSet descendingIterator() method in Java17, Sep 18ConcurrentSkipListSet spliterator() method in Java17, Sep 18ConcurrentSkipListSet floor() method in Java21, Sep 18ConcurrentSkipListSet headSet() method in Java21, Sep 18ConcurrentSkipListSet higher() method in Java21, Sep 18ConcurrentSkipListSet last() method in Java21, Sep 18ConcurrentSkipListSet pollFirst() method in Java21, Sep 18ConcurrentSkipListSet pollLast() method in Java21, Sep 18Article Contributed By :RishabhPrabhu@RishabhPrabhuVote for difficultyEasy Normal Medium Hard ExpertImproved By :GaneshchowdharysadanalaArticle Tags :Java - util packageJava-CollectionsJava-ConcurrentSkipListSetJava-FunctionsJavaPractice Tags :JavaJava-CollectionsReport IssueWriting code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load CommentsWhat's NewJava Backend Development- LIVE ClassesView DetailsComplete Interview PreparationView DetailsSystem Design-Live Classes for Working ProfessionalsView DetailsMost popular in JavaArrays in JavaObject Oriented Programming (OOPs) Concept in JavaSplit() String method in Java with examplesFor-each loop in JavaArrays.sort() in Java with examplesMore related articles in JavaReverse a string in JavaArrayList in JavaHashMap in Java with ExamplesMultidimensional Arrays in JavaInitialize an ArrayList in JavaÃ— 5th Floor, A-118,Sector-136, Noida, Uttar Pradesh - 201305 feedback@geeksforgeeks.orgCompanyAbout UsCareersPrivacy PolicyContact UsCopyright PolicyLearnAlgorithmsData StructuresLanguagesCS SubjectsVideo TutorialsWeb DevelopmentWeb TutorialsHTMLCSSJavaScriptBootstrapContributeWrite an ArticleWrite Interview ExperienceInternshipsVideos@geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It ! Start Your Coding Journey Now!Login Register