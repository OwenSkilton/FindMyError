Garbage Collection in Java - GeeksforGeeksSkip to content TutorialsPractice DS & Algo.Must Do QuestionsDSA Topic-wiseDSA Company-wiseAlgorithmsAnalysis of AlgorithmsAsymptotic AnalysisWorst, Average and Best CasesAsymptotic NotationsLittle o and little omega notationsLower and Upper Bound TheoryAnalysis of LoopsSolving RecurrencesAmortized AnalysisWhat does 'Space Complexity' mean ?Pseudo-polynomial AlgorithmsPolynomial Time Approximation SchemeA Time Complexity QuestionSearching AlgorithmsSorting AlgorithmsGraph AlgorithmsPattern SearchingGeometric AlgorithmsMathematicalBitwise AlgorithmsRandomized AlgorithmsGreedy AlgorithmsDynamic ProgrammingDivide and ConquerBacktrackingBranch and BoundAll AlgorithmsData StructuresArraysLinked ListStackQueueBinary TreeBinary Search TreeHeapHashingGraphAdvanced Data StructureMatrixStringsAll Data StructuresInterview CornerCompany PreparationTop TopicsPractice Company QuestionsInterview ExperiencesExperienced InterviewsInternship InterviewsCompetititve ProgrammingDesign PatternsSystem Design TutorialMultiple Choice QuizzesLanguagesCC++JavaPythonC#JavaScriptjQuerySQLPHPScalaPerlGo LanguageHTMLCSSKotlinCS SubjectsMathematicsOperating SystemDBMSComputer NetworksComputer Organization and ArchitectureTheory of ComputationCompiler DesignDigital LogicSoftware EngineeringGATEGATE Computer Science NotesLast Minute NotesGATE CS Solved PapersGATE CS Original Papers and Official KeysGATE 2021 DatesGATE CS 2021 SyllabusImportant Topics for GATE CSWeb TechnologiesHTMLCSSJavaScriptAngularJSReactJSNodeJSBootstrapjQueryPHPSoftware DesignsSoftware Design PatternsSystem Design TutorialSchool LearningSchool ProgrammingMathematicsNumber SystemAlgebraTrigonometryStatisticsProbabilityGeometryMensurationCalculusMaths Notes (Class 8-12)Class 8 NotesClass 9 NotesClass 10 NotesClass 11 NotesClass 12 NotesNCERT SolutionsClass 8 Maths SolutionClass 9 Maths SolutionClass 10 Maths SolutionClass 11 Maths SolutionClass 12 Maths SolutionRD Sharma SolutionsClass 8 Maths SolutionClass 9 Maths SolutionClass 10 Maths SolutionClass 11 Maths SolutionClass 12 Maths SolutionPhysics Notes (Class 8-11)Class 8 NotesClass 9 NotesClass 10 NotesClass 11 NotesISRO CSISRO CS Solved PapersISRO CS Original Papers and Official KeysISRO CS Syllabus for Scientist/Engineer ExamUGC NET CSUGC NET CS Notes Paper IIUGC NET CS Notes Paper IIIUGC NET CS Solved PapersStudentCampus Ambassador ProgramSchool Ambassador ProgramProjectGeek of the MonthCampus Geek of the MonthPlacement CourseCompetititve ProgrammingTestimonialsGeek on the TopCareersInternshipJobsApply for JobsPost a JobCourses WriteCome write articles for us and get featuredPracticeLearn and code with the best industry expertsPremiumGet access to ad-free content, doubt assistance and more!JobsCome and find your dream job with usGeeks DigestQuizzesGeeks CampusGblog ArticlesIDECampus Mantri HomeSaved VideosCoursesGBlogPuzzlesWhat's New ? Change Language Data StructuresAlgorithmsInterview PreparationTopic-wise PracticeC++JavaPythonCompetitive ProgrammingMachine LearningWeb DevelopmentPuzzlesProject IdeasGFG School Related Articles ▲Related ArticlesJava.util.Objects class in JavaDifferent ways to create objects in JavaHow are Java objects stored in memory?Passing and Returning Objects in JavaLambda Expressions in Java 8Serialization and Deserialization in Java with ExampleGarbage Collection in JavaHow to prevent objects of a class from Garbage Collection in JavaCount number of a class objects created in JavaClasses and Objects in JavaUnderstanding Classes and Objects in JavaInner Class in JavaAnonymous Inner Class in JavaNested Classes in JavaTable of ContentsJava.util.Objects class in JavaDifferent ways to create objects in JavaHow are Java objects stored in memory?Passing and Returning Objects in JavaLambda Expressions in Java 8Serialization and Deserialization in Java with ExampleGarbage Collection in JavaHow to prevent objects of a class from Garbage Collection in JavaCount number of a class objects created in JavaClasses and Objects in JavaUnderstanding Classes and Objects in JavaInner Class in JavaAnonymous Inner Class in JavaNested Classes in JavaImprove Article Save Article Like Article Garbage Collection in JavaDifficulty Level : EasyLast Updated : 07 Dec, 2021Garbage collection in Java is the process by which Java programs perform automatic memory management. Java programs compile to bytecode that can be run on a Java Virtual Machine, or JVM for short. When Java programs run on the JVM, objects are created on the heap, which is a portion of memory dedicated to the program. Eventually, some objects will no longer be needed. The garbage collector finds these unused objects and deletes them to free up memory.What is Garbage Collection?In C/C++, a programmer is responsible for both the creation and destruction of objects. Usually, programmer neglects the destruction of useless objects. Due to this negligence, at a certain point, sufficient memory may not be available to create new objects, and the entire program will terminate abnormally, causing OutOfMemoryErrors.But in Java, the programmer need not care for all those objects which are no longer in use. Garbage collector destroys these objects. The main objective of Garbage Collector is to free heap memory by destroying unreachable objects. The garbage collector is the best example of the Daemon thread as it is always running in the background. How Does Garbage Collection in Java works?Java garbage collection is an automatic process. Automatic garbage collection is the process of looking at heap memory, identifying which objects are in use and which are not, and deleting the unused objects. An in-use object, or a referenced object, means that some part of your program still maintains a pointer to that object. An unused or unreferenced object is no longer referenced by any part of your program. So the memory used by an unreferenced object can be reclaimed. The programmer does not need to mark objects to be deleted explicitly. The garbage collection implementation lives in the JVM. Types of Activities in Java Garbage CollectionTwo types of garbage collection activity usually happen in Java. These are:Minor or incremental Garbage Collection: It is said to have occurred when unreachable objects in the young generation heap memory are removed.Major or Full Garbage Collection: It is said to have occurred when the objects that survived the minor garbage collection and copied into the old generation or permanent generation heap memory are removed. When compared to the young generation, garbage collection happens less frequently in the old generation.Important Concepts Related to Garbage Collection in Java1. Unreachable objects: An object is said to be unreachable if it doesn’t contain any reference to it. Also, note that objects which are part of the island of isolation are also unreachable. Integer i = new Integer(4); // the new Integer object is reachable via the reference in 'i' i = null; // the Integer object is no longer reachable. 2. Eligibility for garbage collection: An object is said to be eligible for GC(garbage collection) if it is unreachable. After i = null, integer object 4 in the heap area is suitable for garbage collection in the above image.Ways to make an object eligible for Garbage CollectorEven though the programmer is not responsible for destroying useless objects but it is highly recommended to make an object unreachable(thus eligible for GC) if it is no longer required.There are generally four ways to make an object eligible for garbage collection.Nullifying the reference variableRe-assigning the reference variableAn object created inside the methodIsland of IsolationWays for requesting JVM to run Garbage CollectorOnce we make an object eligible for garbage collection, it may not destroy immediately by the garbage collector. Whenever JVM runs the Garbage Collector program, then only the object will be destroyed. But when JVM runs Garbage Collector, we can not expect.We can also request JVM to run Garbage Collector. There are two ways to do it : Using System.gc() method: System class contain static method gc() for requesting JVM to run Garbage Collector.Using Runtime.getRuntime().gc() method: Runtime class allows the application to interface with the JVM in which the application is running. Hence by using its gc() method, we can request JVM to run Garbage Collector.There is no guarantee that any of the above two methods will run Garbage Collector.The call System.gc() is effectively equivalent to the call : Runtime.getRuntime().gc()FinalizationJust before destroying an object, Garbage Collector calls finalize() method on the object to perform cleanup activities. Once finalize() method completes, Garbage Collector destroys that object.finalize() method is present in Object class with the following prototype.protected void finalize() throws ThrowableBased on our requirement, we can override finalize() method for performing our cleanup activities like closing connection from the database. The finalize() method is called by Garbage Collector, not JVM. However, Garbage Collector is one of the modules of JVM.Object class finalize() method has an empty implementation. Thus, it is recommended to override the finalize() method to dispose of system resources or perform other cleanups.The finalize() method is never invoked more than once for any object.If an uncaught exception is thrown by the finalize() method, the exception is ignored, and the finalization of that object terminates.Advantages of Garbage Collection in JavaThe advantages of Garbage Collection in Java are:It makes java memory-efficient because the garbage collector removes the unreferenced objects from heap memory.It is automatically done by the garbage collector(a part of JVM), so we don’t need extra effort.Real-World ExampleLet’s take a real-life example, where we use the concept of the garbage collector.Question: Suppose you go for the internship at GeeksForGeeks, and you were told to write a program to count the number of employees working in the company(excluding interns). To make this program, you have to use the concept of a garbage collector. This is the actual task you were given at the company:Write a program to create a class called Employee having the following data members. 1. An ID for storing unique id allocated to every employee. 2. Name of employee. 3. age of an employee.Also, provide the following methods:A parameterized constructor to initialize name and age. The ID should be initialized in this constructor.A method show() to display ID, name, and age.A method showNextId() to display the ID of the next employee.Now any beginner, who doesn’t know Garbage Collector in Java will code like this: Java// Java Program to count number// of employees working// in a company class Employee { private int ID; private String name; private int age; private static int nextId = 1; // it is made static because it // is keep common among all and // shared by all objects public Employee(String name, int age) { this.name = name; this.age = age; this.ID = nextId++; } public void show() { System.out.println("Id=" + ID + "\nName=" + name + "\nAge=" + age); } public void showNextId() { System.out.println("Next employee id will be=" + nextId); }} class UseEmployee { public static void main(String[] args) { Employee E = new Employee("GFG1", 56); Employee F = new Employee("GFG2", 45); Employee G = new Employee("GFG3", 25); E.show(); F.show(); G.show(); E.showNextId(); F.showNextId(); G.showNextId(); { // It is sub block to keep // all those interns. Employee X = new Employee("GFG4", 23); Employee Y = new Employee("GFG5", 21); X.show(); Y.show(); X.showNextId(); Y.showNextId(); } // After countering this brace, X and Y // will be removed.Therefore, // now it should show nextId as 4. // Output of this line E.showNextId(); // should be 4 but it will give 6 as output. }}OutputId=1 Name=GFG1 Age=56 Id=2 Name=GFG2 Age=45 Id=3 Name=GFG3 Age=25 Next employee id will be=4 Next employee id will be=4 Next employee id will be=4 Id=4 Name=GFG4 Age=23 Id=5 Name=GFG5 Age=21 Next employee id will be=6 Next employee id will be=6 Next employee id will be=6Now to get the correct output: Now garbage collector(gc) will see 2 objects free. Now to decrement nextId,gc(garbage collector) will call method to finalize() only when we programmers have overridden it in our class. And as mentioned previously, we have to request gc(garbage collector), and for this, we have to write the following 3 steps before closing brace of sub-block. Set references to null(i.e X = Y = null;)Call, System.gc();Call, System.runFinalization();Now the correct code for counting the number of employees(excluding interns) Java// Correct code to count number// of employees excluding interns. class Employee { private int ID; private String name; private int age; private static int nextId = 1; // it is made static because it // is keep common among all and // shared by all objects public Employee(String name, int age) { this.name = name; this.age = age; this.ID = nextId++; } public void show() { System.out.println("Id=" + ID + "\nName=" + name + "\nAge=" + age); } public void showNextId() { System.out.println("Next employee id will be=" + nextId); } protected void finalize() { --nextId; // In this case, // gc will call finalize() // for 2 times for 2 objects. }} public class UseEmployee { public static void main(String[] args) { Employee E = new Employee("GFG1", 56); Employee F = new Employee("GFG2", 45); Employee G = new Employee("GFG3", 25); E.show(); F.show(); G.show(); E.showNextId(); F.showNextId(); G.showNextId(); { // It is sub block to keep // all those interns. Employee X = new Employee("GFG4", 23); Employee Y = new Employee("GFG5", 21); X.show(); Y.show(); X.showNextId(); Y.showNextId(); X = Y = null; System.gc(); System.runFinalization(); } E.showNextId(); }}OutputId=1 Name=GFG1 Age=56 Id=2 Name=GFG2 Age=45 Id=3 Name=GFG3 Age=25 Next employee id will be=4 Next employee id will be=4 Next employee id will be=4 Id=4 Name=GFG4 Age=23 Id=5 Name=GFG5 Age=21 Next employee id will be=6 Next employee id will be=6 Next employee id will be=4Related Articles: How to Make Object Eligible for Garbage Collection in Java?Island of Isolation in JavaOutput of Java programs | Set 10 (Garbage Collection)How to Find Max Memory, Free Memory, and Total Memory in Java?How JVM Works – JVM Architecture?This article is contributed by Chirag Agarwal and Gaurav Miglani. Please write comments if you find anything incorrect or you want to share more information about the topic discussed above.Attention reader! Don’t stop learning now. Get hold of all the important Java Foundation and Collections concepts with the Fundamentals of Java and Java Collections Course at a student-friendly price and become industry ready. To complete your preparation from learning a language to DS Algo and many more, please refer Complete Interview Preparation Course.My Personal Notes arrow_drop_upSave LikePreviousSerialization and Deserialization in Java with ExampleNext How to prevent objects of a class from Garbage Collection in JavaRecommended ArticlesPage :Output of Java programs | Set 10 (Garbage Collection)14, Mar 17How to make object eligible for garbage collection in Java?16, Jun 17How to prevent objects of a class from Garbage Collection in Java06, Jun 18Mark-and-Sweep: Garbage Collection Algorithm29, May 16Java Program to Get the Size of Collection and Verify that Collection is Empty05, Jan 21Java Program to Add the Data from the Specified Collection in the Current Collection18, Jan 21Difference Between Collection.stream().forEach() and Collection.forEach() in Java28, Jan 21Types of JVM Garbage Collectors in Java with implementation details22, Jan 20Z Garbage Collector in Java08, Apr 21Retrieving Elements from Collection in Java (For-each, Iterator, ListIterator & EnumerationIterator)06, Apr 16Sorting collection of String and StringBuffer in Java20, Aug 17Iterator vs Collection in Java08, Aug 18Convert an Iterable to Collection in Java09, Aug 18Java Collection| Difference between Synchronized ArrayList and CopyOnWriteArrayList14, Sep 18Finding minimum and maximum element of a Collection in Java22, Nov 18Non-generic Vs Generic Collection in Java29, Nov 18Collection addAll() method in Java with Examples29, Nov 18Collection clear() method in Java with Examples29, Nov 18Collection isEmpty() method in Java with Examples28, Nov 18Collection contains() method in Java with Examples28, Nov 18Stack addAll(int, Collection) method in Java with Example24, Dec 18Stack addAll(Collection) method in Java with Example24, Dec 18How to Get a Size of Collection in Java?13, Oct 20How to add selected items from a collection to an ArrayList in Java?31, Dec 19Article Contributed By :GeeksforGeeksVote for difficultyCurrent difficulty : EasyEasy Normal Medium Hard ExpertImproved By :AnshulVaidyanishkarshgandhiArticle Tags :java-garbage-collectionJavaPractice Tags :JavaReport IssueWriting code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load CommentsWhat's NewJava Backend Development- LIVE ClassesView DetailsComplete Interview PreparationView DetailsSystem Design-Live Classes for Working ProfessionalsView DetailsMost popular in JavaArrays in JavaObject Oriented Programming (OOPs) Concept in JavaSplit() String method in Java with examplesFor-each loop in JavaArrays.sort() in Java with examplesMore related articles in JavaReverse a string in JavaArrayList in JavaHashMap in Java with ExamplesInitialize an ArrayList in JavaMultidimensional Arrays in Java× 5th Floor, A-118,Sector-136, Noida, Uttar Pradesh - 201305 feedback@geeksforgeeks.orgCompanyAbout UsCareersPrivacy PolicyContact UsCopyright PolicyLearnAlgorithmsData StructuresLanguagesCS SubjectsVideo TutorialsWeb DevelopmentWeb TutorialsHTMLCSSJavaScriptBootstrapContributeWrite an ArticleWrite Interview ExperienceInternshipsVideos@geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It ! Start Your Coding Journey Now!Login Register