Hashtable in Java - GeeksforGeeksSkip to content TutorialsPractice DS & Algo.Must Do QuestionsDSA Topic-wiseDSA Company-wiseAlgorithmsAnalysis of AlgorithmsAsymptotic AnalysisWorst, Average and Best CasesAsymptotic NotationsLittle o and little omega notationsLower and Upper Bound TheoryAnalysis of LoopsSolving RecurrencesAmortized AnalysisWhat does 'Space Complexity' mean ?Pseudo-polynomial AlgorithmsPolynomial Time Approximation SchemeA Time Complexity QuestionSearching AlgorithmsSorting AlgorithmsGraph AlgorithmsPattern SearchingGeometric AlgorithmsMathematicalBitwise AlgorithmsRandomized AlgorithmsGreedy AlgorithmsDynamic ProgrammingDivide and ConquerBacktrackingBranch and BoundAll AlgorithmsData StructuresArraysLinked ListStackQueueBinary TreeBinary Search TreeHeapHashingGraphAdvanced Data StructureMatrixStringsAll Data StructuresInterview CornerCompany PreparationTop TopicsPractice Company QuestionsInterview ExperiencesExperienced InterviewsInternship InterviewsCompetititve ProgrammingDesign PatternsSystem Design TutorialMultiple Choice QuizzesLanguagesCC++JavaPythonC#JavaScriptjQuerySQLPHPScalaPerlGo LanguageHTMLCSSKotlinCS SubjectsMathematicsOperating SystemDBMSComputer NetworksComputer Organization and ArchitectureTheory of ComputationCompiler DesignDigital LogicSoftware EngineeringGATEGATE Computer Science NotesLast Minute NotesGATE CS Solved PapersGATE CS Original Papers and Official KeysGATE 2021 DatesGATE CS 2021 SyllabusImportant Topics for GATE CSWeb TechnologiesHTMLCSSJavaScriptAngularJSReactJSNodeJSBootstrapjQueryPHPSoftware DesignsSoftware Design PatternsSystem Design TutorialSchool LearningSchool ProgrammingMathematicsNumber SystemAlgebraTrigonometryStatisticsProbabilityGeometryMensurationCalculusMaths Notes (Class 8-12)Class 8 NotesClass 9 NotesClass 10 NotesClass 11 NotesClass 12 NotesNCERT SolutionsClass 8 Maths SolutionClass 9 Maths SolutionClass 10 Maths SolutionClass 11 Maths SolutionClass 12 Maths SolutionRD Sharma SolutionsClass 8 Maths SolutionClass 9 Maths SolutionClass 10 Maths SolutionClass 11 Maths SolutionClass 12 Maths SolutionPhysics Notes (Class 8-11)Class 8 NotesClass 9 NotesClass 10 NotesClass 11 NotesISRO CSISRO CS Solved PapersISRO CS Original Papers and Official KeysISRO CS Syllabus for Scientist/Engineer ExamUGC NET CSUGC NET CS Notes Paper IIUGC NET CS Notes Paper IIIUGC NET CS Solved PapersStudentCampus Ambassador ProgramSchool Ambassador ProgramProjectGeek of the MonthCampus Geek of the MonthPlacement CourseCompetititve ProgrammingTestimonialsGeek on the TopCareersInternshipJobsApply for JobsPost a JobCourses WriteCome write articles for us and get featuredPracticeLearn and code with the best industry expertsPremiumGet access to ad-free content, doubt assistance and more!JobsCome and find your dream job with usGeeks DigestQuizzesGeeks CampusGblog ArticlesIDECampus Mantri HomeSaved VideosCoursesGBlogPuzzlesWhat's New ? Change Language Data StructuresAlgorithmsInterview PreparationTopic-wise PracticeC++JavaPythonCompetitive ProgrammingMachine LearningWeb DevelopmentPuzzlesProject IdeasGFG School Related Articles ▲Related ArticlesBasics of JavaJava TutorialIntroduction to JavaSimilarities and Difference between Java and C++Setting up the environment in JavaJava Basic SyntaxJava Hello World ProgramDifferences between JDK, JRE and JVMHow JVM Works – JVM Architecture?Java IdentifiersVariables & DataTypes in JavaVariables in JavaScope of Variables In JavaData types in JavaOperators in JavaOperators in JavaJava Arithmetic Operators with ExamplesJava Assignment Operators with ExamplesJava Unary Operator with ExamplesJava Relational Operators with ExamplesJava Logical Operators with ExamplesJava Ternary Operator with ExamplesBitwise Operators in JavaPackages in JavaPackages In JavaFlow Control in JavaDecision Making in Java (if, if-else, switch, break, continue, jump)Java if statement with ExamplesJava if-else statement with ExamplesJava if-else-if ladder with ExamplesLoops in JavaLoops in JavaJava For loop with ExamplesJava while loop with ExamplesJava do-while loop with ExamplesFor-each loop in JavaJump Statements in JavaContinue Statement in JavaBreak statement in Javareturn keyword in JavaArrays in JavaArrays in JavaMultidimensional Arrays in JavaJagged Array in JavaStrings in JavaStrings in JavaString class in Java | Set 1StringBuffer class in JavaStringBuilder Class in Java with ExamplesOOPS in JavaObject Oriented Programming (OOPs) Concept in JavaClasses and Objects in JavaMethods in JavaAccess Modifiers in JavaWrapper Classes in JavaNeed of Wrapper Classes in JavaConstructors in JavaConstructors in JavaCopy Constructor in JavaConstructor Chaining In Java with ExamplesPrivate Constructors and Singleton Classes in JavaInheritance & Polymorphism in JavaInheritance in JavaJava and Multiple InheritanceComparison of Inheritance in C++ and JavaPolymorphism in JavaDynamic Method Dispatch or Runtime Polymorphism in JavaMethod overloading & OveridingOverloading in JavaDifferent ways of Method Overloading in JavaOverriding in JavaDifference Between Method Overloading and Method Overriding in JavaAbstraction & EncapsulationAbstraction in JavaAbstract Classes in JavaDifference between Abstract Class and Interface in JavaEncapsulation in JavaInterfaces in JavaInterfaces in JavaNested Interface in JavaMarker interface in JavaFunctional Interfaces in JavaComparator Interface in Java with ExamplesKeywords in JavaList of all Java KeywordsSuper Keyword in Javafinal Keyword in Javaabstract keyword in javastatic Keyword in Java‘this’ reference in Javaenum in JavaException Handling in JavaExceptions in JavaTypes of Exception in Java with ExamplesChecked vs Unchecked Exceptions in JavaTry, catch, throw and throws in JavaFlow control in try catch finally in Javathrow and throws in JavaUser-defined Custom Exception in JavaCollection FrameworkCollections in JavaCollections Class in JavaList Interface in Java with ExamplesArrayList in JavaVector Class in JavaStack Class in JavaLinkedList in JavaQueue Interface In JavaPriorityQueue in JavaDeque interface in Java with ExampleArrayDeque in JavaSet in JavaHashSet in JavaLinkedHashSet in Java with ExamplesSortedSet Interface in Java with ExamplesNavigableSet in Java with ExamplesTreeSet in JavaMap Interface in JavaHashMap in Java with ExamplesHashtable in JavaLinkedHashMap in JavaSortedMap Interface in Java with ExamplesTreeMap in JavaMulti-threading in JavaMultithreading in JavaLifecycle and States of a Thread in JavaMain thread in JavaJava Thread Priority in MultithreadingThread Pools in JavaSynchronization in JavaMethod and Block Synchronization in JavaImportance of Thread Synchronization in JavaThread Safety and how to achieve it in JavaTable of ContentsBasics of JavaJava TutorialIntroduction to JavaSimilarities and Difference between Java and C++Setting up the environment in JavaJava Basic SyntaxJava Hello World ProgramDifferences between JDK, JRE and JVMHow JVM Works – JVM Architecture?Java IdentifiersVariables & DataTypes in JavaVariables in JavaScope of Variables In JavaData types in JavaOperators in JavaOperators in JavaJava Arithmetic Operators with ExamplesJava Assignment Operators with ExamplesJava Unary Operator with ExamplesJava Relational Operators with ExamplesJava Logical Operators with ExamplesJava Ternary Operator with ExamplesBitwise Operators in JavaPackages in JavaPackages In JavaFlow Control in JavaDecision Making in Java (if, if-else, switch, break, continue, jump)Java if statement with ExamplesJava if-else statement with ExamplesJava if-else-if ladder with ExamplesLoops in JavaLoops in JavaJava For loop with ExamplesJava while loop with ExamplesJava do-while loop with ExamplesFor-each loop in JavaJump Statements in JavaContinue Statement in JavaBreak statement in Javareturn keyword in JavaArrays in JavaArrays in JavaMultidimensional Arrays in JavaJagged Array in JavaStrings in JavaStrings in JavaString class in Java | Set 1StringBuffer class in JavaStringBuilder Class in Java with ExamplesOOPS in JavaObject Oriented Programming (OOPs) Concept in JavaClasses and Objects in JavaMethods in JavaAccess Modifiers in JavaWrapper Classes in JavaNeed of Wrapper Classes in JavaConstructors in JavaConstructors in JavaCopy Constructor in JavaConstructor Chaining In Java with ExamplesPrivate Constructors and Singleton Classes in JavaInheritance & Polymorphism in JavaInheritance in JavaJava and Multiple InheritanceComparison of Inheritance in C++ and JavaPolymorphism in JavaDynamic Method Dispatch or Runtime Polymorphism in JavaMethod overloading & OveridingOverloading in JavaDifferent ways of Method Overloading in JavaOverriding in JavaDifference Between Method Overloading and Method Overriding in JavaAbstraction & EncapsulationAbstraction in JavaAbstract Classes in JavaDifference between Abstract Class and Interface in JavaEncapsulation in JavaInterfaces in JavaInterfaces in JavaNested Interface in JavaMarker interface in JavaFunctional Interfaces in JavaComparator Interface in Java with ExamplesKeywords in JavaList of all Java KeywordsSuper Keyword in Javafinal Keyword in Javaabstract keyword in javastatic Keyword in Java‘this’ reference in Javaenum in JavaException Handling in JavaExceptions in JavaTypes of Exception in Java with ExamplesChecked vs Unchecked Exceptions in JavaTry, catch, throw and throws in JavaFlow control in try catch finally in Javathrow and throws in JavaUser-defined Custom Exception in JavaCollection FrameworkCollections in JavaCollections Class in JavaList Interface in Java with ExamplesArrayList in JavaVector Class in JavaStack Class in JavaLinkedList in JavaQueue Interface In JavaPriorityQueue in JavaDeque interface in Java with ExampleArrayDeque in JavaSet in JavaHashSet in JavaLinkedHashSet in Java with ExamplesSortedSet Interface in Java with ExamplesNavigableSet in Java with ExamplesTreeSet in JavaMap Interface in JavaHashMap in Java with ExamplesHashtable in JavaLinkedHashMap in JavaSortedMap Interface in Java with ExamplesTreeMap in JavaMulti-threading in JavaMultithreading in JavaLifecycle and States of a Thread in JavaMain thread in JavaJava Thread Priority in MultithreadingThread Pools in JavaSynchronization in JavaMethod and Block Synchronization in JavaImportance of Thread Synchronization in JavaThread Safety and how to achieve it in JavaImprove Article Save Article Like Article Hashtable in JavaDifficulty Level : MediumLast Updated : 24 Nov, 2020The Hashtable class implements a hash table, which maps keys to values. Any non-null object can be used as a key or as a value. To successfully store and retrieve objects from a hashtable, the objects used as keys must implement the hashCode method and the equals method. Features of HashtableIt is similar to HashMap, but is synchronized.Hashtable stores key/value pair in hash table.In Hashtable we specify an object that is used as a key, and the value we want to associate to that key. The key is then hashed, and the resulting hash code is used as the index at which the value is stored within the table.The initial default capacity of Hashtable class is 11 whereas loadFactor is 0.75.HashMap doesn’t provide any Enumeration, while Hashtable provides not fail-fast Enumeration.Declaration:public class Hashtable<K,V> extends Dictionary<K,V> implements Map<K,V>, Cloneable, SerializableType Parameters:K – the type of keys maintained by this mapV – the type of mapped valuesThe Hierarchy of Hashtable Hashtable implements Serializable, Cloneable, Map<K,V> interfaces and extends Dictionary<K,V>. The direct subclasses are Properties, UIDefaults. Constructors:In order to create a Hashtable, we need to import it from java.util.Hashtable. There are various ways in which we can create a Hashtable.1. Hashtable(): This creates an empty hashtable with the default load factor of 0.75 and an initial capacity is 11. Hashtable<K, V> ht = new Hashtable<K, V>();Java// Java program to demonstrate// adding elements to Hashtable import java.io.*;import java.util.*; class AddElementsToHashtable { public static void main(String args[]) { // No need to mention the // Generic type twice Hashtable<Integer, String> ht1 = new Hashtable<>(); // Initialization of a Hashtable // using Generics Hashtable<Integer, String> ht2 = new Hashtable<Integer, String>(); // Inserting the Elements // using put() method ht1.put(1, "one"); ht1.put(2, "two"); ht1.put(3, "three"); ht2.put(4, "four"); ht2.put(5, "five"); ht2.put(6, "six"); // Print mappings to the console System.out.println("Mappings of ht1 : " + ht1); System.out.println("Mappings of ht2 : " + ht2); }}OutputMappings of ht1 : {3=three, 2=two, 1=one} Mappings of ht2 : {6=six, 5=five, 4=four}2. Hashtable(int initialCapacity): This creates a hash table that has an initial size specified by initialCapacity and the default load factor is 0.75.Hashtable<K, V> ht = new Hashtable<K, V>(int initialCapacity);Java// Java program to demonstrate// adding elements to Hashtable import java.io.*;import java.util.*; class AddElementsToHashtable { public static void main(String args[]) { // No need to mention the // Generic type twice Hashtable<Integer, String> ht1 = new Hashtable<>(4); // Initialization of a Hashtable // using Generics Hashtable<Integer, String> ht2 = new Hashtable<Integer, String>(2); // Inserting the Elements // using put() method ht1.put(1, "one"); ht1.put(2, "two"); ht1.put(3, "three"); ht2.put(4, "four"); ht2.put(5, "five"); ht2.put(6, "six"); // Print mappings to the console System.out.println("Mappings of ht1 : " + ht1); System.out.println("Mappings of ht2 : " + ht2); }}OutputMappings of ht1 : {3=three, 2=two, 1=one} Mappings of ht2 : {4=four, 6=six, 5=five}3. Hashtable(int size, float fillRatio): This version creates a hash table that has an initial size specified by size and fill ratio specified by fillRatio. fill ratio: Basically, it determines how full a hash table can be before it is resized upward and its Value lies between 0.0 to 1.0.Hashtable<K, V> ht = new Hashtable<K, V>(int size, float fillRatio);Java// Java program to demonstrate// adding elements to Hashtable import java.io.*;import java.util.*; class AddElementsToHashtable { public static void main(String args[]) { // No need to mention the // Generic type twice Hashtable<Integer, String> ht1 = new Hashtable<>(4, 0.75f); // Initialization of a Hashtable // using Generics Hashtable<Integer, String> ht2 = new Hashtable<Integer, String>(3, 0.5f); // Inserting the Elements // using put() method ht1.put(1, "one"); ht1.put(2, "two"); ht1.put(3, "three"); ht2.put(4, "four"); ht2.put(5, "five"); ht2.put(6, "six"); // Print mappings to the console System.out.println("Mappings of ht1 : " + ht1); System.out.println("Mappings of ht2 : " + ht2); }}OutputMappings of ht1 : {3=three, 2=two, 1=one} Mappings of ht2 : {6=six, 5=five, 4=four}4. Hashtable(Map<? extends K,? extends V> m): This creates a hash table that is initialized with the elements in m.Hashtable<K, V> ht = new Hashtable<K, V>(Map m);Java// Java program to demonstrate// adding elements to Hashtable import java.io.*;import java.util.*; class AddElementsToHashtable { public static void main(String args[]) { // No need to mention the // Generic type twice Map<Integer, String> hm = new HashMap<>(); // Inserting the Elements // using put() method hm.put(1, "one"); hm.put(2, "two"); hm.put(3, "three"); // Initialization of a Hashtable // using Generics Hashtable<Integer, String> ht2 = new Hashtable<Integer, String>(hm); // Print mappings to the console System.out.println("Mappings of ht2 : " + ht2); }}OutputMappings of ht2 : {3=three, 2=two, 1=one}Example:Java// Java program to illustrate// Java.util.Hashtable import java.util.*; public class GFG { public static void main(String[] args) { // Create an empty Hashtable Hashtable<String, Integer> ht = new Hashtable<>(); // Add elements to the hashtable ht.put("vishal", 10); ht.put("sachin", 30); ht.put("vaibhav", 20); // Print size and content System.out.println("Size of map is:- " + ht.size()); System.out.println(ht); // Check if a key is present and if // present, print value if (ht.containsKey("vishal")) { Integer a = ht.get("vishal"); System.out.println("value for key" + " \"vishal\" is:- " + a); } }} OutputSize of map is:- 3 {vaibhav=20, vishal=10, sachin=30} value for key "vishal" is:- 10Performing Various Operations on Hashtable 1. Adding Elements: In order to add an element to the hashtable, we can use the put() method. However, the insertion order is not retained in the hashtable. Internally, for every element, a separate hash is generated and the elements are indexed based on this hash to make it more efficient. Java// Java program to demonstrate// adding elements to Hashtable import java.io.*;import java.util.*; class AddElementsToHashtable { public static void main(String args[]) { // No need to mention the // Generic type twice Hashtable<Integer, String> ht1 = new Hashtable<>(); // Initialization of a Hashtable // using Generics Hashtable<Integer, String> ht2 = new Hashtable<Integer, String>(); // Inserting the Elements // using put() method ht1.put(1, "Geeks"); ht1.put(2, "For"); ht1.put(3, "Geeks"); ht2.put(1, "Geeks"); ht2.put(2, "For"); ht2.put(3, "Geeks"); // Print mappings to the console System.out.println("Mappings of ht1 : " + ht1); System.out.println("Mappings of ht2 : " + ht2); }} OutputMappings of ht1 : {3=Geeks, 2=For, 1=Geeks} Mappings of ht2 : {3=Geeks, 2=For, 1=Geeks}2. Changing Elements: After adding the elements if we wish to change the element, it can be done by again adding the element with the put() method. Since the elements in the hashtable are indexed using the keys, the value of the key can be changed by simply inserting the updated value for the key for which we wish to change.Java// Java program to demonstrate// updating Hashtable import java.io.*;import java.util.*;class UpdatesOnHashtable { public static void main(String args[]) { // Initialization of a Hashtable Hashtable<Integer, String> ht = new Hashtable<Integer, String>(); // Inserting the Elements // using put method ht.put(1, "Geeks"); ht.put(2, "Geeks"); ht.put(3, "Geeks"); // print initial map to the console System.out.println("Initial Map " + ht); // Update the value at key 2 ht.put(2, "For"); // print the updated map System.out.println("Updated Map " + ht); }} OutputInitial Map {3=Geeks, 2=Geeks, 1=Geeks} Updated Map {3=Geeks, 2=For, 1=Geeks}3. Removing Element: In order to remove an element from the Map, we can use the remove() method. This method takes the key value and removes the mapping for a key from this map if it is present in the map.Java// Java program to demonstrate// the removing mappings from Hashtable import java.io.*;import java.util.*;class RemovingMappingsFromHashtable { public static void main(String args[]) { // Initialization of a Hashtable Map<Integer, String> ht = new Hashtable<Integer, String>(); // Inserting the Elements // using put method ht.put(1, "Geeks"); ht.put(2, "For"); ht.put(3, "Geeks"); ht.put(4, "For"); // Initial HashMap System.out.println("Initial map : " + ht); // Remove the map entry with key 4 ht.remove(4); // Final Hashtable System.out.println("Updated map : " + ht); }}OutputInitial map : {4=For, 3=Geeks, 2=For, 1=Geeks} Updated map : {3=Geeks, 2=For, 1=Geeks}4. Traversal of a Hashtable: To iterate the table, we can make use of an advanced for loop. Below is the example of iterating a hashtable.Java// Java program to illustrate// traversal of Hashtable import java.util.Hashtable;import java.util.Map; public class IteratingHashtable { public static void main(String[] args) { // Create an instance of Hashtable Hashtable<String, Integer> ht = new Hashtable<>(); // Adding elements using put method ht.put("vishal", 10); ht.put("sachin", 30); ht.put("vaibhav", 20); // Iterating using enhanced for loop for (Map.Entry<String, Integer> e : ht.entrySet()) System.out.println(e.getKey() + " " + e.getValue()); }}Outputvaibhav 20 vishal 10 sachin 30 Internal Working of HashtableHashtable datastructure is an array of buckets which stores the key/value pairs in them. It makes use of hashCode() method to determine which bucket the key/value pair should map.The hash function helps to determine the location for a given key in the bucket list. Generally, hashcode is a non-negative integer that is equal for equal Objects and may or may not be equal for unequal Objects. To determine whether two objects are equal or not, hashtable makes use of the equals() method.It is possible that two unequal Objects have the same hashcode. This is called a collision. To resolve collisions, hashtable uses an array of lists. The pairs mapped to a single bucket (array index) are stored in a list and list reference is stored in the array index. Methods of HashtableK – The type of the keys in the map.V – The type of values mapped in the map.METHODDESCRIPTIONclear()Clears this hashtable so that it contains no keys.clone()Creates a shallow copy of this hashtable.compute(K key, BiFunction<? super K,? super V,? extends V> remappingFunction)Attempts to compute a mapping for the specified key and its current mapped value (or null if there is no current mapping).computeIfAbsent(K key, Function<? super K,? extends V> mappingFunction)If the specified key is not already associated with a value (or is mapped to null), attempts to compute its value using the given mapping function and enters it into this map unless null.computeIfPresent(K key, BiFunction<? super K,? super V,? extends V> remappingFunction)If the value for the specified key is present and non-null, attempts to compute a new mapping given the key and its current mapped value.contains(Object value)Tests if some key maps into the specified value in this hashtable.containsKey(Object key)Tests if the specified object is a key in this hashtable.containsValue(Object value)Returns true if this hashtable maps one or more keys to this value.elements()Returns an enumeration of the values in this hashtable.entrySet()Returns a Set view of the mappings contained in this map.equals(Object o)Compares the specified Object with this Map for equality, as per the definition in the Map interface.get(Object key)Returns the value to which the specified key is mapped, or null if this map contains no mapping for the key.hashCode()Returns the hash code value for this Map as per the definition in the Map interface. isEmpty()Tests if this hashtable maps no keys to values.keys()Returns an enumeration of the keys in this hashtable.keySet()Returns a Set view of the keys contained in this map.merge(K key, V value, BiFunction<? super V,? super V,? extends V> remappingFunction)If the specified key is not already associated with a value or is associated with null, associates it with the given non-null value. put(K key, V value)Maps the specified key to the specified value in this hashtable. putAll(Map<? extends K,? extends V> t)Copies all of the mappings from the specified map to this hashtable.rehash()Increases the capacity of and internally reorganizes this hashtable, in order to accommodate and access its entries more efficiently.remove​(Object key)Removes the key (and its corresponding value) from this hashtable.size()Returns the number of keys in this hashtable. toString()Returns a string representation of this Hashtable object in the form of a set of entries, enclosed in braces and separated by the ASCII characters “, ” (comma and space). values()Returns a Collection view of the values contained in this map.Methods declared in interface java.util.MapMETHODDESCRIPTION forEach(BiConsumer<? super K,? super V> action)Performs the given action for each entry in this map until all entries have been processed or the action throws an exception.getOrDefault(Object key, V defaultValue)Returns the value to which the specified key is mapped, or defaultValue if this map contains no mapping for the key.putIfAbsent​(K key, V value)If the specified key is not already associated with a value (or is mapped to null) associates it with the given value and returns null, else returns the current value.remove​(Object key, Object value)Removes the entry for the specified key only if it is currently mapped to the specified value.replace(K key, V value)Replaces the entry for the specified key only if it is currently mapped to some value.replace(K key, V oldValue, V newValue)Replaces the entry for the specified key only if currently mapped to the specified value.replaceAll(BiFunction<? super K,? super V,? extends V> function)Replaces each entry’s value with the result of invoking the given function on that entry until all entries have been processed or the function throws an exception.Must Read:Differences between HashMap and HashTable in JavaReference: https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Hashtable.htmlAttention reader! Don’t stop learning now. Get hold of all the important Java Foundation and Collections concepts with the Fundamentals of Java and Java Collections Course at a student-friendly price and become industry ready. To complete your preparation from learning a language to DS Algo and many more, please refer Complete Interview Preparation Course.My Personal Notes arrow_drop_upSave LikePreviousHashMap in Java with ExamplesNext LinkedHashMap in JavaRecommended ArticlesPage :Hashtable toString() Method in Java26, Jun 18Hashtable elements() Method in Java26, Jun 18Hashtable keys() Method in Java26, Jun 18Hashtable containsValue() Method in Java26, Jun 18Hashtable containsKey() Method in Java26, Jun 18Hashtable put() Method in Java26, Jun 18Hashtable get() Method in Java26, Jun 18Hashtable isEmpty() Method in Java26, Jun 18Hashtable size() Method in Java26, Jun 18Hashtable remove() Method in Java26, Jun 18Hashtable clone() Method in Java26, Jun 18Hashtable clear() Method in Java26, Jun 18Hashtable contains() Method in Java26, Jun 18HashTable compute() method in Java with Examples30, Oct 18Hashtable computeIfAbsent() method in Java with Examples30, Oct 18HashTable putIfAbsent() method in Java with Examples30, Oct 18HashTable forEach() method in Java with Examples30, Oct 18Java Program to Read Elements using Enumeration in Hashtable18, Jan 21Hashtable keySet() Method in Java with Examples01, Oct 20How HashTable Works Internally in Java?03, Jan 21How to Sort Hashtable in Java?03, Jan 21Java Program to Copy the Map Content to Another Hashtable28, Dec 20How to Eliminate Duplicate Keys in Hashtable in Java?12, Jan 21How to Copy Map Content to Another Hashtable in Java?05, Jan 21Article Contributed By :GeeksforGeeksVote for difficultyCurrent difficulty : MediumEasy Normal Medium Hard ExpertImproved By :OwiesAAlomarinidhi_bietbishnoisunil007GaneshchowdharysadanalaArticle Tags :HashTableJava - util packageJava-CollectionsJava-HashTableJavaPractice Tags :JavaJava-CollectionsReport IssueWriting code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load CommentsWhat's NewJava Backend Development- LIVE ClassesView DetailsComplete Interview PreparationView DetailsSystem Design-Live Classes for Working ProfessionalsView DetailsMost popular in JavaSplit() String method in Java with examplesArrays.sort() in Java with examplesReverse a string in JavaInitialize an ArrayList in JavaHow to iterate any Map in JavaMore related articles in JavaHow to add an element to an Array in Java?Math pow() method in Java with ExampleSingleton Class in JavaInitializing a List in JavaJava Programming Examples× 5th Floor, A-118,Sector-136, Noida, Uttar Pradesh - 201305 feedback@geeksforgeeks.orgCompanyAbout UsCareersPrivacy PolicyContact UsCopyright PolicyLearnAlgorithmsData StructuresLanguagesCS SubjectsVideo TutorialsWeb DevelopmentWeb TutorialsHTMLCSSJavaScriptBootstrapContributeWrite an ArticleWrite Interview ExperienceInternshipsVideos@geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It ! Start Your Coding Journey Now!Login Register