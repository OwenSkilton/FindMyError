TreeMap in Java - GeeksforGeeksSkip to content TutorialsPractice DS & Algo.Must Do QuestionsDSA Topic-wiseDSA Company-wiseAlgorithmsAnalysis of AlgorithmsAsymptotic AnalysisWorst, Average and Best CasesAsymptotic NotationsLittle o and little omega notationsLower and Upper Bound TheoryAnalysis of LoopsSolving RecurrencesAmortized AnalysisWhat does 'Space Complexity' mean ?Pseudo-polynomial AlgorithmsPolynomial Time Approximation SchemeA Time Complexity QuestionSearching AlgorithmsSorting AlgorithmsGraph AlgorithmsPattern SearchingGeometric AlgorithmsMathematicalBitwise AlgorithmsRandomized AlgorithmsGreedy AlgorithmsDynamic ProgrammingDivide and ConquerBacktrackingBranch and BoundAll AlgorithmsData StructuresArraysLinked ListStackQueueBinary TreeBinary Search TreeHeapHashingGraphAdvanced Data StructureMatrixStringsAll Data StructuresInterview CornerCompany PreparationTop TopicsPractice Company QuestionsInterview ExperiencesExperienced InterviewsInternship InterviewsCompetititve ProgrammingDesign PatternsSystem Design TutorialMultiple Choice QuizzesLanguagesCC++JavaPythonC#JavaScriptjQuerySQLPHPScalaPerlGo LanguageHTMLCSSKotlinCS SubjectsMathematicsOperating SystemDBMSComputer NetworksComputer Organization and ArchitectureTheory of ComputationCompiler DesignDigital LogicSoftware EngineeringGATEGATE Computer Science NotesLast Minute NotesGATE CS Solved PapersGATE CS Original Papers and Official KeysGATE 2021 DatesGATE CS 2021 SyllabusImportant Topics for GATE CSWeb TechnologiesHTMLCSSJavaScriptAngularJSReactJSNodeJSBootstrapjQueryPHPSoftware DesignsSoftware Design PatternsSystem Design TutorialSchool LearningSchool ProgrammingMathematicsNumber SystemAlgebraTrigonometryStatisticsProbabilityGeometryMensurationCalculusMaths Notes (Class 8-12)Class 8 NotesClass 9 NotesClass 10 NotesClass 11 NotesClass 12 NotesNCERT SolutionsClass 8 Maths SolutionClass 9 Maths SolutionClass 10 Maths SolutionClass 11 Maths SolutionClass 12 Maths SolutionRD Sharma SolutionsClass 8 Maths SolutionClass 9 Maths SolutionClass 10 Maths SolutionClass 11 Maths SolutionClass 12 Maths SolutionPhysics Notes (Class 8-11)Class 8 NotesClass 9 NotesClass 10 NotesClass 11 NotesISRO CSISRO CS Solved PapersISRO CS Original Papers and Official KeysISRO CS Syllabus for Scientist/Engineer ExamUGC NET CSUGC NET CS Notes Paper IIUGC NET CS Notes Paper IIIUGC NET CS Solved PapersStudentCampus Ambassador ProgramSchool Ambassador ProgramProjectGeek of the MonthCampus Geek of the MonthPlacement CourseCompetititve ProgrammingTestimonialsGeek on the TopCareersInternshipJobsApply for JobsPost a JobCourses WriteCome write articles for us and get featuredPracticeLearn and code with the best industry expertsPremiumGet access to ad-free content, doubt assistance and more!JobsCome and find your dream job with usGeeks DigestQuizzesGeeks CampusGblog ArticlesIDECampus Mantri HomeSaved VideosCoursesGBlogPuzzlesWhat's New ? Change Language Data StructuresAlgorithmsInterview PreparationTopic-wise PracticeC++JavaPythonCompetitive ProgrammingMachine LearningWeb DevelopmentPuzzlesProject IdeasGFG School Related Articles ▲Related ArticlesBasics of JavaJava TutorialIntroduction to JavaSimilarities and Difference between Java and C++Setting up the environment in JavaJava Basic SyntaxJava Hello World ProgramDifferences between JDK, JRE and JVMHow JVM Works – JVM Architecture?Java IdentifiersVariables & DataTypes in JavaVariables in JavaScope of Variables In JavaData types in JavaOperators in JavaOperators in JavaJava Arithmetic Operators with ExamplesJava Assignment Operators with ExamplesJava Unary Operator with ExamplesJava Relational Operators with ExamplesJava Logical Operators with ExamplesJava Ternary Operator with ExamplesBitwise Operators in JavaPackages in JavaPackages In JavaFlow Control in JavaDecision Making in Java (if, if-else, switch, break, continue, jump)Java if statement with ExamplesJava if-else statement with ExamplesJava if-else-if ladder with ExamplesLoops in JavaLoops in JavaJava For loop with ExamplesJava while loop with ExamplesJava do-while loop with ExamplesFor-each loop in JavaJump Statements in JavaContinue Statement in JavaBreak statement in Javareturn keyword in JavaArrays in JavaArrays in JavaMultidimensional Arrays in JavaJagged Array in JavaStrings in JavaStrings in JavaString class in Java | Set 1StringBuffer class in JavaStringBuilder Class in Java with ExamplesOOPS in JavaObject Oriented Programming (OOPs) Concept in JavaClasses and Objects in JavaMethods in JavaAccess Modifiers in JavaWrapper Classes in JavaNeed of Wrapper Classes in JavaConstructors in JavaConstructors in JavaCopy Constructor in JavaConstructor Chaining In Java with ExamplesPrivate Constructors and Singleton Classes in JavaInheritance & Polymorphism in JavaInheritance in JavaJava and Multiple InheritanceComparison of Inheritance in C++ and JavaPolymorphism in JavaDynamic Method Dispatch or Runtime Polymorphism in JavaMethod overloading & OveridingOverloading in JavaDifferent ways of Method Overloading in JavaOverriding in JavaDifference Between Method Overloading and Method Overriding in JavaAbstraction & EncapsulationAbstraction in JavaAbstract Classes in JavaDifference between Abstract Class and Interface in JavaEncapsulation in JavaInterfaces in JavaInterfaces in JavaNested Interface in JavaMarker interface in JavaFunctional Interfaces in JavaComparator Interface in Java with ExamplesKeywords in JavaList of all Java KeywordsSuper Keyword in Javafinal Keyword in Javaabstract keyword in javastatic Keyword in Java‘this’ reference in Javaenum in JavaException Handling in JavaExceptions in JavaTypes of Exception in Java with ExamplesChecked vs Unchecked Exceptions in JavaTry, catch, throw and throws in JavaFlow control in try catch finally in Javathrow and throws in JavaUser-defined Custom Exception in JavaCollection FrameworkCollections in JavaCollections Class in JavaList Interface in Java with ExamplesArrayList in JavaVector Class in JavaStack Class in JavaLinkedList in JavaQueue Interface In JavaPriorityQueue in JavaDeque interface in Java with ExampleArrayDeque in JavaSet in JavaHashSet in JavaLinkedHashSet in Java with ExamplesSortedSet Interface in Java with ExamplesNavigableSet in Java with ExamplesTreeSet in JavaMap Interface in JavaHashMap in Java with ExamplesHashtable in JavaLinkedHashMap in JavaSortedMap Interface in Java with ExamplesTreeMap in JavaMulti-threading in JavaMultithreading in JavaLifecycle and States of a Thread in JavaMain thread in JavaJava Thread Priority in MultithreadingThread Pools in JavaSynchronization in JavaMethod and Block Synchronization in JavaImportance of Thread Synchronization in JavaThread Safety and how to achieve it in JavaTable of ContentsBasics of JavaJava TutorialIntroduction to JavaSimilarities and Difference between Java and C++Setting up the environment in JavaJava Basic SyntaxJava Hello World ProgramDifferences between JDK, JRE and JVMHow JVM Works – JVM Architecture?Java IdentifiersVariables & DataTypes in JavaVariables in JavaScope of Variables In JavaData types in JavaOperators in JavaOperators in JavaJava Arithmetic Operators with ExamplesJava Assignment Operators with ExamplesJava Unary Operator with ExamplesJava Relational Operators with ExamplesJava Logical Operators with ExamplesJava Ternary Operator with ExamplesBitwise Operators in JavaPackages in JavaPackages In JavaFlow Control in JavaDecision Making in Java (if, if-else, switch, break, continue, jump)Java if statement with ExamplesJava if-else statement with ExamplesJava if-else-if ladder with ExamplesLoops in JavaLoops in JavaJava For loop with ExamplesJava while loop with ExamplesJava do-while loop with ExamplesFor-each loop in JavaJump Statements in JavaContinue Statement in JavaBreak statement in Javareturn keyword in JavaArrays in JavaArrays in JavaMultidimensional Arrays in JavaJagged Array in JavaStrings in JavaStrings in JavaString class in Java | Set 1StringBuffer class in JavaStringBuilder Class in Java with ExamplesOOPS in JavaObject Oriented Programming (OOPs) Concept in JavaClasses and Objects in JavaMethods in JavaAccess Modifiers in JavaWrapper Classes in JavaNeed of Wrapper Classes in JavaConstructors in JavaConstructors in JavaCopy Constructor in JavaConstructor Chaining In Java with ExamplesPrivate Constructors and Singleton Classes in JavaInheritance & Polymorphism in JavaInheritance in JavaJava and Multiple InheritanceComparison of Inheritance in C++ and JavaPolymorphism in JavaDynamic Method Dispatch or Runtime Polymorphism in JavaMethod overloading & OveridingOverloading in JavaDifferent ways of Method Overloading in JavaOverriding in JavaDifference Between Method Overloading and Method Overriding in JavaAbstraction & EncapsulationAbstraction in JavaAbstract Classes in JavaDifference between Abstract Class and Interface in JavaEncapsulation in JavaInterfaces in JavaInterfaces in JavaNested Interface in JavaMarker interface in JavaFunctional Interfaces in JavaComparator Interface in Java with ExamplesKeywords in JavaList of all Java KeywordsSuper Keyword in Javafinal Keyword in Javaabstract keyword in javastatic Keyword in Java‘this’ reference in Javaenum in JavaException Handling in JavaExceptions in JavaTypes of Exception in Java with ExamplesChecked vs Unchecked Exceptions in JavaTry, catch, throw and throws in JavaFlow control in try catch finally in Javathrow and throws in JavaUser-defined Custom Exception in JavaCollection FrameworkCollections in JavaCollections Class in JavaList Interface in Java with ExamplesArrayList in JavaVector Class in JavaStack Class in JavaLinkedList in JavaQueue Interface In JavaPriorityQueue in JavaDeque interface in Java with ExampleArrayDeque in JavaSet in JavaHashSet in JavaLinkedHashSet in Java with ExamplesSortedSet Interface in Java with ExamplesNavigableSet in Java with ExamplesTreeSet in JavaMap Interface in JavaHashMap in Java with ExamplesHashtable in JavaLinkedHashMap in JavaSortedMap Interface in Java with ExamplesTreeMap in JavaMulti-threading in JavaMultithreading in JavaLifecycle and States of a Thread in JavaMain thread in JavaJava Thread Priority in MultithreadingThread Pools in JavaSynchronization in JavaMethod and Block Synchronization in JavaImportance of Thread Synchronization in JavaThread Safety and how to achieve it in JavaImprove Article Save Article Like Article TreeMap in JavaDifficulty Level : MediumLast Updated : 18 Jan, 2022The TreeMap in Java is used to implement Map interface and NavigableMap along with the AbstractMap Class. The map is sorted according to the natural ordering of its keys, or by a Comparator provided at map creation time, depending on which constructor is used. This proves to be an efficient way of sorting and storing the key-value pairs. The storing order maintained by the treemap must be consistent with equals just like any other sorted map, irrespective of the explicit comparators. The treemap implementation is not synchronized in the sense that if a map is accessed by multiple threads, concurrently and at least one of the threads modifies the map structurally, it must be synchronized externally. Features of a TreeMapSome important features of the treemap are as follows: This class is a member of the Java Collections Framework.The class implements Map interfaces including NavigableMap, SortedMap, and extends AbstractMap class.TreeMap in Java does not allow null keys (like Map) and thus a NullPointerException is thrown. However, multiple null values can be associated with different keys.Entry pairs returned by the methods in this class and its views represent snapshots of mappings at the time they were produced. They do not support the Entry.setValue method.Now let us adhere forward and discuss Synchronized TreeMap. The implementation of a TreeMap is not synchronized. This means that if multiple threads access a tree set concurrently, and at least one of the threads modifies the set, it must be synchronized externally. This is typically accomplished by using the Collections.synchronizedSortedMap method. This is best done at the creation time, to prevent accidental unsynchronized access to the set. This can be done as:SortedMap m = Collections.synchronizedSortedMap(new TreeMap(...)); Geeks, now you must be wondering how does the TreemMap works internally? The methods in a TreeMap while getting keyset and values, return an Iterator that is fail-fast in nature. Thus, any concurrent modification will throw ConcurrentModificationException. A TreeMap is based upon a red-black tree data structure. Each node in the tree has: 3 Variables (K key=Key, V value=Value, boolean color=Color)3 References (Entry left = Left, Entry right = Right, Entry parent = Parent)Constructors in TreeMapIn order to create a TreeMap, we need to create an object of the TreeMap class. The TreeMap class consists of various constructors that allow the possible creation of the TreeMap. The following are the constructors available in this class:TreeMap()TreeMap(Comparator comp)TreeMap(Map M)TreeMap(SortedMap sm)Let us discuss them individually alongside implementing every constructor as follows:Constructor 1: TreeMap()This constructor is used to build an empty treemap that will be sorted by using the natural order of its keys. ExampleJava// Java Program to Demonstrate TreeMap// using the Default Constructor // Importing required classesimport java.util.*;import java.util.concurrent.*; // Main class// TreeMapImplementationpublic class GFG { // Method 1 // To show TreeMap constructor static void Example1stConstructor() { // Creating an empty TreeMap TreeMap<Integer, String> tree_map = new TreeMap<Integer, String>(); // Mapping string values to int keys // using put() method tree_map.put(10, "Geeks"); tree_map.put(15, "4"); tree_map.put(20, "Geeks"); tree_map.put(25, "Welcomes"); tree_map.put(30, "You"); // Printing the elements of TreeMap System.out.println("TreeMap: " + tree_map); } // Method 2 // Main driver method public static void main(String[] args) { System.out.println("TreeMap using " + "TreeMap() constructor:\n"); // Calling constructor Example1stConstructor(); }}Output: TreeMap using TreeMap() constructor: TreeMap: {10=Geeks, 15=4, 20=Geeks, 25=Welcomes, 30=You} Constructor 2: TreeMap(Comparator comp)This constructor is used to build an empty TreeMap object in which the elements will need an external specification of the sorting order.ExampleJava// Java Program to Demonstrate TreeMap// using Comparator Constructor // Importing required classesimport java.util.*;import java.util.concurrent.*; // Class 1// Helper class representing Studentclass Student { // Attributes of a student int rollno; String name, address; // Constructor public Student(int rollno, String name, String address) { // This keyword refers to current object itself this.rollno = rollno; this.name = name; this.address = address; } // Method of this class // To print student details public String toString() { return this.rollno + " " + this.name + " " + this.address; }} // Class 2// Helper class - Comparator implementationclass Sortbyroll implements Comparator<Student> { // Used for sorting in ascending order of // roll number public int compare(Student a, Student b) { return a.rollno - b.rollno; }} // Class 3// Main classpublic class GFG { // Calling constructor inside main() static void Example2ndConstructor() { // Creating an empty TreeMap TreeMap<Student, Integer> tree_map = new TreeMap<Student, Integer>( new Sortbyroll()); // Mapping string values to int keys tree_map.put(new Student(111, "bbbb", "london"), 2); tree_map.put(new Student(131, "aaaa", "nyc"), 3); tree_map.put(new Student(121, "cccc", "jaipur"), 1); // Printing the elements of TreeMap System.out.println("TreeMap: " + tree_map); } // Main driver method public static void main(String[] args) { System.out.println("TreeMap using " + "TreeMap(Comparator)" + " constructor:\n"); Example2ndConstructor(); }}Output: TreeMap using TreeMap(Comparator) constructor: TreeMap: {111 bbbb london=2, 121 cccc jaipur=1, 131 aaaa nyc=3} Constructor 3: TreeMap(Map M)This constructor is used to initialize a TreeMap with the entries from the given map M which will be sorted by using the natural order of the keys.ExampleJava// Java Program to Demonstrate TreeMap// using the Default Constructor // Importing required classesimport java.util.*;import java.util.concurrent.*; // Main classpublic class TreeMapImplementation { // Method 1 // To illustrate constructor<Map> static void Example3rdConstructor() { // Creating an empty HashMap Map<Integer, String> hash_map = new HashMap<Integer, String>(); // Mapping string values to int keys // using put() method hash_map.put(10, "Geeks"); hash_map.put(15, "4"); hash_map.put(20, "Geeks"); hash_map.put(25, "Welcomes"); hash_map.put(30, "You"); // Creating the TreeMap using the Map TreeMap<Integer, String> tree_map = new TreeMap<Integer, String>(hash_map); // Printing the elements of TreeMap System.out.println("TreeMap: " + tree_map); } // Method 2 // Main driver method public static void main(String[] args) { System.out.println("TreeMap using " + "TreeMap(Map)" + " constructor:\n"); Example3rdConstructor(); }}Output: TreeMap using TreeMap(Map) constructor: TreeMap: {10=Geeks, 15=4, 20=Geeks, 25=Welcomes, 30=You} Constructor 4: TreeMap(SortedMap sm)This constructor is used to initialize a TreeMap with the entries from the given sorted map which will be stored in the same order as the given sorted map.ExampleJava// Java Program to Demonstrate TreeMap// using the SortedMap Constructor // Importing required classesimport java.util.*;import java.util.concurrent.*; // Main class// TreeMapImplementationpublic class GFG { // Method // To show TreeMap(SortedMap) constructor static void Example4thConstructor() { // Creating a SortedMap SortedMap<Integer, String> sorted_map = new ConcurrentSkipListMap<Integer, String>(); // Mapping string values to int keys // using put() method sorted_map.put(10, "Geeks"); sorted_map.put(15, "4"); sorted_map.put(20, "Geeks"); sorted_map.put(25, "Welcomes"); sorted_map.put(30, "You"); // Creating the TreeMap using the SortedMap TreeMap<Integer, String> tree_map = new TreeMap<Integer, String>(sorted_map); // Printing the elements of TreeMap System.out.println("TreeMap: " + tree_map); } // Method 2 // Main driver method public static void main(String[] args) { System.out.println("TreeMap using " + "TreeMap(SortedMap)" + " constructor:\n"); Example4thConstructor(); }}Output: TreeMap using TreeMap(SortedMap) constructor: TreeMap: {10=Geeks, 15=4, 20=Geeks, 25=Welcomes, 30=You} Methods in the TreeMap ClassMethodAction Performedclear()The method removes all mappings from this TreeMap and clears the map.clone()The method returns a shallow copy of this TreeMap.containsKey(Object key)Returns true if this map contains a mapping for the specified key.containsValue(Object value)Returns true if this map maps one or more keys to the specified value.entrySet()Returns a set view of the mappings contained in this map.firstKey()Returns the first (lowest) key currently in this sorted map.get(Object key)Returns the value to which this map maps the specified key.headMap(Object key_value)The method returns a view of the portion of the map strictly less than the parameter key_value.keySet()The method returns a Set view of the keys contained in the treemap.lastKey()Returns the last (highest) key currently in this sorted map.put(Object key, Object value)The method is used to insert a mapping into a map.putAll(Map map)Copies all of the mappings from the specified map to this map.remove(Object key)Removes the mapping for this key from this TreeMap if present.size()Returns the number of key-value mappings in this map.subMap((K startKey, K endKey)The method returns the portion of this map whose keys range from startKey, inclusive, to endKey, exclusive.values()Returns a collection view of the values contained in this map.Implementation: The following programs below will demonstrate better how to create, insert, and traverse through the TreeMap. Illustration: Java// Java Program to Illustrate Operations in TreeMap// Such as Creation, insertion// searching, and traversal // Importing required classesimport java.util.*;import java.util.concurrent.*; // Main class// Implementation of TreeMappublic class GFG { // Declaring a TreeMap static TreeMap<Integer, String> tree_map; // Method 1 // To create TreeMap static void create() { // Creating an empty TreeMap tree_map = new TreeMap<Integer, String>(); // Display message only System.out.println("TreeMap successfully" + " created"); } // Method 2 // To Insert values in the TreeMap static void insert() { // Mapping string values to int keys // using put() method tree_map.put(10, "Geeks"); tree_map.put(15, "4"); tree_map.put(20, "Geeks"); tree_map.put(25, "Welcomes"); tree_map.put(30, "You"); // Display message only System.out.println("\nElements successfully" + " inserted in the TreeMap"); } // Method 3 // To search a key in TreeMap static void search(int key) { // Checking for the key System.out.println("\nIs key \"" + key + "\" present? " + tree_map.containsKey(key)); } // Method 4 // To search a value in TreeMap static void search(String value) { // Checking for the value System.out.println("\nIs value \"" + value + "\" present? " + tree_map.containsValue(value)); } // Method 5 // To display the elements in TreeMap static void display() { // Displaying the TreeMap System.out.println("\nDisplaying the TreeMap:"); System.out.println("TreeMap: " + tree_map); } // Method 6 // To traverse TreeMap static void traverse() { // Display message only System.out.println("\nTraversing the TreeMap:"); for (Map.Entry<Integer, String> e : tree_map.entrySet()) System.out.println(e.getKey() + " " + e.getValue()); } // Method 6 // Main driver method public static void main(String[] args) { // Calling above defined methods inside main() // Creating a TreeMap create(); // Inserting the values in the TreeMap insert(); // Search key "50" in the TreeMap search(50); // Search value "Geeks" in the TreeMap search("Geeks"); // Display the elements in TreeMap display(); // Traversing the TreeMap traverse(); }}Output: TreeMap successfully created Elements successfully inserted in the TreeMap Is key "50" present? false Is value "Geeks" present? true Displaying the TreeMap: TreeMap: {10=Geeks, 15=4, 20=Geeks, 25=Welcomes, 30=You} Traversing the TreeMap: 10 Geeks 15 4 20 Geeks 25 Welcomes 30 You Performing Various Operations on TreeMapAfter the introduction of Generics in Java 1.5, it is possible to restrict the type of object that can be stored in the TreeMap. Now, let’s see how to perform a few frequently used operations on the TreeMap.Operation 1: Adding ElementsIn order to add an element to the TreeMap, we can use the put() method. However, the insertion order is not retained in the TreeMap. Internally, for every element, the keys are compared and sorted in ascending order. ExampleJava// Java Program to Illustrate Addition of Elements// in TreeMap using put() Method // Importing required classesimport java.util.*; // Main classclass GFG { // Main driver method public static void main(String args[]) { // Default Initialization of a TreeMap TreeMap tm1 = new TreeMap(); // Inserting the elements in TreeMap // using put() method tm1.put(3, "Geeks"); tm1.put(2, "For"); tm1.put(1, "Geeks"); // Initialization of a TreeMap using Generics TreeMap<Integer, String> tm2 = new TreeMap<Integer, String>(); // Inserting the elements in TreeMap // again using put() method tm2.put(new Integer(3), "Geeks"); tm2.put(new Integer(2), "For"); tm2.put(new Integer(1), "Geeks"); // Printing the elements of both TreeMaps // Map 1 System.out.println(tm1); // Map 2 System.out.println(tm2); }}Output: {1=Geeks, 2=For, 3=Geeks} {1=Geeks, 2=For, 3=Geeks} Operation 2: Changing ElementsAfter adding the elements if we wish to change the element, it can be done by again adding the element with the put() method. Since the elements in the treemap are indexed using the keys, the value of the key can be changed by simply inserting the updated value for the key for which we wish to change.ExampleJava// Java program to Illustrate Updation of Elements// in TreeMap using put() Method // Importing required classesimport java.util.*; // Main classclass GFG { // Main driver method public static void main(String args[]) { // Initialization of a TreeMap // using Generics TreeMap<Integer, String> tm = new TreeMap<Integer, String>(); // Inserting the elements in Map // using put() method tm.put(3, "Geeks"); tm.put(2, "Geeks"); tm.put(1, "Geeks"); // Print all current elements in map System.out.println(tm); // Inserting the element at specified // corresponding to specified key tm.put(2, "For"); // Printing the updated elements of Map System.out.println(tm); }}Output: {1=Geeks, 2=Geeks, 3=Geeks} {1=Geeks, 2=For, 3=Geeks} Operation 3: Removing ElementIn order to remove an element from the TreeMap, we can use the remove() method. This method takes the key value and removes the mapping for the key from this treemap if it is present in the map.ExampleJava// Java program to Illustrate Removal of Elements// in TreeMap using remove() Method // Importing required classesimport java.util.*; // Main classclass GFG { // Main driver method public static void main(String args[]) { // Initialization of a TreeMap // using Generics TreeMap<Integer, String> tm = new TreeMap<Integer, String>(); // Inserting the elements // using put() method tm.put(3, "Geeks"); tm.put(2, "Geeks"); tm.put(1, "Geeks"); tm.put(4, "For"); // Printing all elements of Map System.out.println(tm); // Removing the element corresponding to key tm.remove(4); // Printing updated TreeMap System.out.println(tm); }}Output: {1=Geeks, 2=Geeks, 3=Geeks, 4=For} {1=Geeks, 2=Geeks, 3=Geeks} Operation 4: Iterating through the TreeMapThere are multiple ways to iterate through the Map. The most famous way is to use a for-each loop and get the keys. The value of the key is found by using the getValue() method.ExampleJava// Java Program to Illustrate Iterating over TreeMap// using // Importing required classesimport java.util.*; // Main classclass GFG { // Main driver method public static void main(String args[]) { // Initialization of a TreeMap // using Generics TreeMap<Integer, String> tm = new TreeMap<Integer, String>(); // Inserting the elements // using put() method tm.put(3, "Geeks"); tm.put(2, "For"); tm.put(1, "Geeks"); // For-each loop for traversal over Map // via entrySet() Method for (Map.Entry mapElement : tm.entrySet()) { int key = (int)mapElement.getKey(); // Finding the value String value = (String)mapElement.getValue(); // Printing the key and value System.out.println(key + " : " + value); } }}Output: 1 : Geeks 2 : For 3 : Geeks Attention reader! Don’t stop learning now. Get hold of all the important Java Foundation and Collections concepts with the Fundamentals of Java and Java Collections Course at a student-friendly price and become industry ready. To complete your preparation from learning a language to DS Algo and many more, please refer Complete Interview Preparation Course.My Personal Notes arrow_drop_upSave LikePreviousSortedMap Interface in Java with ExamplesNext Multithreading in JavaRecommended ArticlesPage :Java.util.TreeMap.descendingMap() and descendingKeyset() in Java30, Oct 17Java.util.TreeMap.containskey() and containsValue() in Java01, Nov 17Java.util.TreeMap.pollFirstEntry() and pollLastEntry() in Java20, Nov 17Java.util.TreeMap.put() and putAll() in Java24, Nov 17Java.util.TreeMap.floorEntry() and floorKey() in Java24, Nov 17How to fix java.lang.ClassCastException while using the TreeMap in Java?18, Jan 21Differences between TreeMap, HashMap and LinkedHashMap in Java20, May 17TreeMap ceilingKey() in Java with Examples18, Sep 18TreeMap ceilingEntry() and ceilingKey() methods in Java30, Oct 17TreeMap get() Method in Java26, Jun 18TreeMap containsKey() Method in Java26, Jun 18TreeMap clear() Method in Java26, Jun 18TreeMap headMap() Method in Java09, Jul 18TreeMap entrySet() Method in Java09, Jul 18TreeMap lastKey() Method in Java09, Jul 18TreeMap put() Method in Java10, Jul 18TreeMap putAll() Method in Java10, Jul 18TreeMap remove() Method in Java10, Jul 18Program to Convert HashMap to TreeMap in Java27, Sep 18TreeMap lowerKey() in Java with Examples17, Sep 18TreeMap floorKey() in Java with Examples17, Sep 18Using TreeMap to sort User-defined Objects in Java03, Oct 18TreeMap navigableKeySet() method in Java with Examples11, Oct 18TreeMap lowerEntry() method in Java with Examples11, Oct 18Article Contributed By :srinjoy_santra@srinjoy_santraVote for difficultyCurrent difficulty : MediumEasy Normal Medium Hard ExpertImproved By :RishabhPrabhuKaashyapMSKshine561995solankimayanksimmytarika5varshagumber28germanshephered48Article Tags :Java-CollectionsPickedJavaPractice Tags :JavaJava-CollectionsReport IssueWriting code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load CommentsWhat's NewJava Backend Development- LIVE ClassesView DetailsComplete Interview PreparationView DetailsSystem Design-Live Classes for Working ProfessionalsView DetailsMost popular in JavaSplit() String method in Java with examplesArrays.sort() in Java with examplesReverse a string in JavaInitialize an ArrayList in JavaHow to iterate any Map in JavaMore related articles in JavaHow to add an element to an Array in Java?Math pow() method in Java with ExampleSingleton Class in JavaInitializing a List in JavaJava Programming Examples× 5th Floor, A-118,Sector-136, Noida, Uttar Pradesh - 201305 feedback@geeksforgeeks.orgCompanyAbout UsCareersPrivacy PolicyContact UsCopyright PolicyLearnAlgorithmsData StructuresLanguagesCS SubjectsVideo TutorialsWeb DevelopmentWeb TutorialsHTMLCSSJavaScriptBootstrapContributeWrite an ArticleWrite Interview ExperienceInternshipsVideos@geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It ! Start Your Coding Journey Now!Login Register