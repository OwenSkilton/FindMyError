Lower and Upper Bound Theory - GeeksforGeeksSkip to content TutorialsPractice DS & Algo.Must Do QuestionsDSA Topic-wiseDSA Company-wiseAlgorithmsAnalysis of AlgorithmsAsymptotic AnalysisWorst, Average and Best CasesAsymptotic NotationsLittle o and little omega notationsLower and Upper Bound TheoryAnalysis of LoopsSolving RecurrencesAmortized AnalysisWhat does 'Space Complexity' mean ?Pseudo-polynomial AlgorithmsPolynomial Time Approximation SchemeA Time Complexity QuestionSearching AlgorithmsSorting AlgorithmsGraph AlgorithmsPattern SearchingGeometric AlgorithmsMathematicalBitwise AlgorithmsRandomized AlgorithmsGreedy AlgorithmsDynamic ProgrammingDivide and ConquerBacktrackingBranch and BoundAll AlgorithmsData StructuresArraysLinked ListStackQueueBinary TreeBinary Search TreeHeapHashingGraphAdvanced Data StructureMatrixStringsAll Data StructuresInterview CornerCompany PreparationTop TopicsPractice Company QuestionsInterview ExperiencesExperienced InterviewsInternship InterviewsCompetititve ProgrammingDesign PatternsSystem Design TutorialMultiple Choice QuizzesLanguagesCC++JavaPythonC#JavaScriptjQuerySQLPHPScalaPerlGo LanguageHTMLCSSKotlinCS SubjectsMathematicsOperating SystemDBMSComputer NetworksComputer Organization and ArchitectureTheory of ComputationCompiler DesignDigital LogicSoftware EngineeringGATEGATE Computer Science NotesLast Minute NotesGATE CS Solved PapersGATE CS Original Papers and Official KeysGATE 2021 DatesGATE CS 2021 SyllabusImportant Topics for GATE CSWeb TechnologiesHTMLCSSJavaScriptAngularJSReactJSNodeJSBootstrapjQueryPHPSoftware DesignsSoftware Design PatternsSystem Design TutorialSchool LearningSchool ProgrammingMathematicsNumber SystemAlgebraTrigonometryStatisticsProbabilityGeometryMensurationCalculusMaths Notes (Class 8-12)Class 8 NotesClass 9 NotesClass 10 NotesClass 11 NotesClass 12 NotesNCERT SolutionsClass 8 Maths SolutionClass 9 Maths SolutionClass 10 Maths SolutionClass 11 Maths SolutionClass 12 Maths SolutionRD Sharma SolutionsClass 8 Maths SolutionClass 9 Maths SolutionClass 10 Maths SolutionClass 11 Maths SolutionClass 12 Maths SolutionPhysics Notes (Class 8-11)Class 8 NotesClass 9 NotesClass 10 NotesClass 11 NotesISRO CSISRO CS Solved PapersISRO CS Original Papers and Official KeysISRO CS Syllabus for Scientist/Engineer ExamUGC NET CSUGC NET CS Notes Paper IIUGC NET CS Notes Paper IIIUGC NET CS Solved PapersStudentCampus Ambassador ProgramSchool Ambassador ProgramProjectGeek of the MonthCampus Geek of the MonthPlacement CourseCompetititve ProgrammingTestimonialsGeek on the TopCareersInternshipJobsApply for JobsPost a JobCourses WriteCome write articles for us and get featuredPracticeLearn and code with the best industry expertsPremiumGet access to ad-free content, doubt assistance and more!JobsCome and find your dream job with usGeeks DigestQuizzesGeeks CampusGblog ArticlesIDECampus Mantri HomeSaved VideosCoursesGBlogPuzzlesWhat's New ? Change Language Data StructuresAlgorithmsInterview PreparationTopic-wise PracticeC++JavaPythonCompetitive ProgrammingMachine LearningWeb DevelopmentPuzzlesProject IdeasGFG School Related Articles ▲Related ArticlesLower and Upper Bound TheoryAnalysis of Algorithms | Set 4 (Analysis of Loops)Analysis of Algorithms | Set 2 (Worst, Average and Best Cases)Analysis of Algorithms | Set 3 (Asymptotic Notations)Analysis of Algorithm | Set 4 (Solving Recurrences)Analysis of Algorithm | Set 5 (Amortized Analysis Introduction)What does ‘Space Complexity’ mean?Pseudo-polynomial AlgorithmsNP-Completeness | Set 1 (Introduction)A Time Complexity QuestionMerge SortQuickSortHeapSortBinary HeapTime Complexity of building a heapApplications of Heap Data StructureBinomial HeapFibonacci Heap | Set 1 (Introduction)Fibonacci Heap – Insertion and UnionFibonacci Heap – Deletion, Extract min and Decrease keyLeftist Tree / Leftist HeapK-ary HeapIterative HeapSortTop 50 Array Coding Problems for InterviewsRecursionCounting SortDifference between BFS and DFSA* Search AlgorithmHow to write a Pseudo Code?Playfair Cipher with ExamplesTable of ContentsLower and Upper Bound TheoryAnalysis of Algorithms | Set 4 (Analysis of Loops)Analysis of Algorithms | Set 2 (Worst, Average and Best Cases)Analysis of Algorithms | Set 3 (Asymptotic Notations)Analysis of Algorithm | Set 4 (Solving Recurrences)Analysis of Algorithm | Set 5 (Amortized Analysis Introduction)What does ‘Space Complexity’ mean?Pseudo-polynomial AlgorithmsNP-Completeness | Set 1 (Introduction)A Time Complexity QuestionMerge SortQuickSortHeapSortBinary HeapTime Complexity of building a heapApplications of Heap Data StructureBinomial HeapFibonacci Heap | Set 1 (Introduction)Fibonacci Heap – Insertion and UnionFibonacci Heap – Deletion, Extract min and Decrease keyLeftist Tree / Leftist HeapK-ary HeapIterative HeapSortTop 50 Array Coding Problems for InterviewsRecursionCounting SortDifference between BFS and DFSA* Search AlgorithmHow to write a Pseudo Code?Playfair Cipher with ExamplesImprove Article Save Article Like Article Lower and Upper Bound TheoryDifficulty Level : EasyLast Updated : 28 Nov, 2021The Lower and Upper Bound Theory provides a way to find the lowest complexity algorithm to solve a problem. Before understanding the theory, first, let’s have a brief look at what actually Lower and Upper bounds are. Lower Bound – Let L(n) be the running time of an algorithm A(say), then g(n) is the Lower Bound of A if there exist two constants C and N such that L(n) >= C*g(n) for n > N. Lower bound of an algorithm is shown by the asymptotic notation called Big Omega (or just Omega). Upper Bound – Let U(n) be the running time of an algorithm A(say), then g(n) is the Upper Bound of A if there exist two constants C and N such that U(n) <= C*g(n) for n > N. Upper bound of an algorithm is shown by the asymptotic notation called Big Oh(O) (or just Oh).1. Lower Bound Theory: According to the lower bound theory, for a lower bound L(n) of an algorithm, it is not possible to have any other algorithm (for a common problem) whose time complexity is less than L(n) for random input. Also, every algorithm must take at least L(n) time in the worst case. Note that L(n) here is the minimum of all the possible algorithms, of maximum complexity. The Lower Bound is very important for any algorithm. Once we calculated it, then we can compare it with the actual complexity of the algorithm and if their order is the same then we can declare our algorithm as optimal. So in this section, we will be discussing techniques for finding the lower bound of an algorithm. Note that our main motive is to get an optimal algorithm, which is the one having it’s Upper Bound Same as its Lower Bound (U(n)=L(n)). Merge Sort is a common example of an optimal algorithm.Trivial Lower Bound – It is the easiest method to find the lower bound. The Lower bounds which can be easily observed on the basis of the number of input taken and the number of output produced are called Trivial Lower Bound. Example: Multiplication of n x n matrix, where, Input: For 2 matrix we will have 2n2 inputs Output: 1 matrix of order n x n, i.e., n2 outputs In the above example it’s easily predictable that the lower bound is O(n2). Computational Model – The method is for all those algorithms that are comparison-based. For example, in sorting, we have to compare the elements of the list among themselves and then sort them accordingly. Similar is the case with searching and thus we can implement the same in this case. Now we will look at some examples to understand its usage.Ordered Searching – It is a type of searching in which the list is already sorted.Example-1: Linear search Explanation – In linear search, we compare the key with the first element if it does not match we compare it with the second element and so on till we check against the nth element. Else we will end up with a failure. Example-2: Binary search Explanation – In binary search, we check the middle element against the key, if it is greater we search the first half else we check the second half and repeat the same process. The diagram below there is an illustration of binary search in an array consisting of 4 elements Calculating the lower bound: The max no of comparisons are n. Let there be k levels in the tree. No. of nodes will be 2k-1The upper bound of no of nodes in any comparison-based search of an element in the list of size n will be n as there are a maximum of n comparisons in worst case scenario 2k-1Each level will take 1 comparison thus no. of comparisons k≥|log2n|Thus the lower bound of any comparison-based search from a list of n elements cannot be less than log(n). Therefore we can say that Binary Search is optimal as its complexity is Θ(log n).Sorting – The diagram below is an example of a tree formed in sorting combinations with 3 elements.Example – For n elements, finding lower bound using computation model. Explanation – For n elements, we have a total of n! combinations (leaf nodes). (Refer to the diagram the total combinations are 3! or 6) also, it is clear that the tree formed is a binary tree. Each level in the diagram indicates a comparison. Let there be k levels => 2k is the total number of leaf nodes in a full binary tree thus in this case we have n!≤2k.As the k in the above example is the no of comparisons thus by computational model lower bound = k. Now we can say that, n!≤2T(n) Thus, T(n)>|log n!| => n!<=nn Thus, log n!<=log nn Taking ceiling function on both sides, we get |-log nn-|>=|-log n!-| Thus complexity becomes Θ(lognn) or Θ(nlogn) Using Lower bond theory to solve the algebraic problem:Straight Line Program – The type of program built without any loops or control structures is called the Straight Line Program. For example,C//summing to nosSum(a, b){ //no loops and no control structures c:= a+b; return c;}Algebraic Problem – Problems related to algebra like solving equations inequalities etc. come under algebraic problems. For example, solving equation ax2+bx+c with simple programming.CAlgo_Sol(a, b, c, x){ //1 assignment v:=a*x; //1 assignment v:=v+b; //1 assignment v:=v*x; //1 assignment ans:=v+c; return ans;} The complexity for solving here is 4 (excluding the returning). The above example shows us a simple way to solve an equation for 2-degree polynomial i.e., 4 thus for nth degree polynomial we will have a complexity of O(n2). Let us demonstrate via an algorithm. Example: x+a0 is a polynomial of degree n.Cpow(x, n) { p := 1; //loop from 1 to n for i:=1 to n p := p*x; return p; } polynomial(A, x, n) { int p, v:=0; for i := 0 to n //loop within a loop from 0 to n v := v + A[i]*pow(x, i); return v; } Loop within a loop => complexity = O(n2);Now to find an optimal algorithm we need to find the lower bound here (as per lower bound theory). As per Lower Bound Theory, The optimal algorithm to solve the above problem is the one having complexity O(n). Let’s prove this theorem using lower bounds.Theorem: To prove that optimal algo of solving a n degree polynomial is O(n) Proof: The best solution for reducing the algo is to make this problem less complex by dividing the polynomial into several straight-line problems.=> anxn+an-1xn-1+an-2xn-2+...+a1x+a0 can be written as, ((..(anx+an-1)x+..+a2)x+a1)x+a0 Now, algorithm will be as, v=0 v=v+an v=v*x v=v+an-1 v=v*x ... v=v+a1 v=v*x v=v+a0 Cpolynomial(A, x, n) { int p, v=0; // loop executed n times for i = n to 0 v = (v + A[i])*x; return v; }Clearly, the complexity of this code is O(n). This way of solving such equations is called Horner’s method. Here is where lower bound theory works and gives the optimum algorithm’s complexity as O(n). 2. Upper Bound Theory: According to the upper bound theory, for an upper bound U(n) of an algorithm, we can always solve the problem at most U(n) time. Time taken by a known algorithm to solve a problem with worse case input gives us the upper bound. My Personal Notes arrow_drop_upSave LikeNext Analysis of Algorithms | Set 4 (Analysis of Loops)Recommended ArticlesPage :Scala | Upper bound28, Feb 19Scala | Lower Bound12, Mar 19Python program to count upper and lower case characters without using inbuilt functions06, Apr 18Shell Script to Convert a File Content to Lower Case or Upper Case18, Apr 21Bound, unbound, and static methods in Python27, Dec 190/1 Knapsack using Least Cost Branch and Bound28, Jun 20Generate Binary Strings of length N using Branch and Bound20, Nov 19Difference between Backtracking and Branch-N-Bound technique09, Jun 20Scala - View Bound27, Jun 20How to specify which form element a label is bound to ?12, Apr 21Java Program to Display Upper Triangular Matrix27, Oct 20Convert given upper triangular Matrix to 1D Array07, Dec 20Java Program to Print Upper Star Triangle Pattern15, Mar 21How to set the background image start from the upper left corner of the content using CSS?28, Apr 21Java Program to Print Mirror Upper Star Triangle Pattern21, Mar 21Node.js MySQL UPPER() Function16, Feb 21Which built-in method returns the calling string value converted to upper case in JavaScript ?30, Dec 21Convert given lower triangular Matrix to 1D array09, Feb 21Lower Insertion Point20, Dec 18Minimum number of operations to move all uppercase characters before all lower case characters01, Feb 19Java Program to Display Lower Triangular Matrix09, Nov 20Java Program to Check Whether a Given Matrix is Lower Triangular Matrix or Not05, Jan 21Java Program to Print Mirror Lower Star Triangle Pattern15, Mar 21Node.js MySQL LOWER() Function16, Feb 21Article Contributed By :piyush25pv@piyush25pvVote for difficultyCurrent difficulty : EasyEasy Normal Medium Hard ExpertImproved By :soumya7sriharimalla001pawan199623603vaibhav2021Article Tags :PickedTechnical Scripter 2018AlgorithmsAnalysisTechnical ScripterPractice Tags :AlgorithmsReport IssueWriting code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load CommentsWhat's NewDSA Live Classes for Working ProfessionalsView DetailsComplete Interview PreparationView DetailsSystem Design-Live Classes for Working ProfessionalsView DetailsMost popular in AlgorithmsRecursive Practice Problems with SolutionsIntroduction to AlgorithmsQuick Sort vs Merge SortComplexity Analysis of Binary SearchPriority CPU Scheduling with different arrival time - Set 2Most visited in AnalysisPractice Questions on Time Complexity AnalysisAnalysis of Algorithms | Set 1 (Asymptotic Analysis)Understanding Time Complexity with Simple ExamplesTime Complexity and Space ComplexityAnalysis of different sorting techniques× 5th Floor, A-118,Sector-136, Noida, Uttar Pradesh - 201305 feedback@geeksforgeeks.orgCompanyAbout UsCareersPrivacy PolicyContact UsCopyright PolicyLearnAlgorithmsData StructuresLanguagesCS SubjectsVideo TutorialsWeb DevelopmentWeb TutorialsHTMLCSSJavaScriptBootstrapContributeWrite an ArticleWrite Interview ExperienceInternshipsVideos@geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It ! Start Your Coding Journey Now!Login Register