FileOutputStream in Java - GeeksforGeeksSkip to content TutorialsPractice DS & Algo.Must Do QuestionsDSA Topic-wiseDSA Company-wiseAlgorithmsAnalysis of AlgorithmsAsymptotic AnalysisWorst, Average and Best CasesAsymptotic NotationsLittle o and little omega notationsLower and Upper Bound TheoryAnalysis of LoopsSolving RecurrencesAmortized AnalysisWhat does 'Space Complexity' mean ?Pseudo-polynomial AlgorithmsPolynomial Time Approximation SchemeA Time Complexity QuestionSearching AlgorithmsSorting AlgorithmsGraph AlgorithmsPattern SearchingGeometric AlgorithmsMathematicalBitwise AlgorithmsRandomized AlgorithmsGreedy AlgorithmsDynamic ProgrammingDivide and ConquerBacktrackingBranch and BoundAll AlgorithmsData StructuresArraysLinked ListStackQueueBinary TreeBinary Search TreeHeapHashingGraphAdvanced Data StructureMatrixStringsAll Data StructuresInterview CornerCompany PreparationTop TopicsPractice Company QuestionsInterview ExperiencesExperienced InterviewsInternship InterviewsCompetititve ProgrammingDesign PatternsSystem Design TutorialMultiple Choice QuizzesLanguagesCC++JavaPythonC#JavaScriptjQuerySQLPHPScalaPerlGo LanguageHTMLCSSKotlinCS SubjectsMathematicsOperating SystemDBMSComputer NetworksComputer Organization and ArchitectureTheory of ComputationCompiler DesignDigital LogicSoftware EngineeringGATEGATE Computer Science NotesLast Minute NotesGATE CS Solved PapersGATE CS Original Papers and Official KeysGATE 2021 DatesGATE CS 2021 SyllabusImportant Topics for GATE CSWeb TechnologiesHTMLCSSJavaScriptAngularJSReactJSNodeJSBootstrapjQueryPHPSoftware DesignsSoftware Design PatternsSystem Design TutorialSchool LearningSchool ProgrammingMathematicsNumber SystemAlgebraTrigonometryStatisticsProbabilityGeometryMensurationCalculusMaths Notes (Class 8-12)Class 8 NotesClass 9 NotesClass 10 NotesClass 11 NotesClass 12 NotesNCERT SolutionsClass 8 Maths SolutionClass 9 Maths SolutionClass 10 Maths SolutionClass 11 Maths SolutionClass 12 Maths SolutionRD Sharma SolutionsClass 8 Maths SolutionClass 9 Maths SolutionClass 10 Maths SolutionClass 11 Maths SolutionClass 12 Maths SolutionPhysics Notes (Class 8-11)Class 8 NotesClass 9 NotesClass 10 NotesClass 11 NotesISRO CSISRO CS Solved PapersISRO CS Original Papers and Official KeysISRO CS Syllabus for Scientist/Engineer ExamUGC NET CSUGC NET CS Notes Paper IIUGC NET CS Notes Paper IIIUGC NET CS Solved PapersStudentCampus Ambassador ProgramSchool Ambassador ProgramProjectGeek of the MonthCampus Geek of the MonthPlacement CourseCompetititve ProgrammingTestimonialsGeek on the TopCareersInternshipJobsApply for JobsPost a JobCourses WriteCome write articles for us and get featuredPracticeLearn and code with the best industry expertsPremiumGet access to ad-free content, doubt assistance and more!JobsCome and find your dream job with usGeeks DigestQuizzesGeeks CampusGblog ArticlesIDECampus Mantri HomeSaved VideosCoursesGBlogPuzzlesWhat's New ? Change Language Data StructuresAlgorithmsInterview PreparationTopic-wise PracticeC++JavaPythonCompetitive ProgrammingMachine LearningWeb DevelopmentPuzzlesProject IdeasGFG School Related Articles ▲Related ArticlesArrays in JavaSplit() String method in Java with examplesArrays.sort() in Java with examplesFor-each loop in JavaReverse a string in JavaHow to iterate any Map in JavaObject Oriented Programming (OOPs) Concept in JavaHashMap in Java with ExamplesInitialize an ArrayList in JavaMultidimensional Arrays in JavaStack Class in JavaArrayList in JavaHow to add an element to an Array in Java?Overriding in JavaCollections.sort() in Java with ExamplesLinkedList in JavaSingleton Class in JavaQueue Interface In JavaInterfaces in JavaSet in JavaInheritance in JavaClasses and Objects in JavaCollections in JavaMath pow() method in Java with ExampleHow to determine length or size of an Array in Java?Difference Between == and .equals() Method in JavaCompare two Strings in JavaInitializing a List in JavaPolymorphism in JavaMultithreading in JavaTable of ContentsArrays in JavaSplit() String method in Java with examplesArrays.sort() in Java with examplesFor-each loop in JavaReverse a string in JavaHow to iterate any Map in JavaObject Oriented Programming (OOPs) Concept in JavaHashMap in Java with ExamplesInitialize an ArrayList in JavaMultidimensional Arrays in JavaStack Class in JavaArrayList in JavaHow to add an element to an Array in Java?Overriding in JavaCollections.sort() in Java with ExamplesLinkedList in JavaSingleton Class in JavaQueue Interface In JavaInterfaces in JavaSet in JavaInheritance in JavaClasses and Objects in JavaCollections in JavaMath pow() method in Java with ExampleHow to determine length or size of an Array in Java?Difference Between == and .equals() Method in JavaCompare two Strings in JavaInitializing a List in JavaPolymorphism in JavaMultithreading in JavaImprove Article Save Article Like Article FileOutputStream in JavaLast Updated : 25 Jun, 2021FileOutputStream is an outputstream for writing data/streams of raw bytes to file or storing data to file. FileOutputStream is a subclass of OutputStream. To write primitive values into a file, we use FileOutputStream class. For writing byte-oriented and character-oriented data, we can use FileOutputStream but for writing character-oriented data, FileWriter is more preferred.What is meant by storing data to files?Through the above image, we can understand that when we run the java program, the data is stored in the RAM. Now, suppose the variable data stored in RAM, we want to access that data and bring it to a file in our hard disk. So, we will create an object of OutputStream in the RAM and that will point to a file referencing to hard disk.Now, the data from the variable data file in the RAM will go to the referencing file (object of Output Stream) and from there will be transferred/stored in the file of the hard disk.Hierarchy of FileOutputStreamConstructors of FileOutputStream1. FileOutputStream(File file): Creates a file output stream to write to the file represented by the specified File object.FileOutputStream fout = new FileOutputStream(File file);2. FileOutputStream( File file, boolean append): Creates a file output stream object represented by specified file object.FileOutputStream fout = new FileOutputStream(File file, boolean append);3. FileOutputStream(FileDescripter fdobj): Creates a file output stream for writing to the specified file descriptor, which represents an existing connection with the actual file in the file system.FileOutputStream fout = new FileOutputStream(FileDescripter fdobj);4. FileOutputStream( String name): Creates an object of file output stream to write to the file with the particular name mentioned.FileOutputStream fout = new FileOutputStream( String name);5. FileOutputStream( String name, boolean append): Creates an object of file output stream to write to the file with the specified name.FileOutputStream fout = new FileOutputStream( String name, boolean append);Declaration:public class FileOutputStream extends OutputStream Steps to write data to a file using FileOutputStream:First, attach a file path to a FileOutputStream as shown here:FileOutputStream fout = new FileOutputStream(“file1.txt”);This will enable us to write data to the file. Then, to write data to the file, we should write data using the FileOutputStream as,fout.write();Then we should call the close() method to close the fout file.fout.close()Example:We need to import the java.io package to use FileOutputStream class.Java// java program to use FileOutputStream object for writing// data import java.io.*; class FileExample { public static void main(String[] args) throws IOException { int i; // create a fileoutputstream object FileOutputStream fout = new FileOutputStream("../files/name3.txt", true); // we need to transfer this string to files String st = "TATA"; char ch[] = st.toCharArray(); for (i = 0; i < st.length(); i++) { // we will write the string by writing each // character one by one to file fout.write(ch[i]); } // by doing fout.close() all the changes which have // been made till now in RAM had been now saved to // hard disk fout.close(); }}The data (i.e the string TATA will be transferred to file.Before running the programAfter running the programmyfile.txt file is created and the text “TATA” is saved in the file.Some important Methods1. Write() Method:write(): this writes the single byte to the file output stream.write(byte[] array): this writes the specified array’s bytes to the output stream.write(byte[] array, int start, int length): this writes the number of bytes equal to length to the output stream from an array starting from the position start. Example:Java// java program to write data to file import java.io.FileOutputStream;import java.util.*; public class Main { public static void main(String[] args) { String data = "Welcome to GfG"; try { FileOutputStream output = new FileOutputStream("output.txt"); // The getBytes() method used // converts a string into bytes array. byte[] array = data.getBytes(); // writing the string to the file by writing // each character one by one // Writes byte to the file output.write(array); output.close(); } catch (Exception e) { e.getStackTrace(); } }} When we run the program, the "Welcome to GfG" line is copied to output.txt file. 2. flush(): For clearing the OutputStream, we use the flush() method. This method forces all the data to get stored to its destination. Example: Java// java program to show the usage of flush() methodimport java.io.FileOutputStream;import java.io.IOException; public class Main { public static void main(String[] args) throws IOException { FileOutputStream out = null; String data = "Welcome to GfG"; try { out = new FileOutputStream(" flush.txt"); // Using write() method out.write(data.getBytes()); // Using the flush() method out.flush(); out.close(); } catch (Exception e) { e.getStackTrace(); } }} If, we run the program, the file flush.txt is filled with the text of the string"Welcome to GfG" 3. close() method: This method closes the file OutputStream. Once it is called, we cannot use other methods. Methods of fileOutputStreamMethodDescriptionvoid close() It closes the file output stream.protected void finalize()It is used to clean up all the connection with the file output stream and finalize the data.FileChannel getChannel() Returns the unique FileChannel object associated with this file output stream.FileDescriptor getFD() It returns the file descriptor associated with the stream.void write(int b)It is used to write the specified byte to the file output stream.void write(byte[] arr)It is used to write data in bytes of arr[] to file output stream.void write(byte[] ary, int off, int len)It is used to write the number of bytes equal to length to the output stream from an array starting from the position start.Methods declared in OutputStream class MethodDescriptionflush()this method forces to write all data present in the output stream to the destination(hard disk).nullOutputStream()this method returns a new OutputStream which discards all bytes. The stream returned is initially open. Reference: https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/io/FileOutputStream.html Attention reader! Don’t stop learning now. Get hold of all the important Java Foundation and Collections concepts with the Fundamentals of Java and Java Collections Course at a student-friendly price and become industry ready. To complete your preparation from learning a language to DS Algo and many more, please refer Complete Interview Preparation Course.My Personal Notes arrow_drop_upSave LikePreviousClass 8 RD Sharma Solutions - Chapter 7 Factorization - Exercise 7.7Next Does Company Culture Matter in a Software Engineer Job?Recommended ArticlesPage :Creating a file using FileOutputStream22, Dec 16Difference Between java.sql.Time, java.sql.Timestamp and java.sql.Date in Java07, Apr 21How to Convert java.sql.Date to java.util.Date in Java?02, Feb 21Different Ways to Convert java.util.Date to java.time.LocalDate in Java05, Jan 21How to Convert java.util.Date to java.sql.Date in Java?23, Mar 21Java.util.BitSet class methods in Java with Examples | Set 218, Nov 16Java.Lang.Float class in Java27, Mar 17Java.io.BufferedInputStream class in Java20, Jan 17Java.io.ObjectInputStream Class in Java | Set 102, Feb 17Java.util.BitSet class in Java with Examples | Set 116, Nov 16Java.io.BufferedWriter class methods in Java29, Dec 16Java.io.DataOutputStream in Java06, Jan 17Java.io.StreamTokenizer Class in Java | Set 106, Jan 17Java.io.InputStream Class in Java09, Jan 17Java.io.SequenceInputStream in Java06, Jan 17Java.io.StreamTokenizer Class in Java | Set 209, Jan 17Java.io.Console class in Java09, Jan 17Java.io.FilterOutputStream Class in Java13, Jan 17Java.io.CharArrayReader Class in Java16, Jan 17Java.io.CharArrayWriter class in Java | Set 117, Jan 17Java.io.CharArrayWriter class in Java | Set 217, Jan 17Java.io.DataInputStream class in Java | Set 118, Jan 17Java.io.DataInputStream class in Java | Set 218, Jan 17Java.io.FilterInputStream Class in Java19, Jan 17Article Contributed By :goelshubhangi3118@goelshubhangi3118Vote for difficultyEasy Normal Medium Hard ExpertImproved By :simmytarika5Article Tags :Java-File ClassJava-I/OJavaPractice Tags :JavaReport IssueWriting code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load CommentsWhat's NewJava Backend Development- LIVE ClassesView DetailsComplete Interview PreparationView DetailsSystem Design-Live Classes for Working ProfessionalsView DetailsMost popular in JavaJava Programming ExamplesStream In JavaStrings in JavaIntroduction to JavaSystem.out.println in JavaMore related articles in JavaScanner Class in JavaDifferent ways of Reading a text file in JavaComparator Interface in Java with ExamplesStringBuilder Class in Java with ExamplesFunctional Interfaces in Java× 5th Floor, A-118,Sector-136, Noida, Uttar Pradesh - 201305 feedback@geeksforgeeks.orgCompanyAbout UsCareersPrivacy PolicyContact UsCopyright PolicyLearnAlgorithmsData StructuresLanguagesCS SubjectsVideo TutorialsWeb DevelopmentWeb TutorialsHTMLCSSJavaScriptBootstrapContributeWrite an ArticleWrite Interview ExperienceInternshipsVideos@geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It ! Start Your Coding Journey Now!Login Register