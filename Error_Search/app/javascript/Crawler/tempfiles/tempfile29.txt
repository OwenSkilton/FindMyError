Analysis of Algorithms | Set 2 (Worst, Average and Best Cases) - GeeksforGeeksSkip to content TutorialsPractice DS & Algo.Must Do QuestionsDSA Topic-wiseDSA Company-wiseAlgorithmsAnalysis of AlgorithmsAsymptotic AnalysisWorst, Average and Best CasesAsymptotic NotationsLittle o and little omega notationsLower and Upper Bound TheoryAnalysis of LoopsSolving RecurrencesAmortized AnalysisWhat does 'Space Complexity' mean ?Pseudo-polynomial AlgorithmsPolynomial Time Approximation SchemeA Time Complexity QuestionSearching AlgorithmsSorting AlgorithmsGraph AlgorithmsPattern SearchingGeometric AlgorithmsMathematicalBitwise AlgorithmsRandomized AlgorithmsGreedy AlgorithmsDynamic ProgrammingDivide and ConquerBacktrackingBranch and BoundAll AlgorithmsData StructuresArraysLinked ListStackQueueBinary TreeBinary Search TreeHeapHashingGraphAdvanced Data StructureMatrixStringsAll Data StructuresInterview CornerCompany PreparationTop TopicsPractice Company QuestionsInterview ExperiencesExperienced InterviewsInternship InterviewsCompetititve ProgrammingDesign PatternsSystem Design TutorialMultiple Choice QuizzesLanguagesCC++JavaPythonC#JavaScriptjQuerySQLPHPScalaPerlGo LanguageHTMLCSSKotlinCS SubjectsMathematicsOperating SystemDBMSComputer NetworksComputer Organization and ArchitectureTheory of ComputationCompiler DesignDigital LogicSoftware EngineeringGATEGATE Computer Science NotesLast Minute NotesGATE CS Solved PapersGATE CS Original Papers and Official KeysGATE 2021 DatesGATE CS 2021 SyllabusImportant Topics for GATE CSWeb TechnologiesHTMLCSSJavaScriptAngularJSReactJSNodeJSBootstrapjQueryPHPSoftware DesignsSoftware Design PatternsSystem Design TutorialSchool LearningSchool ProgrammingMathematicsNumber SystemAlgebraTrigonometryStatisticsProbabilityGeometryMensurationCalculusMaths Notes (Class 8-12)Class 8 NotesClass 9 NotesClass 10 NotesClass 11 NotesClass 12 NotesNCERT SolutionsClass 8 Maths SolutionClass 9 Maths SolutionClass 10 Maths SolutionClass 11 Maths SolutionClass 12 Maths SolutionRD Sharma SolutionsClass 8 Maths SolutionClass 9 Maths SolutionClass 10 Maths SolutionClass 11 Maths SolutionClass 12 Maths SolutionPhysics Notes (Class 8-11)Class 8 NotesClass 9 NotesClass 10 NotesClass 11 NotesISRO CSISRO CS Solved PapersISRO CS Original Papers and Official KeysISRO CS Syllabus for Scientist/Engineer ExamUGC NET CSUGC NET CS Notes Paper IIUGC NET CS Notes Paper IIIUGC NET CS Solved PapersStudentCampus Ambassador ProgramSchool Ambassador ProgramProjectGeek of the MonthCampus Geek of the MonthPlacement CourseCompetititve ProgrammingTestimonialsGeek on the TopCareersInternshipJobsApply for JobsPost a JobCourses WriteCome write articles for us and get featuredPracticeLearn and code with the best industry expertsPremiumGet access to ad-free content, doubt assistance and more!JobsCome and find your dream job with usGeeks DigestQuizzesGeeks CampusGblog ArticlesIDECampus Mantri HomeSaved VideosCoursesGBlogPuzzlesWhat's New ? Change Language Data StructuresAlgorithmsInterview PreparationTopic-wise PracticeC++JavaPythonCompetitive ProgrammingMachine LearningWeb DevelopmentPuzzlesProject IdeasGFG School Related Articles ▲Related ArticlesAnalysis of Algorithms | Set 2 (Worst, Average and Best Cases)Analysis of Algorithms | Set 3 (Asymptotic Notations)Analysis of Algorithms | Set 4 (Analysis of Loops)Analysis of Algorithm | Set 4 (Solving Recurrences)Analysis of Algorithm | Set 5 (Amortized Analysis Introduction)What does ‘Space Complexity’ mean?Pseudo-polynomial AlgorithmsNP-Completeness | Set 1 (Introduction)A Time Complexity QuestionMerge SortQuickSortHeapSortBinary HeapTime Complexity of building a heapApplications of Heap Data StructureBinomial HeapFibonacci Heap | Set 1 (Introduction)Fibonacci Heap – Insertion and UnionFibonacci Heap – Deletion, Extract min and Decrease keyLeftist Tree / Leftist HeapK-ary HeapIterative HeapSortProgram for Fibonacci numbersProgram for nth Catalan NumberBell Numbers (Number of ways to Partition a Set)Analysis of Algorithms | Set 1 (Asymptotic Analysis)Practice Questions on Time Complexity AnalysisTable of ContentsAnalysis of Algorithms | Set 2 (Worst, Average and Best Cases)Analysis of Algorithms | Set 3 (Asymptotic Notations)Analysis of Algorithms | Set 4 (Analysis of Loops)Analysis of Algorithm | Set 4 (Solving Recurrences)Analysis of Algorithm | Set 5 (Amortized Analysis Introduction)What does ‘Space Complexity’ mean?Pseudo-polynomial AlgorithmsNP-Completeness | Set 1 (Introduction)A Time Complexity QuestionMerge SortQuickSortHeapSortBinary HeapTime Complexity of building a heapApplications of Heap Data StructureBinomial HeapFibonacci Heap | Set 1 (Introduction)Fibonacci Heap – Insertion and UnionFibonacci Heap – Deletion, Extract min and Decrease keyLeftist Tree / Leftist HeapK-ary HeapIterative HeapSortProgram for Fibonacci numbersProgram for nth Catalan NumberBell Numbers (Number of ways to Partition a Set)Analysis of Algorithms | Set 1 (Asymptotic Analysis)Practice Questions on Time Complexity AnalysisImprove Article Save Article Like Article Analysis of Algorithms | Set 2 (Worst, Average and Best Cases)Difficulty Level : EasyLast Updated : 26 Jan, 2022In the previous post, we discussed how Asymptotic analysis overcomes the problems of the naive way of analyzing algorithms. In this post, we will take an example of Linear Search and analyze it using Asymptotic analysis.We can have three cases to analyze an algorithm: 1) The Worst Case 2) Average Case 3) Best CaseLet us consider the following implementation of Linear Search. C++// C++ implementation of the approach#include <bits/stdc++.h>using namespace std; // Linearly search x in arr[].// If x is present then return the index,// otherwise return -1int search(int arr[], int n, int x){ int i; for (i = 0; i < n; i++) { if (arr[i] == x) return i; } return -1;} // Driver Codeint main(){ int arr[] = { 1, 10, 30, 15 }; int x = 30; int n = sizeof(arr) / sizeof(arr[0]); cout << x << " is present at index " << search(arr, n, x); getchar(); return 0;} // This code is contributed// by Akanksha RaiC// C implementation of the approach#include <stdio.h> // Linearly search x in arr[].// If x is present then return the index,// otherwise return -1int search(int arr[], int n, int x){ int i; for (i = 0; i < n; i++) { if (arr[i] == x) return i; } return -1;} /* Driver program to test above functions*/int main(){ int arr[] = { 1, 10, 30, 15 }; int x = 30; int n = sizeof(arr) / sizeof(arr[0]); printf("%d is present at index %d", x, search(arr, n, x)); getchar(); return 0;}Java// Java implementation of the approach public class GFG { // Linearly search x in arr[]. If x is present then // return the index, otherwise return -1 static int search(int arr[], int n, int x) { int i; for (i = 0; i < n; i++) { if (arr[i] == x) { return i; } } return -1; } /* Driver program to test above functions*/ public static void main(String[] args) { int arr[] = { 1, 10, 30, 15 }; int x = 30; int n = arr.length; System.out.printf("%d is present at index %d", x, search(arr, n, x)); }} /*This code is contributed by PrinciRaj1992*/Python3# Python 3 implementation of the approach # Linearly search x in arr[]. If x is present# then return the index, otherwise return -1 def search(arr, x): for index, value in enumerate(arr): if value == x: return index return -1 # Driver Codearr = [1, 10, 30, 15]x = 30print(x, "is present at index", search(arr, x)) # This code is contributed# by PrinciRaj1992C#// C# implementation of the approachusing System;public class GFG { // Linearly search x in arr[]. If x is present then // return the index, otherwise return -1 static int search(int[] arr, int n, int x) { int i; for (i = 0; i < n; i++) { if (arr[i] == x) { return i; } } return -1; } /* Driver program to test above functions*/ public static void Main() { int[] arr = { 1, 10, 30, 15 }; int x = 30; int n = arr.Length; Console.WriteLine(x + " is present at index " + search(arr, n, x)); }} /*This code is contributed by PrinciRaj1992*/PHP<?php// PHP implementation of the approach // Linearly search x in arr[]. If x// is present then return the index,// otherwise return -1function search($arr, $n, $x){ for ($i = 0; $i < $n; $i++) { if ($arr[$i] == $x) return $i; } return -1;} // Driver Code$arr = array(1, 10, 30, 15);$x = 30;$n = sizeof($arr);echo $x . " is present at index ". search($arr, $n, $x); // This code is contributed// by Akanksha RaiJavascript<script>// javascript implementation of the approach // Linearly search x in arr. If x is present then // return the index, otherwise return -1 function search(arr , n , x) { var i; for (i = 0; i < n; i++) { if (arr[i] == x) { return i; } } return -1; } /* Driver program to test above functions */ var arr = [ 1, 10, 30, 15 ]; var x = 30; var n = arr.length; document.write(x+" is present at index "+ search(arr, n, x)); // This code is contributed by gauravrajput1</script>Output: 30 is present at index 2Worst Case Analysis (Usually Done) In the worst-case analysis, we calculate the upper bound on the running time of an algorithm. We must know the case that causes a maximum number of operations to be executed. For Linear Search, the worst case happens when the element to be searched (x in the above code) is not present in the array. When x is not present, the search() function compares it with all the elements of arr[] one by one. Therefore, the worst-case time complexity of linear search would be Θ(n).Average Case Analysis (Sometimes done) In average case analysis, we take all possible inputs and calculate computing time for all of the inputs. Sum all the calculated values and divide the sum by the total number of inputs. We must know (or predict) the distribution of cases. For the linear search problem, let us assume that all cases are uniformly distributed (including the case of x not being present in the array). So we sum all the cases and divide the sum by (n+1). Following is the value of average-case time complexity. Average Case Time = = = Θ(n) Best Case Analysis (Bogus) In the best case analysis, we calculate the lower bound on the running time of an algorithm. We must know the case that causes a minimum number of operations to be executed. In the linear search problem, the best case occurs when x is present at the first location. The number of operations in the best case is constant (not dependent on n). So time complexity in the best case would be Θ(1) Most of the times, we do worst-case analysis to analyze algorithms. In the worst analysis, we guarantee an upper bound on the running time of an algorithm which is good information. The average case analysis is not easy to do in most practical cases and it is rarely done. In the average case analysis, we must know (or predict) the mathematical distribution of all possible inputs. The Best Case analysis is bogus. Guaranteeing a lower bound on an algorithm doesn’t provide any information as in the worst case, an algorithm may take years to run.For some algorithms, all the cases are asymptotically the same, i.e., there are no worst and best cases. For example, Merge Sort. Merge Sort does Θ(nlogn) operations in all cases. Most of the other sorting algorithms have worst and best cases. For example, in the typical implementation of Quick Sort (where pivot is chosen as a corner element), the worst occurs when the input array is already sorted and the best occurs when the pivot elements always divide the array into two halves. For insertion sort, the worst case occurs when the array is reverse sorted and the best case occurs when the array is sorted in the same order as output. https://youtu.be/rlZpZ8es_6kNext – Analysis of Algorithms | Set 3 (Asymptotic Notations) References: MIT’s Video lecture 1 on Introduction to Algorithms. Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above. My Personal Notes arrow_drop_upSave LikeNext Analysis of Algorithms | Set 3 (Asymptotic Notations)Recommended ArticlesPage :Analysis of Algorithms | Set 1 (Asymptotic Analysis)03, Jan 12Analysis of Algorithms | Set 4 (Analysis of Loops)11, Feb 14Analysis of Algorithms | Big-O analysis28, Feb 18Analysis of Algorithm | Set 5 (Amortized Analysis Introduction)23, Sep 14Use cases of mouse programming in C/C++ | Set 229, Dec 20Don’t Forget The Edge Cases !25, Jan 18Use cases of mouse programming in C/C++29, Dec 20Analysis of Algorithms | Set 5 (Practice Problems)02, May 17Algorithms Sample Questions | Set 3 | Time Order Analysis27, May 19Analysis of Algorithms | Set 3 (Asymptotic Notations)26, Oct 13Asymptotic Analysis and comparison of sorting algorithms28, Dec 16Analysis of algorithms | little o and little omega notations14, Aug 17Analysis of Algorithms | Big - Θ (Big Theta) Notation11, Jul 21Analysis of Algorithms | Big - Ω (Big- Omega) Notation11, Jul 21Analysis of Algorithm | Set 4 (Solving Recurrences)13, Feb 14Difference between Posteriori and Priori analysis07, Aug 19What is algorithm and why analysis of it is important?12, Jan 21Prune-and-Search | A Complexity Analysis Overview19, Jul 21Find array elements that are greater than average15, Apr 18Average of Cubes of first N natural numbers16, Jun 20Practice Questions on Time Complexity Analysis12, Dec 17Analysis of different sorting techniques29, Jan 18Guidelines for asymptotic analysis27, May 21Complexity Analysis of Binary Search29, May 19Article Contributed By :GeeksforGeeksVote for difficultyCurrent difficulty : EasyEasy Normal Medium Hard ExpertImproved By :princiraj1992Akanksha_RaiAnkurChattopadhyayGauriShankarBadolaurvishmahajanGauravRajput1tanvibugdaniArticle Tags :AnalysisArticlesReport IssueWriting code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load CommentsWhat's NewComplete Interview PreparationView DetailsSystem Design-Live Classes for Working ProfessionalsView DetailsData Structures & Algorithms- Self Paced CourseView DetailsMost popular in AnalysisAnalysis of Algorithms | Big-O analysisDifference between Big Oh, Big Omega and Big ThetaUnderstanding Time Complexity with Simple ExamplesTime Complexity and Space ComplexityAnalysis of different sorting techniquesMost visited in ArticlesTree Traversals (Inorder, Preorder and Postorder)find command in Linux with examplesSQL | Join (Inner, Left, Right and Full Joins)How to write a Pseudo Code?Understanding "extern" keyword in C× 5th Floor, A-118,Sector-136, Noida, Uttar Pradesh - 201305 feedback@geeksforgeeks.orgCompanyAbout UsCareersPrivacy PolicyContact UsCopyright PolicyLearnAlgorithmsData StructuresLanguagesCS SubjectsVideo TutorialsWeb DevelopmentWeb TutorialsHTMLCSSJavaScriptBootstrapContributeWrite an ArticleWrite Interview ExperienceInternshipsVideos@geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It ! Start Your Coding Journey Now!Login Register