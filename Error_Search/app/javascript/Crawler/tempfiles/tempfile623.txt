Java.io.File Class in Java - GeeksforGeeksSkip to content TutorialsPractice DS & Algo.Must Do QuestionsDSA Topic-wiseDSA Company-wiseAlgorithmsAnalysis of AlgorithmsAsymptotic AnalysisWorst, Average and Best CasesAsymptotic NotationsLittle o and little omega notationsLower and Upper Bound TheoryAnalysis of LoopsSolving RecurrencesAmortized AnalysisWhat does 'Space Complexity' mean ?Pseudo-polynomial AlgorithmsPolynomial Time Approximation SchemeA Time Complexity QuestionSearching AlgorithmsSorting AlgorithmsGraph AlgorithmsPattern SearchingGeometric AlgorithmsMathematicalBitwise AlgorithmsRandomized AlgorithmsGreedy AlgorithmsDynamic ProgrammingDivide and ConquerBacktrackingBranch and BoundAll AlgorithmsData StructuresArraysLinked ListStackQueueBinary TreeBinary Search TreeHeapHashingGraphAdvanced Data StructureMatrixStringsAll Data StructuresInterview CornerCompany PreparationTop TopicsPractice Company QuestionsInterview ExperiencesExperienced InterviewsInternship InterviewsCompetititve ProgrammingDesign PatternsSystem Design TutorialMultiple Choice QuizzesLanguagesCC++JavaPythonC#JavaScriptjQuerySQLPHPScalaPerlGo LanguageHTMLCSSKotlinCS SubjectsMathematicsOperating SystemDBMSComputer NetworksComputer Organization and ArchitectureTheory of ComputationCompiler DesignDigital LogicSoftware EngineeringGATEGATE Computer Science NotesLast Minute NotesGATE CS Solved PapersGATE CS Original Papers and Official KeysGATE 2021 DatesGATE CS 2021 SyllabusImportant Topics for GATE CSWeb TechnologiesHTMLCSSJavaScriptAngularJSReactJSNodeJSBootstrapjQueryPHPSoftware DesignsSoftware Design PatternsSystem Design TutorialSchool LearningSchool ProgrammingMathematicsNumber SystemAlgebraTrigonometryStatisticsProbabilityGeometryMensurationCalculusMaths Notes (Class 8-12)Class 8 NotesClass 9 NotesClass 10 NotesClass 11 NotesClass 12 NotesNCERT SolutionsClass 8 Maths SolutionClass 9 Maths SolutionClass 10 Maths SolutionClass 11 Maths SolutionClass 12 Maths SolutionRD Sharma SolutionsClass 8 Maths SolutionClass 9 Maths SolutionClass 10 Maths SolutionClass 11 Maths SolutionClass 12 Maths SolutionPhysics Notes (Class 8-11)Class 8 NotesClass 9 NotesClass 10 NotesClass 11 NotesISRO CSISRO CS Solved PapersISRO CS Original Papers and Official KeysISRO CS Syllabus for Scientist/Engineer ExamUGC NET CSUGC NET CS Notes Paper IIUGC NET CS Notes Paper IIIUGC NET CS Solved PapersStudentCampus Ambassador ProgramSchool Ambassador ProgramProjectGeek of the MonthCampus Geek of the MonthPlacement CourseCompetititve ProgrammingTestimonialsGeek on the TopCareersInternshipJobsApply for JobsPost a JobCourses WriteCome write articles for us and get featuredPracticeLearn and code with the best industry expertsPremiumGet access to ad-free content, doubt assistance and more!JobsCome and find your dream job with usGeeks DigestQuizzesGeeks CampusGblog ArticlesIDECampus Mantri HomeSaved VideosCoursesGBlogPuzzlesWhat's New ? Change Language Data StructuresAlgorithmsInterview PreparationTopic-wise PracticeC++JavaPythonCompetitive ProgrammingMachine LearningWeb DevelopmentPuzzlesProject IdeasGFG School Related Articles ▲Related ArticlesBasicsJava Programming LanguageIntroduction to JavaSetting up the environment in JavaJava Basic SyntaxJava Hello World ProgramCommand Line Arguments in JavaHow JVM Works – JVM Architecture?Differences between JDK, JRE and JVMJava IdentifiersData types in JavaVariables in JavaComments in JavaOperators in JavaWays to read input from console in JavaFlow ControlDecision Making in Java (if, if-else, switch, break, continue, jump)Loops in JavaJava For loop with ExamplesFor-each loop in JavaJava while loop with ExamplesSwitch Statement in JavaContinue Statement in JavaBreak statement in JavaStringsStrings in JavaString class in Java | Set 1StringBuffer class in JavaStringBuilder Class in Java with ExamplesArraysArrays in JavaMultidimensional Arrays in JavaJagged Array in JavaArray Copy in JavaHow to convert an Array to String in Java?How to compare two arrays in Java?MethodsMethods in JavaParameter Passing Techniques in Java with ExamplesReturning Multiple values in JavaDifferent ways of Method Overloading in JavaScope of Variables In JavaConstructorsConstructors in JavaCopy Constructor in JavaConstructor Overloading in JavaConstructor Chaining In Java with ExamplesPrivate Constructors and Singleton Classes in JavaOOP ConceptsClasses and Objects in JavaInheritance in JavaEncapsulation in JavaPolymorphism in JavaAbstraction in JavaOverriding in JavaOverloading in JavaException HandlingExceptions in JavaTypes of Exception in Java with ExamplesChecked vs Unchecked Exceptions in Javathrow and throws in JavaUser-defined Custom Exception in JavaInterfaces & Abstract ClassesInterfaces in JavaNested Interface in JavaMarker interface in JavaAbstract Classes in JavaDifference between Abstract Class and Interface in JavaFunctional Interfaces in JavaComparator Interface in Java with ExamplesCollectionsCollections in JavaCollections Class in JavaCollection vs Collections in Java with ExampleJava | Implementing Iterator and Iterable InterfaceList Interface in Java with ExamplesArrayList in JavaVector Class in JavaStack Class in JavaLinkedList in JavaQueue Interface In JavaPriorityQueue in JavaDeque interface in Java with ExampleArrayDeque in JavaSet in JavaHashSet in JavaLinkedHashSet in Java with ExamplesSortedSet Interface in Java with ExamplesNavigableSet in Java with ExamplesTreeSet in JavaMap Interface in JavaHashMap in Java with ExamplesHashtable in JavaLinkedHashMap in JavaSortedMap Interface in Java with ExamplesTreeMap in JavaMultithreadingMultithreading in JavaLifecycle and States of a Thread in JavaMain thread in JavaJava Thread Priority in MultithreadingSynchronization in JavaFile HandlingFile Handling in Java with CRUD operationsJava.io.InputStream Class in JavaJava.io.OutputStream class in JavaJava.io.File Class in JavaFile Permissions in JavaCopying file using FileStreams in JavaDelete a file using JavaTable of ContentsBasicsJava Programming LanguageIntroduction to JavaSetting up the environment in JavaJava Basic SyntaxJava Hello World ProgramCommand Line Arguments in JavaHow JVM Works – JVM Architecture?Differences between JDK, JRE and JVMJava IdentifiersData types in JavaVariables in JavaComments in JavaOperators in JavaWays to read input from console in JavaFlow ControlDecision Making in Java (if, if-else, switch, break, continue, jump)Loops in JavaJava For loop with ExamplesFor-each loop in JavaJava while loop with ExamplesSwitch Statement in JavaContinue Statement in JavaBreak statement in JavaStringsStrings in JavaString class in Java | Set 1StringBuffer class in JavaStringBuilder Class in Java with ExamplesArraysArrays in JavaMultidimensional Arrays in JavaJagged Array in JavaArray Copy in JavaHow to convert an Array to String in Java?How to compare two arrays in Java?MethodsMethods in JavaParameter Passing Techniques in Java with ExamplesReturning Multiple values in JavaDifferent ways of Method Overloading in JavaScope of Variables In JavaConstructorsConstructors in JavaCopy Constructor in JavaConstructor Overloading in JavaConstructor Chaining In Java with ExamplesPrivate Constructors and Singleton Classes in JavaOOP ConceptsClasses and Objects in JavaInheritance in JavaEncapsulation in JavaPolymorphism in JavaAbstraction in JavaOverriding in JavaOverloading in JavaException HandlingExceptions in JavaTypes of Exception in Java with ExamplesChecked vs Unchecked Exceptions in Javathrow and throws in JavaUser-defined Custom Exception in JavaInterfaces & Abstract ClassesInterfaces in JavaNested Interface in JavaMarker interface in JavaAbstract Classes in JavaDifference between Abstract Class and Interface in JavaFunctional Interfaces in JavaComparator Interface in Java with ExamplesCollectionsCollections in JavaCollections Class in JavaCollection vs Collections in Java with ExampleJava | Implementing Iterator and Iterable InterfaceList Interface in Java with ExamplesArrayList in JavaVector Class in JavaStack Class in JavaLinkedList in JavaQueue Interface In JavaPriorityQueue in JavaDeque interface in Java with ExampleArrayDeque in JavaSet in JavaHashSet in JavaLinkedHashSet in Java with ExamplesSortedSet Interface in Java with ExamplesNavigableSet in Java with ExamplesTreeSet in JavaMap Interface in JavaHashMap in Java with ExamplesHashtable in JavaLinkedHashMap in JavaSortedMap Interface in Java with ExamplesTreeMap in JavaMultithreadingMultithreading in JavaLifecycle and States of a Thread in JavaMain thread in JavaJava Thread Priority in MultithreadingSynchronization in JavaFile HandlingFile Handling in Java with CRUD operationsJava.io.InputStream Class in JavaJava.io.OutputStream class in JavaJava.io.File Class in JavaFile Permissions in JavaCopying file using FileStreams in JavaDelete a file using JavaImprove Article Save Article Like Article Java.io.File Class in JavaDifficulty Level : MediumLast Updated : 23 Jan, 2022The File class is Java’s representation of a file or directory pathname. Because file and directory names have different formats on different platforms, a simple string is not adequate to name them. The File class contains several methods for working with the pathname, deleting and renaming files, creating new directories, listing the contents of a directory, and determining several common attributes of files and directories. It is an abstract representation of files and directory pathnames.A pathname, whether abstract or in string form can be either absolute or relative. The parent of an abstract pathname may be obtained by invoking the getParent() method of this class.First of all, we should create the File class object by passing the filename or directory name to it. A file system may implement restrictions to certain operations on the actual file-system object, such as reading, writing, and executing. These restrictions are collectively known as access permissions.Instances of the File class are immutable; that is, once created, the abstract pathname represented by a File object will never change.How to create a File Object? A File object is created by passing in a string that represents the name of a file, a String, or another File object. For example, File a = new File("/usr/local/bin/geeks");This defines an abstract file name for the geeks file in the directory /usr/local/bin. This is an absolute abstract file name.Constructors of File ClassFile(File parent, String child): Creates a new File instance from a parent abstract pathname and a child pathname string.File(String pathname): Creates a new File instance by converting the given pathname string into an abstract pathname.File(String parent, String child): Creates a new File instance from a parent pathname string and a child pathname string.File(URI uri): Creates a new File instance by converting the given file: URI into an abstract pathname.Methods of File ClassS. No.MethodDescriptionReturn Type1.canExecute()Tests whether the application can execute the file denoted by this abstract pathname.boolean2.canRead()Tests whether the application can read the file denoted by this abstract pathname.boolean3.canWrite()Tests whether the application can modify the file denoted by this abstract pathname.boolean4.compareTo(File pathname)Compares two abstract pathnames lexicographically.int5.createNewFile()Atomically creates a new, empty file named by this abstract pathname.boolean6.createTempFile(String prefix, String suffix)Creates an empty file in the default temporary-file directory.File7.delete()Deletes the file or directory denoted by this abstract pathname.boolean8.equals(Object obj)Tests this abstract pathname for equality with the given object.boolean9.exists()Tests whether the file or directory denoted by this abstract pathname exists.boolean10.getAbsolutePath() Returns the absolute pathname string of this abstract pathname.String11.list()Returns an array of strings naming the files and directories in the directory.String[]12.getFreeSpace()Returns the number of unallocated bytes in the partition.long13.getName()Returns the name of the file or directory denoted by this abstract pathname.String14.getParent()Returns the pathname string of this abstract pathname’s parent.String15.getParentFile()Returns the abstract pathname of this abstract pathname’s parent.File16.getPath()Converts this abstract pathname into a pathname string.String17.setReadOnly()Marks the file or directory named so that only read operations are allowed.boolean18.isDirectory()Tests whether the file denoted by this pathname is a directory.boolean19.isFile()Tests whether the file denoted by this abstract pathname is a normal file.boolean20.isHidden()Tests whether the file named by this abstract pathname is a hidden file.boolean21.length()Returns the length of the file denoted by this abstract pathname.long22.listFiles()Returns an array of abstract pathnames denoting the files in the directory.File[]23.mkdir()Creates the directory named by this abstract pathname.boolean24.renameTo(File dest)Renames the file denoted by this abstract pathname.boolean25.setExecutable(boolean executable)A convenience method to set the owner’s execute permission.boolean26.setReadable(boolean readable)A convenience method to set the owner’s read permission.boolean27.setReadable(boolean readable, boolean ownerOnly)Sets the owner’s or everybody’s read permission.boolean28.setWritable(boolean writable)A convenience method to set the owner’s write permission.boolean29.toString()Returns the pathname string of this abstract pathname.String30.toURI()Constructs a file URI that represents this abstract pathname.URIExample 1: Program to check if a file or directory physically exists or not.Java// In this Java program, we accepts a file or directory name from// command line arguments. Then the program will check if// that file or directory physically exist or not and// it displays the property of that file or directory. import java.io.File; // Displaying file propertyclass fileProperty { public static void main(String[] args) { // accept file name or directory name through // command line args String fname = args[0]; // pass the filename or directory name to File // object File f = new File(fname); // apply File class methods on File object System.out.println("File name :" + f.getName()); System.out.println("Path: " + f.getPath()); System.out.println("Absolute path:" + f.getAbsolutePath()); System.out.println("Parent:" + f.getParent()); System.out.println("Exists :" + f.exists()); if (f.exists()) { System.out.println("Is writable:" + f.canWrite()); System.out.println("Is readable" + f.canRead()); System.out.println("Is a directory:" + f.isDirectory()); System.out.println("File Size in bytes " + f.length()); } }}Output:File name :file.txt Path: file.txt Absolute path:C:\Users\akki\IdeaProjects\codewriting\src\file.txt Parent:null Exists :true Is writable:true Is readabletrue Is a directory:false File Size in bytes 20Example 2: Program to display all the contents of a directoryHere we will accept a directory name from the keyboard and then display all the contents of the directory. For this purpose, list() method can be used as: String arr[]=f.list();In the preceding statement, the list() method causes all the directory entries copied into the array arr[]. Then pass these array elements arr[i] to the File object and test them to know if they represent a file or directory.Java// Java Program to display all // the contents of a directoryimport java.io.BufferedReader;import java.io.File;import java.io.IOException;import java.io.InputStreamReader; // Displaying the contents of a directoryclass Contents { public static void main(String[] args) throws IOException { // enter the path and dirname from keyboard BufferedReader br = new BufferedReader( new InputStreamReader(System.in)); System.out.println("Enter dirpath:"); String dirpath = br.readLine(); System.out.println("Enter the dirname"); String dname = br.readLine(); // create File object with dirpath and dname File f = new File(dirpath, dname); // if directory exists,then if (f.exists()) { // get the contents into arr[] // now arr[i] represent either a File or // Directory String arr[] = f.list(); // find no. of entries in the directory int n = arr.length; // displaying the entries for (int i = 0; i < n; i++) { System.out.println(arr[i]); // create File object with the entry and // test if it is a file or directory File f1 = new File(arr[i]); if (f1.isFile()) System.out.println(": is a file"); if (f1.isDirectory()) System.out.println(": is a directory"); } System.out.println( "No of entries in this directory " + n); } else System.out.println("Directory not found"); }}Output: Enter dirpath: C:\Users\akki\IdeaProjects\ Enter the dirname codewriting .idea : is a directory an1.txt : is a file codewriting.iml : is a file file.txt : is a file out : is a directory src : is a directory text : is a file No of entries in this directory 7Related Post: FileReader and FileWriter in JavaThis article is contributed by Nishant Sharma. If you like GeeksforGeeks and would like to contribute, you can also write an article using write.geeksforgeeks.org or mail your article to review-team@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks. Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.My Personal Notes arrow_drop_upSave LikePreviousJava.io.OutputStream class in JavaNext File Permissions in JavaRecommended ArticlesPage :Java.lang.Class class in Java | Set 130, Mar 17Java.lang.Class class in Java | Set 203, Apr 17Implement Pair Class with Unit Class in Java using JavaTuples20, Sep 18Implement Triplet Class with Pair Class in Java using JavaTuples20, Sep 18Implement Quintet Class with Quartet Class in Java using JavaTuples20, Sep 18Implement Quartet Class with Triplet Class in Java using JavaTuples20, Sep 18Implement Octet Class from Septet Class in Java using JavaTuples24, Sep 18Implement Ennead Class from Octet Class in Java using JavaTuples24, Sep 18Implement Sextet Class from Quintet Class in Java using JavaTuples24, Sep 18Implement Septet Class from Sextet Class in Java using JavaTuples24, Sep 18Implement Decade Class from Ennead Class in Java using JavaTuples24, Sep 18Difference between Abstract Class and Concrete Class in Java11, Jan 19In Java, Can we call the main() method of a class from another class?28, Nov 19Java Program to Check if a Given Class is a Local Inner Class16, Nov 20Java Program to Check if a Given Class is an Anonymous Class16, Nov 20Java Program to Check if a Given Class is an Inner Class14, Dec 20Using predefined class name as Class or Variable name in Java26, May 17Java.util.TimeZone Class (Set-2) | Example On TimeZone Class25, Apr 18Java Program to Illustrate the Availability of Default Constructor of the Super Class to the Sub Class by Default05, Dec 20Does JVM create object of Main class (the class with main())?06, Apr 16Inner Class And Anonymous Inner Class that Implements Runnable | Concurrent Programming Approach 308, Apr 19Java.util.BitSet class methods in Java with Examples | Set 218, Nov 16Java.Lang.Float class in Java27, Mar 17Java.io.BufferedInputStream class in Java20, Jan 17Article Contributed By :GeeksforGeeksVote for difficultyCurrent difficulty : MediumEasy Normal Medium Hard ExpertImproved By :sagar0719kumarArticle Tags :java-file-handlingJava-I/OJavaSchool ProgrammingPractice Tags :JavaReport IssueWriting code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load CommentsWhat's NewJava Backend Development- LIVE ClassesView DetailsComplete Interview PreparationView DetailsSystem Design-Live Classes for Working ProfessionalsView DetailsMost popular in JavaObject Oriented Programming (OOPs) Concept in JavaSplit() String method in Java with examplesReverse a string in JavaArrays.sort() in Java with examplesHow to iterate any Map in JavaMost visited in School ProgrammingPython DictionaryArrays in C/C++Reverse a string in JavaC++ Data TypesInheritance in C++× 5th Floor, A-118,Sector-136, Noida, Uttar Pradesh - 201305 feedback@geeksforgeeks.orgCompanyAbout UsCareersPrivacy PolicyContact UsCopyright PolicyLearnAlgorithmsData StructuresLanguagesCS SubjectsVideo TutorialsWeb DevelopmentWeb TutorialsHTMLCSSJavaScriptBootstrapContributeWrite an ArticleWrite Interview ExperienceInternshipsVideos@geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It ! Start Your Coding Journey Now!Login Register