How JVM Works - JVM Architecture? - GeeksforGeeksSkip to content TutorialsPractice DS & Algo.Must Do QuestionsDSA Topic-wiseDSA Company-wiseAlgorithmsAnalysis of AlgorithmsAsymptotic AnalysisWorst, Average and Best CasesAsymptotic NotationsLittle o and little omega notationsLower and Upper Bound TheoryAnalysis of LoopsSolving RecurrencesAmortized AnalysisWhat does 'Space Complexity' mean ?Pseudo-polynomial AlgorithmsPolynomial Time Approximation SchemeA Time Complexity QuestionSearching AlgorithmsSorting AlgorithmsGraph AlgorithmsPattern SearchingGeometric AlgorithmsMathematicalBitwise AlgorithmsRandomized AlgorithmsGreedy AlgorithmsDynamic ProgrammingDivide and ConquerBacktrackingBranch and BoundAll AlgorithmsData StructuresArraysLinked ListStackQueueBinary TreeBinary Search TreeHeapHashingGraphAdvanced Data StructureMatrixStringsAll Data StructuresInterview CornerCompany PreparationTop TopicsPractice Company QuestionsInterview ExperiencesExperienced InterviewsInternship InterviewsCompetititve ProgrammingDesign PatternsSystem Design TutorialMultiple Choice QuizzesLanguagesCC++JavaPythonC#JavaScriptjQuerySQLPHPScalaPerlGo LanguageHTMLCSSKotlinCS SubjectsMathematicsOperating SystemDBMSComputer NetworksComputer Organization and ArchitectureTheory of ComputationCompiler DesignDigital LogicSoftware EngineeringGATEGATE Computer Science NotesLast Minute NotesGATE CS Solved PapersGATE CS Original Papers and Official KeysGATE 2021 DatesGATE CS 2021 SyllabusImportant Topics for GATE CSWeb TechnologiesHTMLCSSJavaScriptAngularJSReactJSNodeJSBootstrapjQueryPHPSoftware DesignsSoftware Design PatternsSystem Design TutorialSchool LearningSchool ProgrammingMathematicsNumber SystemAlgebraTrigonometryStatisticsProbabilityGeometryMensurationCalculusMaths Notes (Class 8-12)Class 8 NotesClass 9 NotesClass 10 NotesClass 11 NotesClass 12 NotesNCERT SolutionsClass 8 Maths SolutionClass 9 Maths SolutionClass 10 Maths SolutionClass 11 Maths SolutionClass 12 Maths SolutionRD Sharma SolutionsClass 8 Maths SolutionClass 9 Maths SolutionClass 10 Maths SolutionClass 11 Maths SolutionClass 12 Maths SolutionPhysics Notes (Class 8-11)Class 8 NotesClass 9 NotesClass 10 NotesClass 11 NotesISRO CSISRO CS Solved PapersISRO CS Original Papers and Official KeysISRO CS Syllabus for Scientist/Engineer ExamUGC NET CSUGC NET CS Notes Paper IIUGC NET CS Notes Paper IIIUGC NET CS Solved PapersStudentCampus Ambassador ProgramSchool Ambassador ProgramProjectGeek of the MonthCampus Geek of the MonthPlacement CourseCompetititve ProgrammingTestimonialsGeek on the TopCareersInternshipJobsApply for JobsPost a JobCourses WriteCome write articles for us and get featuredPracticeLearn and code with the best industry expertsPremiumGet access to ad-free content, doubt assistance and more!JobsCome and find your dream job with usGeeks DigestQuizzesGeeks CampusGblog ArticlesIDECampus Mantri HomeSaved VideosCoursesGBlogPuzzlesWhat's New ? Change Language Data StructuresAlgorithmsInterview PreparationTopic-wise PracticeC++JavaPythonCompetitive ProgrammingMachine LearningWeb DevelopmentPuzzlesProject IdeasGFG School Related Articles ▲Related ArticlesBasics of JavaJava TutorialIntroduction to JavaSimilarities and Difference between Java and C++Setting up the environment in JavaJava Basic SyntaxJava Hello World ProgramDifferences between JDK, JRE and JVMHow JVM Works – JVM Architecture?Java IdentifiersVariables & DataTypes in JavaVariables in JavaScope of Variables In JavaData types in JavaOperators in JavaOperators in JavaJava Arithmetic Operators with ExamplesJava Assignment Operators with ExamplesJava Unary Operator with ExamplesJava Relational Operators with ExamplesJava Logical Operators with ExamplesJava Ternary Operator with ExamplesBitwise Operators in JavaPackages in JavaPackages In JavaFlow Control in JavaDecision Making in Java (if, if-else, switch, break, continue, jump)Java if statement with ExamplesJava if-else statement with ExamplesJava if-else-if ladder with ExamplesLoops in JavaLoops in JavaJava For loop with ExamplesJava while loop with ExamplesJava do-while loop with ExamplesFor-each loop in JavaJump Statements in JavaContinue Statement in JavaBreak statement in Javareturn keyword in JavaArrays in JavaArrays in JavaMultidimensional Arrays in JavaJagged Array in JavaStrings in JavaStrings in JavaString class in Java | Set 1StringBuffer class in JavaStringBuilder Class in Java with ExamplesOOPS in JavaObject Oriented Programming (OOPs) Concept in JavaClasses and Objects in JavaMethods in JavaAccess Modifiers in JavaWrapper Classes in JavaNeed of Wrapper Classes in JavaConstructors in JavaConstructors in JavaCopy Constructor in JavaConstructor Chaining In Java with ExamplesPrivate Constructors and Singleton Classes in JavaInheritance & Polymorphism in JavaInheritance in JavaJava and Multiple InheritanceComparison of Inheritance in C++ and JavaPolymorphism in JavaDynamic Method Dispatch or Runtime Polymorphism in JavaMethod overloading & OveridingOverloading in JavaDifferent ways of Method Overloading in JavaOverriding in JavaDifference Between Method Overloading and Method Overriding in JavaAbstraction & EncapsulationAbstraction in JavaAbstract Classes in JavaDifference between Abstract Class and Interface in JavaEncapsulation in JavaInterfaces in JavaInterfaces in JavaNested Interface in JavaMarker interface in JavaFunctional Interfaces in JavaComparator Interface in Java with ExamplesKeywords in JavaList of all Java KeywordsSuper Keyword in Javafinal Keyword in Javaabstract keyword in javastatic Keyword in Java‘this’ reference in Javaenum in JavaException Handling in JavaExceptions in JavaTypes of Exception in Java with ExamplesChecked vs Unchecked Exceptions in JavaTry, catch, throw and throws in JavaFlow control in try catch finally in Javathrow and throws in JavaUser-defined Custom Exception in JavaCollection FrameworkCollections in JavaCollections Class in JavaList Interface in Java with ExamplesArrayList in JavaVector Class in JavaStack Class in JavaLinkedList in JavaQueue Interface In JavaPriorityQueue in JavaDeque interface in Java with ExampleArrayDeque in JavaSet in JavaHashSet in JavaLinkedHashSet in Java with ExamplesSortedSet Interface in Java with ExamplesNavigableSet in Java with ExamplesTreeSet in JavaMap Interface in JavaHashMap in Java with ExamplesHashtable in JavaLinkedHashMap in JavaSortedMap Interface in Java with ExamplesTreeMap in JavaMulti-threading in JavaMultithreading in JavaLifecycle and States of a Thread in JavaMain thread in JavaJava Thread Priority in MultithreadingThread Pools in JavaSynchronization in JavaMethod and Block Synchronization in JavaImportance of Thread Synchronization in JavaThread Safety and how to achieve it in JavaTable of ContentsBasics of JavaJava TutorialIntroduction to JavaSimilarities and Difference between Java and C++Setting up the environment in JavaJava Basic SyntaxJava Hello World ProgramDifferences between JDK, JRE and JVMHow JVM Works – JVM Architecture?Java IdentifiersVariables & DataTypes in JavaVariables in JavaScope of Variables In JavaData types in JavaOperators in JavaOperators in JavaJava Arithmetic Operators with ExamplesJava Assignment Operators with ExamplesJava Unary Operator with ExamplesJava Relational Operators with ExamplesJava Logical Operators with ExamplesJava Ternary Operator with ExamplesBitwise Operators in JavaPackages in JavaPackages In JavaFlow Control in JavaDecision Making in Java (if, if-else, switch, break, continue, jump)Java if statement with ExamplesJava if-else statement with ExamplesJava if-else-if ladder with ExamplesLoops in JavaLoops in JavaJava For loop with ExamplesJava while loop with ExamplesJava do-while loop with ExamplesFor-each loop in JavaJump Statements in JavaContinue Statement in JavaBreak statement in Javareturn keyword in JavaArrays in JavaArrays in JavaMultidimensional Arrays in JavaJagged Array in JavaStrings in JavaStrings in JavaString class in Java | Set 1StringBuffer class in JavaStringBuilder Class in Java with ExamplesOOPS in JavaObject Oriented Programming (OOPs) Concept in JavaClasses and Objects in JavaMethods in JavaAccess Modifiers in JavaWrapper Classes in JavaNeed of Wrapper Classes in JavaConstructors in JavaConstructors in JavaCopy Constructor in JavaConstructor Chaining In Java with ExamplesPrivate Constructors and Singleton Classes in JavaInheritance & Polymorphism in JavaInheritance in JavaJava and Multiple InheritanceComparison of Inheritance in C++ and JavaPolymorphism in JavaDynamic Method Dispatch or Runtime Polymorphism in JavaMethod overloading & OveridingOverloading in JavaDifferent ways of Method Overloading in JavaOverriding in JavaDifference Between Method Overloading and Method Overriding in JavaAbstraction & EncapsulationAbstraction in JavaAbstract Classes in JavaDifference between Abstract Class and Interface in JavaEncapsulation in JavaInterfaces in JavaInterfaces in JavaNested Interface in JavaMarker interface in JavaFunctional Interfaces in JavaComparator Interface in Java with ExamplesKeywords in JavaList of all Java KeywordsSuper Keyword in Javafinal Keyword in Javaabstract keyword in javastatic Keyword in Java‘this’ reference in Javaenum in JavaException Handling in JavaExceptions in JavaTypes of Exception in Java with ExamplesChecked vs Unchecked Exceptions in JavaTry, catch, throw and throws in JavaFlow control in try catch finally in Javathrow and throws in JavaUser-defined Custom Exception in JavaCollection FrameworkCollections in JavaCollections Class in JavaList Interface in Java with ExamplesArrayList in JavaVector Class in JavaStack Class in JavaLinkedList in JavaQueue Interface In JavaPriorityQueue in JavaDeque interface in Java with ExampleArrayDeque in JavaSet in JavaHashSet in JavaLinkedHashSet in Java with ExamplesSortedSet Interface in Java with ExamplesNavigableSet in Java with ExamplesTreeSet in JavaMap Interface in JavaHashMap in Java with ExamplesHashtable in JavaLinkedHashMap in JavaSortedMap Interface in Java with ExamplesTreeMap in JavaMulti-threading in JavaMultithreading in JavaLifecycle and States of a Thread in JavaMain thread in JavaJava Thread Priority in MultithreadingThread Pools in JavaSynchronization in JavaMethod and Block Synchronization in JavaImportance of Thread Synchronization in JavaThread Safety and how to achieve it in JavaImprove Article Save Article Like Article How JVM Works – JVM Architecture?Difficulty Level : MediumLast Updated : 15 May, 2021JVM(Java Virtual Machine) acts as a run-time engine to run Java applications. JVM is the one that actually calls the main method present in a java code. JVM is a part of JRE(Java Runtime Environment).Java applications are called WORA (Write Once Run Anywhere). This means a programmer can develop Java code on one system and can expect it to run on any other Java-enabled system without any adjustment. This is all possible because of JVM.When we compile a .java file, .class files(contains byte-code) with the same class names present in .java file are generated by the Java compiler. This .class file goes into various steps when we run it. These steps together describe the whole JVM. Class Loader SubsystemIt is mainly responsible for three activities. LoadingLinkingInitializationLoading: The Class loader reads the “.class” file, generate the corresponding binary data and save it in the method area. For each “.class” file, JVM stores the following information in the method area. The fully qualified name of the loaded class and its immediate parent class.Whether the “.class” file is related to Class or Interface or Enum.Modifier, Variables and Method information etc.After loading the “.class” file, JVM creates an object of type Class to represent this file in the heap memory. Please note that this object is of type Class predefined in java.lang package. These Class object can be used by the programmer for getting class level information like the name of the class, parent name, methods and variable information etc. To get this object reference we can use getClass() method of Object class.Java// A Java program to demonstrate working// of a Class type object created by JVM// to represent .class file in memory.import java.lang.reflect.Field;import java.lang.reflect.Method; // Java code to demonstrate use// of Class object created by JVMpublic class Test { public static void main(String[] args) { Student s1 = new Student(); // Getting hold of Class // object created by JVM. Class c1 = s1.getClass(); // Printing type of object using c1. System.out.println(c1.getName()); // getting all methods in an array Method m[] = c1.getDeclaredMethods(); for (Method method : m) System.out.println(method.getName()); // getting all fields in an array Field f[] = c1.getDeclaredFields(); for (Field field : f) System.out.println(field.getName()); }} // A sample class whose information// is fetched above using its Class object.class Student { private String name; private int roll_No; public String getName() { return name; } public void setName(String name) { this.name = name; } public int getRoll_no() { return roll_No; } public void setRoll_no(int roll_no) { this.roll_No = roll_no; }}OutputStudent getName setName getRoll_no setRoll_no name roll_No Note: For every loaded “.class” file, only one object of the class is created. Student s2 = new Student(); // c2 will point to same object where // c1 is pointing Class c2 = s2.getClass(); System.out.println(c1==c2); // trueLinking: Performs verification, preparation, and (optionally) resolution. Verification: It ensures the correctness of the .class file i.e. it checks whether this file is properly formatted and generated by a valid compiler or not. If verification fails, we get run-time exception java.lang.VerifyError. This activity is done by the component ByteCodeVerifier. Once this activity is completed then the class file is ready for compilation.Preparation: JVM allocates memory for class variables and initializing the memory to default values.Resolution: It is the process of replacing symbolic references from the type with direct references. It is done by searching into the method area to locate the referenced entity.Initialization: In this phase, all static variables are assigned with their values defined in the code and static block(if any). This is executed from top to bottom in a class and from parent to child in the class hierarchy. In general, there are three class loaders : Bootstrap class loader: Every JVM implementation must have a bootstrap class loader, capable of loading trusted classes. It loads core java API classes present in the “JAVA_HOME/jre/lib” directory. This path is popularly known as the bootstrap path. It is implemented in native languages like C, C++.Extension class loader: It is a child of the bootstrap class loader. It loads the classes present in the extensions directories “JAVA_HOME/jre/lib/ext”(Extension path) or any other directory specified by the java.ext.dirs system property. It is implemented in java by the sun.misc.Launcher$ExtClassLoader class.System/Application class loader: It is a child of the extension class loader. It is responsible to load classes from the application classpath. It internally uses Environment Variable which mapped to java.class.path. It is also implemented in Java by the sun.misc.Launcher$AppClassLoader class.Java// Java code to demonstrate Class Loader subsystempublic class Test { public static void main(String[] args) { // String class is loaded by bootstrap loader, and // bootstrap loader is not Java object, hence null System.out.println(String.class.getClassLoader()); // Test class is loaded by Application loader System.out.println(Test.class.getClassLoader()); }}Outputnull jdk.internal.loader.ClassLoaders$AppClassLoader@8bcc55f Note: JVM follows the Delegation-Hierarchy principle to load classes. System class loader delegate load request to extension class loader and extension class loader delegate request to the bootstrap class loader. If a class found in the boot-strap path, the class is loaded otherwise request again transfers to the extension class loader and then to the system class loader. At last, if the system class loader fails to load class, then we get run-time exception java.lang.ClassNotFoundException. JVM Memory Method area: In the method area, all class level information like class name, immediate parent class name, methods and variables information etc. are stored, including static variables. There is only one method area per JVM, and it is a shared resource.Heap area: Information of all objects is stored in the heap area. There is also one Heap Area per JVM. It is also a shared resource.Stack area: For every thread, JVM creates one run-time stack which is stored here. Every block of this stack is called activation record/stack frame which stores methods calls. All local variables of that method are stored in their corresponding frame. After a thread terminates, its run-time stack will be destroyed by JVM. It is not a shared resource.PC Registers: Store address of current execution instruction of a thread. Obviously, each thread has separate PC Registers.Native method stacks: For every thread, a separate native stack is created. It stores native method information. Execution Engine Execution engine executes the “.class” (bytecode). It reads the byte-code line by line, uses data and information present in various memory area and executes instructions. It can be classified into three parts:Interpreter: It interprets the bytecode line by line and then executes. The disadvantage here is that when one method is called multiple times, every time interpretation is required.Just-In-Time Compiler(JIT) : It is used to increase the efficiency of an interpreter. It compiles the entire bytecode and changes it to native code so whenever the interpreter sees repeated method calls, JIT provides direct native code for that part so re-interpretation is not required, thus efficiency is improved.Garbage Collector: It destroys un-referenced objects. For more on Garbage Collector, refer Garbage Collector.Java Native Interface (JNI) : It is an interface that interacts with the Native Method Libraries and provides the native libraries(C, C++) required for the execution. It enables JVM to call C/C++ libraries and to be called by C/C++ libraries which may be specific to hardware.Native Method Libraries : It is a collection of the Native Libraries(C, C++) which are required by the Execution Engine. This article is contributed by Gaurav Miglani. If you like GeeksforGeeks and would like to contribute, you can also write an article using write.geeksforgeeks.org or mail your article to contribute@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.My Personal Notes arrow_drop_upSave LikePreviousDifferences between JDK, JRE and JVMNext Java IdentifiersRecommended ArticlesPage :Does JVM create object of Main class (the class with main())?06, Apr 16Differences between JDK, JRE and JVM29, Jul 17Verification in Java (JVM)06, Dec 17Java Virtual Machine (JVM) Stack Area01, Feb 18How many types of memory areas are allocated by JVM?28, Jun 19Types of JVM Garbage Collectors in Java with implementation details22, Jan 20How to Generate JVM Heap Memory Dump?15, Jul 21Difference Between JVM and DVM27, Dec 20Difference between JIT and JVM in Java08, Feb 21Frequently Used JVM Parameters11, Feb 21Java Program to Check if JVM is 32 or 64 bit08, Mar 21Difference Between 32-bit and 64-bit JVM in Java25, May 21JVM Shutdown Hook in Java03, May 17How compare() method works in Java26, Oct 18How HashTable Works Internally in Java?03, Jan 21How Java filter() Method Works in Background?15, Apr 21Spring Boot - How Thymeleaf Works?10, Jan 22Hibernate Architecture02, Aug 18Java Architecture for XML Binding ( JAXB ) | Set-102, Aug 18Monolithic vs Microservices architecture24, Mar 20Hexagonal Architecture in Java09, May 20Servlet Architecture31, Dec 20MVC (Model View Controller) Architecture Pattern in Android with Example26, Oct 20MVP (Model View Presenter) Architecture Pattern in Android with Example28, Oct 20Article Contributed By :GeeksforGeeksVote for difficultyCurrent difficulty : MediumEasy Normal Medium Hard ExpertImproved By :Akanksha_Raisambitdas1996LiJuliusvikramboyaArticle Tags :java-basicsjava-JVMJavaSchool ProgrammingPractice Tags :JavaReport IssueWriting code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load CommentsWhat's NewJava Backend Development- LIVE ClassesView DetailsJava FoundationView DetailsComplete Interview PreparationView DetailsMost popular in JavaSplit() String method in Java with examplesReverse a string in JavaArrays.sort() in Java with examplesHow to iterate any Map in JavaSingleton Class in JavaMost visited in School ProgrammingPython DictionaryArrays in C/C++C++ Data TypesReverse a string in JavaInheritance in C++× 5th Floor, A-118,Sector-136, Noida, Uttar Pradesh - 201305 feedback@geeksforgeeks.orgCompanyAbout UsCareersPrivacy PolicyContact UsCopyright PolicyLearnAlgorithmsData StructuresLanguagesCS SubjectsVideo TutorialsWeb DevelopmentWeb TutorialsHTMLCSSJavaScriptBootstrapContributeWrite an ArticleWrite Interview ExperienceInternshipsVideos@geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It ! Start Your Coding Journey Now!Login Register