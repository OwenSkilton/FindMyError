How to run Java RMI Application - GeeksforGeeksSkip to content TutorialsPractice DS & Algo.Must Do QuestionsDSA Topic-wiseDSA Company-wiseAlgorithmsAnalysis of AlgorithmsAsymptotic AnalysisWorst, Average and Best CasesAsymptotic NotationsLittle o and little omega notationsLower and Upper Bound TheoryAnalysis of LoopsSolving RecurrencesAmortized AnalysisWhat does 'Space Complexity' mean ?Pseudo-polynomial AlgorithmsPolynomial Time Approximation SchemeA Time Complexity QuestionSearching AlgorithmsSorting AlgorithmsGraph AlgorithmsPattern SearchingGeometric AlgorithmsMathematicalBitwise AlgorithmsRandomized AlgorithmsGreedy AlgorithmsDynamic ProgrammingDivide and ConquerBacktrackingBranch and BoundAll AlgorithmsData StructuresArraysLinked ListStackQueueBinary TreeBinary Search TreeHeapHashingGraphAdvanced Data StructureMatrixStringsAll Data StructuresInterview CornerCompany PreparationTop TopicsPractice Company QuestionsInterview ExperiencesExperienced InterviewsInternship InterviewsCompetititve ProgrammingDesign PatternsSystem Design TutorialMultiple Choice QuizzesLanguagesCC++JavaPythonC#JavaScriptjQuerySQLPHPScalaPerlGo LanguageHTMLCSSKotlinCS SubjectsMathematicsOperating SystemDBMSComputer NetworksComputer Organization and ArchitectureTheory of ComputationCompiler DesignDigital LogicSoftware EngineeringGATEGATE Computer Science NotesLast Minute NotesGATE CS Solved PapersGATE CS Original Papers and Official KeysGATE 2021 DatesGATE CS 2021 SyllabusImportant Topics for GATE CSWeb TechnologiesHTMLCSSJavaScriptAngularJSReactJSNodeJSBootstrapjQueryPHPSoftware DesignsSoftware Design PatternsSystem Design TutorialSchool LearningSchool ProgrammingMathematicsNumber SystemAlgebraTrigonometryStatisticsProbabilityGeometryMensurationCalculusMaths Notes (Class 8-12)Class 8 NotesClass 9 NotesClass 10 NotesClass 11 NotesClass 12 NotesNCERT SolutionsClass 8 Maths SolutionClass 9 Maths SolutionClass 10 Maths SolutionClass 11 Maths SolutionClass 12 Maths SolutionRD Sharma SolutionsClass 8 Maths SolutionClass 9 Maths SolutionClass 10 Maths SolutionClass 11 Maths SolutionClass 12 Maths SolutionPhysics Notes (Class 8-11)Class 8 NotesClass 9 NotesClass 10 NotesClass 11 NotesISRO CSISRO CS Solved PapersISRO CS Original Papers and Official KeysISRO CS Syllabus for Scientist/Engineer ExamUGC NET CSUGC NET CS Notes Paper IIUGC NET CS Notes Paper IIIUGC NET CS Solved PapersStudentCampus Ambassador ProgramSchool Ambassador ProgramProjectGeek of the MonthCampus Geek of the MonthPlacement CourseCompetititve ProgrammingTestimonialsGeek on the TopCareersInternshipJobsApply for JobsPost a JobCourses WriteCome write articles for us and get featuredPracticeLearn and code with the best industry expertsPremiumGet access to ad-free content, doubt assistance and more!JobsCome and find your dream job with usGeeks DigestQuizzesGeeks CampusGblog ArticlesIDECampus Mantri HomeSaved VideosCoursesGBlogPuzzlesWhat's New ? Change Language Data StructuresAlgorithmsInterview PreparationTopic-wise PracticeC++JavaPythonCompetitive ProgrammingMachine LearningWeb DevelopmentPuzzlesProject IdeasGFG School Related Articles ▲Related ArticlesArrays in JavaSplit() String method in Java with examplesArrays.sort() in Java with examplesFor-each loop in JavaReverse a string in JavaHow to iterate any Map in JavaObject Oriented Programming (OOPs) Concept in JavaHashMap in Java with ExamplesInitialize an ArrayList in JavaMultidimensional Arrays in JavaStack Class in JavaArrayList in JavaHow to add an element to an Array in Java?Overriding in JavaCollections.sort() in Java with ExamplesLinkedList in JavaSingleton Class in JavaQueue Interface In JavaInterfaces in JavaSet in JavaInheritance in JavaClasses and Objects in JavaCollections in JavaMath pow() method in Java with ExampleHow to determine length or size of an Array in Java?Difference Between == and .equals() Method in JavaCompare two Strings in JavaInitializing a List in JavaPolymorphism in JavaMultithreading in JavaTable of ContentsArrays in JavaSplit() String method in Java with examplesArrays.sort() in Java with examplesFor-each loop in JavaReverse a string in JavaHow to iterate any Map in JavaObject Oriented Programming (OOPs) Concept in JavaHashMap in Java with ExamplesInitialize an ArrayList in JavaMultidimensional Arrays in JavaStack Class in JavaArrayList in JavaHow to add an element to an Array in Java?Overriding in JavaCollections.sort() in Java with ExamplesLinkedList in JavaSingleton Class in JavaQueue Interface In JavaInterfaces in JavaSet in JavaInheritance in JavaClasses and Objects in JavaCollections in JavaMath pow() method in Java with ExampleHow to determine length or size of an Array in Java?Difference Between == and .equals() Method in JavaCompare two Strings in JavaInitializing a List in JavaPolymorphism in JavaMultithreading in JavaImprove Article Save Article Like Article How to run Java RMI ApplicationDifficulty Level : EasyLast Updated : 02 Nov, 2018Prerequisite: RMIRMI (Remote Method Invocation) is used for distributed object references system. A distributed object is an object which publishes its interface on other machines. A Remote Object is a distributed object whose state is encapsulated. Stub and Skeleton are two objects used to communicate with the remote object.Stub: Stub is a gateway for client program which is used to communicate with skeleton object, by establishing a connection between them.Skeleton: Resides on Server program which is used for passing the request from stub to the remote interface.How communication and process takes place in RMI:Steps to Run Java RMI Application in ConsoleCreation of classes and interfaces for the problem statement: The steps involved in this are as follows:Create a Remote Interface which extends java.rmi.Remote:A remote interface determines the object that can be invoked remotely by the client. This interface can be communicated with the client’s program. This Interface must extend java.rmi.Remote Interface.Problem Statement: Create an RMI Application for finding the factorial of a numberInterface Programimport java.math.BigInteger; // Creating an Interfacepublic interface Factorial extends java.rmi.Remote { // Declaring the method public BigInteger fact(int num) throws java.rmi.RemoteException;}Create a class which extends java.rmi.server.UnicastRemoteObject and implements the previous interface.This class will implement the remote interface. Do the required calculation for the problem statement.Implementation of Interfaceimport java.math.BigInteger; // Extends and Implement the class// and interface respectivelypublic class FactorialImpl extends java.rmi.server.UnicastRemoteObject implements Factorial { // Constructor Declaration public FactorialImpl() throws java.rmi.RemoteException { super(); } // Calculation for the problem statement // Implementing the method fact() // to find factorial of a number public BigInteger fact(int num) throws java.rmi.RemoteException { BigInteger factorial = BigInteger.ONE; for (int i = 1; i <= num; ++i) { factorial = factorial .multiply( BigInteger .valueOf(i)); } return factorial; }}Create a Server Class (with localhost and service name)For hosting a service, the server program is created whereby using java.rmi.Naming.rebind() method can be called which takes two arguments i.e., an object reference (service name) and instances reference.Server Programimport java.rmi.Naming; public class FactorialServer { // Implement the constructor of the class public FactorialServer() { try { // Create a object reference for the interface Factorial c = new FactorialImpl(); // Bind the localhost with the service Naming.rebind("rmi:// localhost/FactorialService", c); } catch (Exception e) { // If any error occur System.out.println("ERR: " + e); } } public static void main(String[] args) { // Create an object new FactorialServer(); }}Create a Client Class (with localhost and service name)Client program will invokes java.rmi.Naming.lookup() method for RMI URL and returns an instance of object type (Factorial Interface). All RMI is done on this objectClient Programimport java.net.MalformedURLException;import java.rmi.Naming;import java.rmi.NotBoundException;import java.rmi.RemoteException; public class FactorialClient { public static void main(String[] args) { try { // Create an remote object with the same name // Cast the lookup result to the interface Factorial c = (Factorial); Naming.lookup("rmi:// localhost/FactorialService"); // Call the method for the results System.out.println(c.fact(30)); } // If any error occur catch (MalformedURLException murle) { System.out.println("\nMalformedURLException: " + murle); } catch (RemoteException re) { System.out.println("\nRemoteException: " + re); } catch (NotBoundException nbe) { System.out.println("\nNotBoundException: " + nbe); } catch (java.lang.ArithmeticException ae) { System.out.println("\nArithmeticException: " + ae); } }}Compilation of all programUse javac to compile all four programs and rmic (RMI Compiler) to create a stub and skeleton class files.Running the system:After the compilation phase, the system is now ready to run. To run the system, open three console screen (move to that path where the program resides). One for the client, one for server and one for the RMI Registry.Start with a registry, use rmiregistry, if there is no error registry will start running and now move to second screen.In the second console run the server program and host the FactorialService. It will start and wait for the client connection and it will load the implementation into memory.In the third console, run the client program.In this way RMI can be run in three console for localhost. RMI uses Network stack and TCP/IP Stack for communication of three different JVM’s.Attention reader! Don’t stop learning now. Get hold of all the important Java Foundation and Collections concepts with the Fundamentals of Java and Java Collections Course at a student-friendly price and become industry ready. To complete your preparation from learning a language to DS Algo and many more, please refer Complete Interview Preparation Course.My Personal Notes arrow_drop_upSave LikePreviousCheck whether a binary string can be formed by concatenating given N numbers sequentiallyNext Domain Specific ToolsRecommended ArticlesPage :java.rmi.Naming Class in Java15, Mar 21java.rmi.RMISecurityManager Class in Java12, Sep 21java.rmi.MarshalledObject Class in Java23, Nov 21Calculator Using RMI(Remote Method Invocation) in Java02, Sep 20Difference Between RMI and DCOM20, Aug 20How to Run Your First Spring Boot Application in Spring Tool Suite?28, Nov 21How to Run Your First Spring Boot Application in IntelliJ IDEA?01, Dec 21How to Run Your First Spring Boot Application in Eclipse IDE?13, Dec 21How to Run Spring Boot Application?13, Dec 21Spring Boot - application.yml/application.yaml File21, Dec 21How to run java class file which is in different directory?23, May 17Difference between Thread.start() and Thread.run() in Java23, Jan 19How to Compile and Run C/C++/Java Programs in Linux08, Mar 19Why is Java 'write once and run anywhere'?24, May 19Difference between Compile-time and Run-time Polymorphism in Java09, Jun 20Java Program to Run Multiple Threads20, Dec 20Compile and Run Java Programs in Sublime Text in Linux11, Feb 21How to run Java code in Node.js ?18, May 21Different Ways to Run Applet in Java09, Nov 21run() Method in Java Thread13, Nov 21Run-Time Stack Mechanism in Java [Use the updated images]29, Sep 17Overloading of Thread class run() method04, Oct 17How to run JavaScript from PHP?08, Dec 18How to Run a Python Script12, Dec 19Article Contributed By :bilal-hungund@bilal-hungundVote for difficultyCurrent difficulty : EasyEasy Normal Medium Hard ExpertArticle Tags :JavaTechnical ScripterPractice Tags :JavaReport IssueWriting code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load CommentsWhat's NewJava Backend Development- LIVE ClassesView DetailsComplete Interview PreparationView DetailsSystem Design-Live Classes for Working ProfessionalsView DetailsMost popular in JavaJava Programming ExamplesStream In JavaStrings in JavaIntroduction to JavaSystem.out.println in JavaMore related articles in JavaScanner Class in JavaDifferent ways of Reading a text file in JavaComparator Interface in Java with ExamplesStringBuilder Class in Java with ExamplesFunctional Interfaces in Java× 5th Floor, A-118,Sector-136, Noida, Uttar Pradesh - 201305 feedback@geeksforgeeks.orgCompanyAbout UsCareersPrivacy PolicyContact UsCopyright PolicyLearnAlgorithmsData StructuresLanguagesCS SubjectsVideo TutorialsWeb DevelopmentWeb TutorialsHTMLCSSJavaScriptBootstrapContributeWrite an ArticleWrite Interview ExperienceInternshipsVideos@geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It ! Start Your Coding Journey Now!Login Register