Analysis of Algorithms | Set 4 (Analysis of Loops) - GeeksforGeeksSkip to content TutorialsPractice DS & Algo.Must Do QuestionsDSA Topic-wiseDSA Company-wiseAlgorithmsAnalysis of AlgorithmsAsymptotic AnalysisWorst, Average and Best CasesAsymptotic NotationsLittle o and little omega notationsLower and Upper Bound TheoryAnalysis of LoopsSolving RecurrencesAmortized AnalysisWhat does 'Space Complexity' mean ?Pseudo-polynomial AlgorithmsPolynomial Time Approximation SchemeA Time Complexity QuestionSearching AlgorithmsSorting AlgorithmsGraph AlgorithmsPattern SearchingGeometric AlgorithmsMathematicalBitwise AlgorithmsRandomized AlgorithmsGreedy AlgorithmsDynamic ProgrammingDivide and ConquerBacktrackingBranch and BoundAll AlgorithmsData StructuresArraysLinked ListStackQueueBinary TreeBinary Search TreeHeapHashingGraphAdvanced Data StructureMatrixStringsAll Data StructuresInterview CornerCompany PreparationTop TopicsPractice Company QuestionsInterview ExperiencesExperienced InterviewsInternship InterviewsCompetititve ProgrammingDesign PatternsSystem Design TutorialMultiple Choice QuizzesLanguagesCC++JavaPythonC#JavaScriptjQuerySQLPHPScalaPerlGo LanguageHTMLCSSKotlinCS SubjectsMathematicsOperating SystemDBMSComputer NetworksComputer Organization and ArchitectureTheory of ComputationCompiler DesignDigital LogicSoftware EngineeringGATEGATE Computer Science NotesLast Minute NotesGATE CS Solved PapersGATE CS Original Papers and Official KeysGATE 2021 DatesGATE CS 2021 SyllabusImportant Topics for GATE CSWeb TechnologiesHTMLCSSJavaScriptAngularJSReactJSNodeJSBootstrapjQueryPHPSoftware DesignsSoftware Design PatternsSystem Design TutorialSchool LearningSchool ProgrammingMathematicsNumber SystemAlgebraTrigonometryStatisticsProbabilityGeometryMensurationCalculusMaths Notes (Class 8-12)Class 8 NotesClass 9 NotesClass 10 NotesClass 11 NotesClass 12 NotesNCERT SolutionsClass 8 Maths SolutionClass 9 Maths SolutionClass 10 Maths SolutionClass 11 Maths SolutionClass 12 Maths SolutionRD Sharma SolutionsClass 8 Maths SolutionClass 9 Maths SolutionClass 10 Maths SolutionClass 11 Maths SolutionClass 12 Maths SolutionPhysics Notes (Class 8-11)Class 8 NotesClass 9 NotesClass 10 NotesClass 11 NotesISRO CSISRO CS Solved PapersISRO CS Original Papers and Official KeysISRO CS Syllabus for Scientist/Engineer ExamUGC NET CSUGC NET CS Notes Paper IIUGC NET CS Notes Paper IIIUGC NET CS Solved PapersStudentCampus Ambassador ProgramSchool Ambassador ProgramProjectGeek of the MonthCampus Geek of the MonthPlacement CourseCompetititve ProgrammingTestimonialsGeek on the TopCareersInternshipJobsApply for JobsPost a JobCourses WriteCome write articles for us and get featuredPracticeLearn and code with the best industry expertsPremiumGet access to ad-free content, doubt assistance and more!JobsCome and find your dream job with usGeeks DigestQuizzesGeeks CampusGblog ArticlesIDECampus Mantri HomeSaved VideosCoursesGBlogPuzzlesWhat's New ? Change Language Data StructuresAlgorithmsInterview PreparationTopic-wise PracticeC++JavaPythonCompetitive ProgrammingMachine LearningWeb DevelopmentPuzzlesProject IdeasGFG School Related Articles ▲Related ArticlesAnalysis of Algorithms | Set 2 (Worst, Average and Best Cases)Analysis of Algorithms | Set 3 (Asymptotic Notations)Analysis of Algorithms | Set 4 (Analysis of Loops)Analysis of Algorithm | Set 4 (Solving Recurrences)Analysis of Algorithm | Set 5 (Amortized Analysis Introduction)What does ‘Space Complexity’ mean?Pseudo-polynomial AlgorithmsNP-Completeness | Set 1 (Introduction)A Time Complexity QuestionMerge SortQuickSortHeapSortBinary HeapTime Complexity of building a heapApplications of Heap Data StructureBinomial HeapFibonacci Heap | Set 1 (Introduction)Fibonacci Heap – Insertion and UnionFibonacci Heap – Deletion, Extract min and Decrease keyLeftist Tree / Leftist HeapK-ary HeapIterative HeapSortAnalysis of Algorithms | Set 1 (Asymptotic Analysis)Practice Questions on Time Complexity AnalysisUnderstanding Time Complexity with Simple ExamplesComplexity of different operations in Binary tree, Binary Search Tree and AVL treeTable of ContentsAnalysis of Algorithms | Set 2 (Worst, Average and Best Cases)Analysis of Algorithms | Set 3 (Asymptotic Notations)Analysis of Algorithms | Set 4 (Analysis of Loops)Analysis of Algorithm | Set 4 (Solving Recurrences)Analysis of Algorithm | Set 5 (Amortized Analysis Introduction)What does ‘Space Complexity’ mean?Pseudo-polynomial AlgorithmsNP-Completeness | Set 1 (Introduction)A Time Complexity QuestionMerge SortQuickSortHeapSortBinary HeapTime Complexity of building a heapApplications of Heap Data StructureBinomial HeapFibonacci Heap | Set 1 (Introduction)Fibonacci Heap – Insertion and UnionFibonacci Heap – Deletion, Extract min and Decrease keyLeftist Tree / Leftist HeapK-ary HeapIterative HeapSortAnalysis of Algorithms | Set 1 (Asymptotic Analysis)Practice Questions on Time Complexity AnalysisUnderstanding Time Complexity with Simple ExamplesComplexity of different operations in Binary tree, Binary Search Tree and AVL treeImprove Article Save Article Like Article Analysis of Algorithms | Set 4 (Analysis of Loops)Difficulty Level : EasyLast Updated : 12 Nov, 2021We have discussed Asymptotic Analysis, Worst, Average and Best Cases and Asymptotic Notations in previous posts. In this post, an analysis of iterative programs with simple examples is discussed. 1) O(1): Time complexity of a function (or set of statements) is considered as O(1) if it doesn’t contain loop, recursion, and call to any other non-constant time function. // set of non-recursive and non-loop statementsFor example, swap() function has O(1) time complexity. A loop or recursion that runs a constant number of times is also considered as O(1). For example, the following loop is O(1). // Here c is a constant for (int i = 1; i <= c; i++) { // some O(1) expressions }2) O(n): Time Complexity of a loop is considered as O(n) if the loop variables are incremented/decremented by a constant amount. For example following functions have O(n) time complexity. // Here c is a positive integer constant for (int i = 1; i <= n; i += c) { // some O(1) expressions } for (int i = n; i > 0; i -= c) { // some O(1) expressions }3) O(nc): Time complexity of nested loops is equal to the number of times the innermost statement is executed. For example, the following sample loops have O(n2) time complexity for (int i = 1; i <=n; i += c) { for (int j = 1; j <=n; j += c) { // some O(1) expressions } } for (int i = n; i > 0; i -= c) { for (int j = i+1; j <=n; j += c) { // some O(1) expressions }For example, Selection sort and Insertion Sort have O(n2) time complexity. 4) O(Logn) Time Complexity of a loop is considered as O(Logn) if the loop variables are divided/multiplied by a constant amount. for (int i = 1; i <=n; i *= c) { // some O(1) expressions } for (int i = n; i > 0; i /= c) { // some O(1) expressions }For example, Binary Search(refer iterative implementation) has O(Logn) time complexity. Let us see mathematically how it is O(Log n). The series that we get in the first loop is 1, c, c2, c3, … ck. If we put k equals to Logcn, we get cLogcn which is n. 5) O(LogLogn) Time Complexity of a loop is considered as O(LogLogn) if the loop variables are reduced/increased exponentially by a constant amount. // Here c is a constant greater than 1 for (int i = 2; i <=n; i = pow(i, c)) { // some O(1) expressions } //Here fun is sqrt or cuberoot or any other constant root for (int i = n; i > 1; i = fun(i)) { // some O(1) expressions }See this for mathematical details. How to combine the time complexities of consecutive loops? When there are consecutive loops, we calculate time complexity as a sum of time complexities of individual loops. for (int i = 1; i <=m; i += c) { // some O(1) expressions } for (int i = 1; i <=n; i += c) { // some O(1) expressions } Time complexity of above code is O(m) + O(n) which is O(m+n) If m == n, the time complexity becomes O(2n) which is O(n). How to calculate time complexity when there are many if, else statements inside loops? As discussed here, worst-case time complexity is the most useful among best, average and worst. Therefore we need to consider the worst case. We evaluate the situation when values in if-else conditions cause a maximum number of statements to be executed. For example, consider the linear search function where we consider the case when an element is present at the end or not present at all. When the code is too complex to consider all if-else cases, we can get an upper bound by ignoring if-else and other complex control statements. How to calculate the time complexity of recursive functions? The time complexity of a recursive function can be written as a mathematical recurrence relation. To calculate time complexity, we must know how to solve recurrences. We will soon be discussing recurrence solving techniques as a separate post. Quiz on Analysis of Algorithms Next – Analysis of Algorithm | Set 4 (Solving Recurrences) Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above. My Personal Notes arrow_drop_upSave LikePreviousAnalysis of Algorithms | Set 3 (Asymptotic Notations)Next Analysis of Algorithm | Set 4 (Solving Recurrences)Recommended ArticlesPage :Analysis of Algorithms | Set 1 (Asymptotic Analysis)03, Jan 12Analysis of Algorithms | Big-O analysis28, Feb 18Analysis of Algorithm | Set 5 (Amortized Analysis Introduction)23, Sep 14Analysis of Algorithms | Set 5 (Practice Problems)02, May 17Algorithms Sample Questions | Set 3 | Time Order Analysis27, May 19Analysis of Algorithms | Set 3 (Asymptotic Notations)26, Oct 13Analysis of Algorithms | Set 2 (Worst, Average and Best Cases)19, Feb 12Performance of loops (A caching question)30, Aug 15Asymptotic Analysis and comparison of sorting algorithms28, Dec 16Analysis of algorithms | little o and little omega notations14, Aug 17Analysis of Algorithms | Big - Θ (Big Theta) Notation11, Jul 21Analysis of Algorithms | Big - Ω (Big- Omega) Notation11, Jul 21Analysis of Algorithm | Set 4 (Solving Recurrences)13, Feb 14Practice Questions on Time Complexity Analysis12, Dec 17Analysis of different sorting techniques29, Jan 18Guidelines for asymptotic analysis27, May 21Complexity Analysis of Binary Search29, May 19Difference between Posteriori and Priori analysis07, Aug 19Complexity analysis of various operations of Binary Min Heap26, Jun 20What is algorithm and why analysis of it is important?12, Jan 21Prune-and-Search | A Complexity Analysis Overview19, Jul 21Amortized analysis for increment in counter23, Mar 18Examples of Big-O analysis23, Nov 20Time Complexity Analysis | Tower Of Hanoi (Recursion)27, Feb 18Article Contributed By :GeeksforGeeksVote for difficultyCurrent difficulty : EasyEasy Normal Medium Hard ExpertImproved By :meghajatana23603vaibhav2021Article Tags :AnalysisArticlesReport IssueWriting code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load CommentsWhat's NewComplete Interview PreparationView DetailsSystem Design-Live Classes for Working ProfessionalsView DetailsData Structures & Algorithms- Self Paced CourseView DetailsMost popular in AnalysisAnalysis of Algorithms | Big-O analysisDifference between Big Oh, Big Omega and Big ThetaTime Complexity and Space ComplexityAnalysis of different sorting techniquesTail RecursionMost visited in ArticlesTree Traversals (Inorder, Preorder and Postorder)find command in Linux with examplesSQL | Join (Inner, Left, Right and Full Joins)How to write a Pseudo Code?Understanding "extern" keyword in C× 5th Floor, A-118,Sector-136, Noida, Uttar Pradesh - 201305 feedback@geeksforgeeks.orgCompanyAbout UsCareersPrivacy PolicyContact UsCopyright PolicyLearnAlgorithmsData StructuresLanguagesCS SubjectsVideo TutorialsWeb DevelopmentWeb TutorialsHTMLCSSJavaScriptBootstrapContributeWrite an ArticleWrite Interview ExperienceInternshipsVideos@geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It ! Start Your Coding Journey Now!Login Register