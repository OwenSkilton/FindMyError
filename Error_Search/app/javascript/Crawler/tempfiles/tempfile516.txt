Lambda Expressions in Java 8 - GeeksforGeeksSkip to content TutorialsPractice DS & Algo.Must Do QuestionsDSA Topic-wiseDSA Company-wiseAlgorithmsAnalysis of AlgorithmsAsymptotic AnalysisWorst, Average and Best CasesAsymptotic NotationsLittle o and little omega notationsLower and Upper Bound TheoryAnalysis of LoopsSolving RecurrencesAmortized AnalysisWhat does 'Space Complexity' mean ?Pseudo-polynomial AlgorithmsPolynomial Time Approximation SchemeA Time Complexity QuestionSearching AlgorithmsSorting AlgorithmsGraph AlgorithmsPattern SearchingGeometric AlgorithmsMathematicalBitwise AlgorithmsRandomized AlgorithmsGreedy AlgorithmsDynamic ProgrammingDivide and ConquerBacktrackingBranch and BoundAll AlgorithmsData StructuresArraysLinked ListStackQueueBinary TreeBinary Search TreeHeapHashingGraphAdvanced Data StructureMatrixStringsAll Data StructuresInterview CornerCompany PreparationTop TopicsPractice Company QuestionsInterview ExperiencesExperienced InterviewsInternship InterviewsCompetititve ProgrammingDesign PatternsSystem Design TutorialMultiple Choice QuizzesLanguagesCC++JavaPythonC#JavaScriptjQuerySQLPHPScalaPerlGo LanguageHTMLCSSKotlinCS SubjectsMathematicsOperating SystemDBMSComputer NetworksComputer Organization and ArchitectureTheory of ComputationCompiler DesignDigital LogicSoftware EngineeringGATEGATE Computer Science NotesLast Minute NotesGATE CS Solved PapersGATE CS Original Papers and Official KeysGATE 2021 DatesGATE CS 2021 SyllabusImportant Topics for GATE CSWeb TechnologiesHTMLCSSJavaScriptAngularJSReactJSNodeJSBootstrapjQueryPHPSoftware DesignsSoftware Design PatternsSystem Design TutorialSchool LearningSchool ProgrammingMathematicsNumber SystemAlgebraTrigonometryStatisticsProbabilityGeometryMensurationCalculusMaths Notes (Class 8-12)Class 8 NotesClass 9 NotesClass 10 NotesClass 11 NotesClass 12 NotesNCERT SolutionsClass 8 Maths SolutionClass 9 Maths SolutionClass 10 Maths SolutionClass 11 Maths SolutionClass 12 Maths SolutionRD Sharma SolutionsClass 8 Maths SolutionClass 9 Maths SolutionClass 10 Maths SolutionClass 11 Maths SolutionClass 12 Maths SolutionPhysics Notes (Class 8-11)Class 8 NotesClass 9 NotesClass 10 NotesClass 11 NotesISRO CSISRO CS Solved PapersISRO CS Original Papers and Official KeysISRO CS Syllabus for Scientist/Engineer ExamUGC NET CSUGC NET CS Notes Paper IIUGC NET CS Notes Paper IIIUGC NET CS Solved PapersStudentCampus Ambassador ProgramSchool Ambassador ProgramProjectGeek of the MonthCampus Geek of the MonthPlacement CourseCompetititve ProgrammingTestimonialsGeek on the TopCareersInternshipJobsApply for JobsPost a JobCourses WriteCome write articles for us and get featuredPracticeLearn and code with the best industry expertsPremiumGet access to ad-free content, doubt assistance and more!JobsCome and find your dream job with usGeeks DigestQuizzesGeeks CampusGblog ArticlesIDECampus Mantri HomeSaved VideosCoursesGBlogPuzzlesWhat's New ? Change Language Data StructuresAlgorithmsInterview PreparationTopic-wise PracticeC++JavaPythonCompetitive ProgrammingMachine LearningWeb DevelopmentPuzzlesProject IdeasGFG School Related Articles ▲Related ArticlesAnonymous Inner Class in JavaNested Classes in JavaJava.util.Objects class in JavaDifferent ways to create objects in JavaHow are Java objects stored in memory?Passing and Returning Objects in JavaLambda Expressions in Java 8Serialization and Deserialization in Java with ExampleGarbage Collection in JavaHow to prevent objects of a class from Garbage Collection in JavaCount number of a class objects created in JavaClasses and Objects in JavaUnderstanding Classes and Objects in JavaInner Class in JavaTable of ContentsAnonymous Inner Class in JavaNested Classes in JavaJava.util.Objects class in JavaDifferent ways to create objects in JavaHow are Java objects stored in memory?Passing and Returning Objects in JavaLambda Expressions in Java 8Serialization and Deserialization in Java with ExampleGarbage Collection in JavaHow to prevent objects of a class from Garbage Collection in JavaCount number of a class objects created in JavaClasses and Objects in JavaUnderstanding Classes and Objects in JavaInner Class in JavaImprove Article Save Article Like Article Lambda Expressions in Java 8Difficulty Level : MediumLast Updated : 13 Aug, 2018Lambda expressions basically express instances of functional interfaces (An interface with single abstract method is called functional interface. An example is java.lang.Runnable). lambda expressions implement the only abstract function and therefore implement functional interfaceslambda expressions are added in Java 8 and provide below functionalities.Enable to treat functionality as a method argument, or code as data.A function that can be created without belonging to any class.A lambda expression can be passed around as if it was an object and executed on demand.// Java program to demonstrate lambda expressions// to implement a user defined functional interface. // A sample functional interface (An interface with// single abstract methodinterface FuncInterface{ // An abstract function void abstractFun(int x); // A non-abstract (or default) function default void normalFun() { System.out.println("Hello"); }} class Test{ public static void main(String args[]) { // lambda expression to implement above // functional interface. This interface // by default implements abstractFun() FuncInterface fobj = (int x)->System.out.println(2*x); // This calls above lambda expression and prints 10. fobj.abstractFun(5); }}Output:10Syntax: lambda operator -> bodywhere lambda operator can be:Zero parameter:() -> System.out.println("Zero parameter lambda");One parameter:–(p) -> System.out.println("One parameter: " + p);It is not mandatory to use parentheses, if the type of that variable can be inferred from the contextMultiple parameters :(p1, p2) -> System.out.println("Multiple parameters: " + p1 + ", " + p2);Please note: Lambda expressions are just like functions and they accept parameters just like functions.// A Java program to demonstrate simple lambda expressionsimport java.util.ArrayList;class Test{ public static void main(String args[]) { // Creating an ArrayList with elements // {1, 2, 3, 4} ArrayList<Integer> arrL = new ArrayList<Integer>(); arrL.add(1); arrL.add(2); arrL.add(3); arrL.add(4); // Using lambda expression to print all elements // of arrL arrL.forEach(n -> System.out.println(n)); // Using lambda expression to print even elements // of arrL arrL.forEach(n -> { if (n%2 == 0) System.out.println(n); }); }}Output :1 2 3 4 2 4Note that lambda expressions can only be used to implement functional interfaces. In the above example also, the lambda expression implements Consumer Functional Interface.A Java program to demonstrate working of lambda expression with two arguments.// Java program to demonstrate working of lambda expressionspublic class Test{ // operation is implemented using lambda expressions interface FuncInter1 { int operation(int a, int b); } // sayMessage() is implemented using lambda expressions // above interface FuncInter2 { void sayMessage(String message); } // Performs FuncInter1's operation on 'a' and 'b' private int operate(int a, int b, FuncInter1 fobj) { return fobj.operation(a, b); } public static void main(String args[]) { // lambda expression for addition for two parameters // data type for x and y is optional. // This expression implements 'FuncInter1' interface FuncInter1 add = (int x, int y) -> x + y; // lambda expression multiplication for two parameters // This expression also implements 'FuncInter1' interface FuncInter1 multiply = (int x, int y) -> x * y; // Creating an object of Test to call operate using // different implementations using lambda Expressions Test tobj = new Test(); // Add two numbers using lambda expression System.out.println("Addition is " + tobj.operate(6, 3, add)); // Multiply two numbers using lambda expression System.out.println("Multiplication is " + tobj.operate(6, 3, multiply)); // lambda expression for single parameter // This expression implements 'FuncInter2' interface FuncInter2 fobj = message ->System.out.println("Hello " + message); fobj.sayMessage("Geek"); }}Output:Addition is 9 Multiplication is 18 Hello Geek Important points:The body of a lambda expression can contain zero, one or more statements.When there is a single statement curly brackets are not mandatory and the return type of the anonymous function is the same as that of the body expression.When there are more than one statements, then these must be enclosed in curly brackets (a code block) and the return type of the anonymous function is the same as the type of the value returned within the code block, or void if nothing is returned.Please see this. for an application.This article is contributed by Sampada Kaushal. If you like GeeksforGeeks and would like to contribute, you can also write an article using contribute.geeksforgeeks.org or mail your article to contribute@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.Attention reader! Don’t stop learning now. Get hold of all the important Java Foundation and Collections concepts with the Fundamentals of Java and Java Collections Course at a student-friendly price and become industry ready. To complete your preparation from learning a language to DS Algo and many more, please refer Complete Interview Preparation Course.My Personal Notes arrow_drop_upSave LikePreviousPassing and Returning Objects in JavaNext Serialization and Deserialization in Java with ExampleRecommended ArticlesPage :Block Lambda Expressions in Java11, Feb 21Java - Lambda Expressions Parameters22, Sep 21Lambda Expressions | Concurrent Programming Approach 408, Apr 19Java Lambda Expression with Collections13, Aug 18Converting ArrayList to HashMap in Java 8 using a Lambda Expression03, Jan 21Java - Lambda Expression Variable Capturing with Examples24, Jul 21Serialization of Lambda Expression in Java27, Apr 21Check if a String Contains Only Alphabets in Java Using Lambda Expression24, Sep 18Difference between Anonymous Inner Class and Lambda Expression17, Jun 19Regular Expressions in Java17, Feb 16How to validate an IP address using Regular Expressions in Java14, Feb 20How to validate a Username using Regular Expressions in Java11, Mar 20How to validate a Password using Regular Expressions in Java15, Apr 20How to Validate a Password using Regular Expressions in Android?09, Dec 20Difference Between java.sql.Time, java.sql.Timestamp and java.sql.Date in Java07, Apr 21How to Convert java.sql.Date to java.util.Date in Java?02, Feb 21Different Ways to Convert java.util.Date to java.time.LocalDate in Java05, Jan 21How to Convert java.util.Date to java.sql.Date in Java?23, Mar 21Java.util.BitSet class methods in Java with Examples | Set 218, Nov 16Java.Lang.Float class in Java27, Mar 17Java.io.BufferedInputStream class in Java20, Jan 17Java.io.ObjectInputStream Class in Java | Set 102, Feb 17Java.util.BitSet class in Java with Examples | Set 116, Nov 16Java.io.BufferedWriter class methods in Java29, Dec 16Article Contributed By :GeeksforGeeksVote for difficultyCurrent difficulty : MediumEasy Normal Medium Hard ExpertArticle Tags :Java-Functionsjava-interfacesjava-lambdaJavaPractice Tags :JavaReport IssueWriting code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load CommentsWhat's NewJava Backend Development- LIVE ClassesView DetailsComplete Interview PreparationView DetailsSystem Design-Live Classes for Working ProfessionalsView DetailsMost popular in JavaArrays in JavaObject Oriented Programming (OOPs) Concept in JavaSplit() String method in Java with examplesFor-each loop in JavaArrays.sort() in Java with examplesMore related articles in JavaReverse a string in JavaArrayList in JavaHashMap in Java with ExamplesInitialize an ArrayList in JavaMultidimensional Arrays in Java× 5th Floor, A-118,Sector-136, Noida, Uttar Pradesh - 201305 feedback@geeksforgeeks.orgCompanyAbout UsCareersPrivacy PolicyContact UsCopyright PolicyLearnAlgorithmsData StructuresLanguagesCS SubjectsVideo TutorialsWeb DevelopmentWeb TutorialsHTMLCSSJavaScriptBootstrapContributeWrite an ArticleWrite Interview ExperienceInternshipsVideos@geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It ! Start Your Coding Journey Now!Login Register