Tree of Space - Locking and Unlocking N-Ary Tree - GeeksforGeeksSkip to content TutorialsPractice DS & Algo.Must Do QuestionsDSA Topic-wiseDSA Company-wiseAlgorithmsAnalysis of AlgorithmsAsymptotic AnalysisWorst, Average and Best CasesAsymptotic NotationsLittle o and little omega notationsLower and Upper Bound TheoryAnalysis of LoopsSolving RecurrencesAmortized AnalysisWhat does 'Space Complexity' mean ?Pseudo-polynomial AlgorithmsPolynomial Time Approximation SchemeA Time Complexity QuestionSearching AlgorithmsSorting AlgorithmsGraph AlgorithmsPattern SearchingGeometric AlgorithmsMathematicalBitwise AlgorithmsRandomized AlgorithmsGreedy AlgorithmsDynamic ProgrammingDivide and ConquerBacktrackingBranch and BoundAll AlgorithmsData StructuresArraysLinked ListStackQueueBinary TreeBinary Search TreeHeapHashingGraphAdvanced Data StructureMatrixStringsAll Data StructuresInterview CornerCompany PreparationTop TopicsPractice Company QuestionsInterview ExperiencesExperienced InterviewsInternship InterviewsCompetititve ProgrammingDesign PatternsSystem Design TutorialMultiple Choice QuizzesLanguagesCC++JavaPythonC#JavaScriptjQuerySQLPHPScalaPerlGo LanguageHTMLCSSKotlinCS SubjectsMathematicsOperating SystemDBMSComputer NetworksComputer Organization and ArchitectureTheory of ComputationCompiler DesignDigital LogicSoftware EngineeringGATEGATE Computer Science NotesLast Minute NotesGATE CS Solved PapersGATE CS Original Papers and Official KeysGATE 2021 DatesGATE CS 2021 SyllabusImportant Topics for GATE CSWeb TechnologiesHTMLCSSJavaScriptAngularJSReactJSNodeJSBootstrapjQueryPHPSoftware DesignsSoftware Design PatternsSystem Design TutorialSchool LearningSchool ProgrammingMathematicsNumber SystemAlgebraTrigonometryStatisticsProbabilityGeometryMensurationCalculusMaths Notes (Class 8-12)Class 8 NotesClass 9 NotesClass 10 NotesClass 11 NotesClass 12 NotesNCERT SolutionsClass 8 Maths SolutionClass 9 Maths SolutionClass 10 Maths SolutionClass 11 Maths SolutionClass 12 Maths SolutionRD Sharma SolutionsClass 8 Maths SolutionClass 9 Maths SolutionClass 10 Maths SolutionClass 11 Maths SolutionClass 12 Maths SolutionPhysics Notes (Class 8-11)Class 8 NotesClass 9 NotesClass 10 NotesClass 11 NotesISRO CSISRO CS Solved PapersISRO CS Original Papers and Official KeysISRO CS Syllabus for Scientist/Engineer ExamUGC NET CSUGC NET CS Notes Paper IIUGC NET CS Notes Paper IIIUGC NET CS Solved PapersStudentCampus Ambassador ProgramSchool Ambassador ProgramProjectGeek of the MonthCampus Geek of the MonthPlacement CourseCompetititve ProgrammingTestimonialsGeek on the TopCareersInternshipJobsApply for JobsPost a JobCourses WriteCome write articles for us and get featuredPracticeLearn and code with the best industry expertsPremiumGet access to ad-free content, doubt assistance and more!JobsCome and find your dream job with usGeeks DigestQuizzesGeeks CampusGblog ArticlesIDECampus Mantri HomeSaved VideosCoursesGBlogPuzzlesWhat's New ? Change Language Data StructuresAlgorithmsInterview PreparationTopic-wise PracticeC++JavaPythonCompetitive ProgrammingMachine LearningWeb DevelopmentPuzzlesProject IdeasGFG School Related Articles ▲Related ArticlesTree of Space – Locking and Unlocking N-Ary TreeLocking and Unlocking of Resources arranged in the form of n-ary TreeGeneric Trees(N-array Trees)General Tree (Each node can have arbitrary number of children) Level Order TraversalN Queen Problem | Backtracking-3Printing all solutions in N-Queen ProblemWarnsdorff’s algorithm for Knight’s tour problemThe Knight’s tour problem | Backtracking-1Rat in a Maze | Backtracking-2Count number of ways to reach destination in a MazeCount all possible paths from top left to bottom right of a mXn matrixPrint all possible paths from top left to bottom right of a mXn matrixUnique paths in a Grid with ObstaclesUnique paths covering every non-obstacle block exactly once in a gridDepth First Search or DFS for a GraphBreadth First Search or BFS for a GraphLevel Order Binary Tree TraversalTree Traversals (Inorder, Preorder and Postorder)Inorder Tree Traversal without RecursionInorder Tree Traversal without recursion and without stack!Print Postorder traversal from given Inorder and Preorder traversalsConstruct Tree from given Inorder and Preorder traversalsConstruct a Binary Tree from Postorder and InorderConstruct Full Binary Tree from given preorder and postorder traversalsBinary Search Tree | Set 1 (Search and Insertion)AVL Tree | Set 1 (Insertion)Binary Search Tree | Set 2 (Delete)A program to check if a binary tree is BST or notConstruct BST from given preorder traversal | Set 1Sorted Array to Balanced BSTTable of ContentsTree of Space – Locking and Unlocking N-Ary TreeLocking and Unlocking of Resources arranged in the form of n-ary TreeGeneric Trees(N-array Trees)General Tree (Each node can have arbitrary number of children) Level Order TraversalN Queen Problem | Backtracking-3Printing all solutions in N-Queen ProblemWarnsdorff’s algorithm for Knight’s tour problemThe Knight’s tour problem | Backtracking-1Rat in a Maze | Backtracking-2Count number of ways to reach destination in a MazeCount all possible paths from top left to bottom right of a mXn matrixPrint all possible paths from top left to bottom right of a mXn matrixUnique paths in a Grid with ObstaclesUnique paths covering every non-obstacle block exactly once in a gridDepth First Search or DFS for a GraphBreadth First Search or BFS for a GraphLevel Order Binary Tree TraversalTree Traversals (Inorder, Preorder and Postorder)Inorder Tree Traversal without RecursionInorder Tree Traversal without recursion and without stack!Print Postorder traversal from given Inorder and Preorder traversalsConstruct Tree from given Inorder and Preorder traversalsConstruct a Binary Tree from Postorder and InorderConstruct Full Binary Tree from given preorder and postorder traversalsBinary Search Tree | Set 1 (Search and Insertion)AVL Tree | Set 1 (Insertion)Binary Search Tree | Set 2 (Delete)A program to check if a binary tree is BST or notConstruct BST from given preorder traversal | Set 1Sorted Array to Balanced BSTImprove Article Save Article Like Article Tree of Space – Locking and Unlocking N-Ary TreeDifficulty Level : HardLast Updated : 21 Nov, 2021Given a world map in the form of Generic M-ary Tree consisting of N nodes and an array queries[], the task is to implement the functions Lock, Unlock and Upgrade for the given tree. For each query in queries[], the functions return true when the operation is performed successfully, otherwise it returns false. The functions are defined as: X: Name of the node in the tree and will be uniqueuid: User Id for the person who accesses node X1. Lock(X, uid): Lock takes exclusive access to the subtree rooted.Once Lock(X, uid) succeeds, then lock(A, any user) should fail, where A is a descendant of X.Lock(B. any user) should fail where X is a descendant of B.Lock operation cannot be performed on a node that is already locked.2. Unlock(X, uid): To unlock the locked node.The unlock reverts what was done by the Lock operation.It can only be called on same and unlocked by same uid.3. UpgradeLock(X, uid): The user uid can upgrade their lock to an ancestor node.It is only possible if any ancestor node is only locked by the same user uid.The Upgrade should fail if there is any node that is locked by some other uid Y below.Examples:Input: N = 7, M = 2, nodes = [‘World’, ‘Asia’, ‘Africa’, ‘China’, ‘India’, ‘SouthAfrica’, ‘Egypt’], queries = [‘1 China 9’, ‘1 India 9’, ‘3 Asia 9’, ‘2 India 9’, ‘2 Asia 9’]Output: true true true false trueInput: N = 3, M = 2, nodes = [‘World’, ‘China’, ‘India’], queries = [‘3 India 1’, ‘1 World 9’]Output: false trueRecommended: Please try your approach on {IDE} first, before moving on to the solution.Below is the implementation of the above approach:Python3# Python Implementation # Locking functiondef lock(name): ind = nodes.index(name)+1 c1 = ind * 2 c2 = ind * 2 + 1 if status[name] == 'lock' \ or status[name] == 'fail': return 'false' else: p = ind//2 status[nodes[p-1]] = 'fail' status[name] = 'lock' return 'true' # Unlocking functiondef unlock(name): if status[name] == 'lock': status[name] = 'unlock' return 'true' else: return 'false' # Upgrade functiondef upgrade(name): ind = nodes.index(name)+1 # left child of ind c1 = ind * 2 # right child of ind c2 = ind * 2 + 1 if c1 in range(1, n) and c2 in range(1, n): if status[nodes[c1-1]] == 'lock' \ and status[nodes[c2-1]] == 'lock': status[nodes[c1-1]] = 'unlock' status[nodes[c2-1]] = 'unlock' status[nodes[ind-1]] = 'lock' return 'true' else: return 'false' # Precomputationdef precompute(queries): d = [] # Traversing the queries for j in queries: i = j.split() d.append(i[1]) d.append(int(i[0])) status = {} for j in range(0, len(d)-1, 2): status[d[j]] = 0 return status, d # Function to perform operationsdef operation(name, code): result = 'false' # Choose operation to perform if code == 1: result = lock(name) elif code == 2: result = unlock(name) elif code == 3: result = upgrade(name) return result # Driver Codeif __name__ == '__main__': # Given Input n = 7;m = 2 apis = 5 nodes = ['World', 'Asia', \ 'Africa', 'China', \ 'India', 'SouthAfrica', 'Egypt'] queries = ['1 China 9', '1 India 9', \ '3 Asia 9', '2 India 9', '2 Asia 9'] # Precomputation status, d = precompute(queries) # Function Call for j in range(0, len(d) - 1, 2): print(operation(d[j], d[j + 1]), end = ' ')Output: true true true false true Time Complexity: O(LogN)Auxiliary Space: O(N)My Personal Notes arrow_drop_upSave LikeNext Locking and Unlocking of Resources arranged in the form of n-ary TreeRecommended ArticlesPage :Locking and Unlocking of Resources arranged in the form of n-ary Tree06, Jan 16Find the closest element in Binary Search Tree | Space Efficient Method18, Jun 18Common nodes in the inorder sequence of a tree between given two nodes in O(1) space07, May 20Print K inorder successors of a Binary Tree in O(1) space05, Jun 20Create Balanced Binary Tree using its Leaf Nodes without using extra space12, Jun 20Post Order Traversal of Binary Tree in O(N) using O(1) space18, Jul 20Vertical Sum in Binary Tree | Set 2 (Space Optimized)13, Apr 16Find median of BST in O(n) time and O(1) space16, Jun 17Connect nodes at same level using constant extra space12, Jan 12K'th Largest element in BST using constant extra space12, Apr 18Print BST keys in given Range | O(1) Space17, May 18K'th smallest element in BST using O(1) Extra Space16, Jul 15Merge two BSTs with limited extra space01, Jun 12Merge two BSTs with constant extra space07, Jun 19Complexity of different operations in Binary tree, Binary Search Tree and AVL tree19, Jan 18Convert a Generic Tree(N-array Tree) to Binary Tree29, Oct 20Maximum sub-tree sum in a Binary Tree such that the sub-tree is also a BST20, Mar 19Construct Full Binary Tree using its Preorder traversal and Preorder traversal of its mirror tree03, Oct 17Check if the given binary tree has a sub-tree with equal no of 1's and 0's | Set 215, Mar 19Difference between General tree and Binary tree10, Oct 19Difference between Binary Tree and Binary Search Tree31, Oct 19Difference between Binary tree and B-tree20, Dec 19Difference between B tree and B+ tree11, Jun 20Check if given inorder and preorder traversals are valid for any Binary Tree without building the tree03, Sep 21Article Contributed By :jelonmusk@jelonmuskVote for difficultyCurrent difficulty : HardEasy Normal Medium Hard ExpertImproved By :chakkritipkalrap615Article Tags :JuspayBinary Search TreeTreePractice Tags :Binary Search TreeTreeReport IssueWriting code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load CommentsWhat's NewComplete Interview PreparationView DetailsSystem Design-Live Classes for Working ProfessionalsView DetailsData Structures & Algorithms- Self Paced CourseView DetailsMost popular in Binary Search TreeFloor and Ceil from a BSTOverview of Data Structures | Set 2 (Binary Tree, BST, Heap and Hash)Inorder Successor in Binary Search TreeRed-Black Tree | Set 2 (Insert)K'th Largest element in BST using constant extra spaceMost visited in TreeBinary Tree | Set 1 (Introduction)Binary Tree | Set 3 (Types of Binary Tree)Write a Program to Find the Maximum Depth or Height of a TreeBinary Tree | Set 2 (Properties)Lowest Common Ancestor in a Binary Tree | Set 1× 5th Floor, A-118,Sector-136, Noida, Uttar Pradesh - 201305 feedback@geeksforgeeks.orgCompanyAbout UsCareersPrivacy PolicyContact UsCopyright PolicyLearnAlgorithmsData StructuresLanguagesCS SubjectsVideo TutorialsWeb DevelopmentWeb TutorialsHTMLCSSJavaScriptBootstrapContributeWrite an ArticleWrite Interview ExperienceInternshipsVideos@geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It ! Start Your Coding Journey Now!Login Register