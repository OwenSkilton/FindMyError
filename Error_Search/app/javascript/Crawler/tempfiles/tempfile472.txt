Reflection Array Class in Java - GeeksforGeeksSkip to content TutorialsPractice DS & Algo.Must Do QuestionsDSA Topic-wiseDSA Company-wiseAlgorithmsAnalysis of AlgorithmsAsymptotic AnalysisWorst, Average and Best CasesAsymptotic NotationsLittle o and little omega notationsLower and Upper Bound TheoryAnalysis of LoopsSolving RecurrencesAmortized AnalysisWhat does 'Space Complexity' mean ?Pseudo-polynomial AlgorithmsPolynomial Time Approximation SchemeA Time Complexity QuestionSearching AlgorithmsSorting AlgorithmsGraph AlgorithmsPattern SearchingGeometric AlgorithmsMathematicalBitwise AlgorithmsRandomized AlgorithmsGreedy AlgorithmsDynamic ProgrammingDivide and ConquerBacktrackingBranch and BoundAll AlgorithmsData StructuresArraysLinked ListStackQueueBinary TreeBinary Search TreeHeapHashingGraphAdvanced Data StructureMatrixStringsAll Data StructuresInterview CornerCompany PreparationTop TopicsPractice Company QuestionsInterview ExperiencesExperienced InterviewsInternship InterviewsCompetititve ProgrammingDesign PatternsSystem Design TutorialMultiple Choice QuizzesLanguagesCC++JavaPythonC#JavaScriptjQuerySQLPHPScalaPerlGo LanguageHTMLCSSKotlinCS SubjectsMathematicsOperating SystemDBMSComputer NetworksComputer Organization and ArchitectureTheory of ComputationCompiler DesignDigital LogicSoftware EngineeringGATEGATE Computer Science NotesLast Minute NotesGATE CS Solved PapersGATE CS Original Papers and Official KeysGATE 2021 DatesGATE CS 2021 SyllabusImportant Topics for GATE CSWeb TechnologiesHTMLCSSJavaScriptAngularJSReactJSNodeJSBootstrapjQueryPHPSoftware DesignsSoftware Design PatternsSystem Design TutorialSchool LearningSchool ProgrammingMathematicsNumber SystemAlgebraTrigonometryStatisticsProbabilityGeometryMensurationCalculusMaths Notes (Class 8-12)Class 8 NotesClass 9 NotesClass 10 NotesClass 11 NotesClass 12 NotesNCERT SolutionsClass 8 Maths SolutionClass 9 Maths SolutionClass 10 Maths SolutionClass 11 Maths SolutionClass 12 Maths SolutionRD Sharma SolutionsClass 8 Maths SolutionClass 9 Maths SolutionClass 10 Maths SolutionClass 11 Maths SolutionClass 12 Maths SolutionPhysics Notes (Class 8-11)Class 8 NotesClass 9 NotesClass 10 NotesClass 11 NotesISRO CSISRO CS Solved PapersISRO CS Original Papers and Official KeysISRO CS Syllabus for Scientist/Engineer ExamUGC NET CSUGC NET CS Notes Paper IIUGC NET CS Notes Paper IIIUGC NET CS Solved PapersStudentCampus Ambassador ProgramSchool Ambassador ProgramProjectGeek of the MonthCampus Geek of the MonthPlacement CourseCompetititve ProgrammingTestimonialsGeek on the TopCareersInternshipJobsApply for JobsPost a JobCourses WriteCome write articles for us and get featuredPracticeLearn and code with the best industry expertsPremiumGet access to ad-free content, doubt assistance and more!JobsCome and find your dream job with usGeeks DigestQuizzesGeeks CampusGblog ArticlesIDECampus Mantri HomeSaved VideosCoursesGBlogPuzzlesWhat's New ? Change Language Data StructuresAlgorithmsInterview PreparationTopic-wise PracticeC++JavaPythonCompetitive ProgrammingMachine LearningWeb DevelopmentPuzzlesProject IdeasGFG School Related Articles ▲Related ArticlesReflection Array Class in Javautil.Arrays vs reflect.Array in Java with ExamplesJava.util.Arrays.equals() in Java with ExamplesHow to compare two arrays in Java?Final arrays in JavaJagged Array in JavaReturning Multiple values in JavaArrays in JavaHow to add an element to an Array in Java?How to determine length or size of an Array in Java?length vs length() in JavaSplit() String method in Java with examplesJava String trim() method with ExampleTrim (Remove leading and trailing spaces) a string in JavaJava Program to Count the Number of Lines, Words, Characters, and Paragraphs in a Text FileCheck if a String Contains Only Alphabets in Java Using Lambda ExpressionRemove elements from a List that satisfy given predicate in JavaCheck if a String Contains Only Alphabets in Java using ASCII ValuesCheck if a String Contains only Alphabets in Java using RegexHow to check if string contains only digits in JavaCheck if given string contains all the digitsGiven a string, find its first non-repeating characterFirst non-repeating character using one traversal of string | Set 2Missing characters to make a string PangramCheck if a string is Pangrammatic LipogramArrays.sort() in Java with examplesFor-each loop in JavaReverse a string in JavaTable of ContentsReflection Array Class in Javautil.Arrays vs reflect.Array in Java with ExamplesJava.util.Arrays.equals() in Java with ExamplesHow to compare two arrays in Java?Final arrays in JavaJagged Array in JavaReturning Multiple values in JavaArrays in JavaHow to add an element to an Array in Java?How to determine length or size of an Array in Java?length vs length() in JavaSplit() String method in Java with examplesJava String trim() method with ExampleTrim (Remove leading and trailing spaces) a string in JavaJava Program to Count the Number of Lines, Words, Characters, and Paragraphs in a Text FileCheck if a String Contains Only Alphabets in Java Using Lambda ExpressionRemove elements from a List that satisfy given predicate in JavaCheck if a String Contains Only Alphabets in Java using ASCII ValuesCheck if a String Contains only Alphabets in Java using RegexHow to check if string contains only digits in JavaCheck if given string contains all the digitsGiven a string, find its first non-repeating characterFirst non-repeating character using one traversal of string | Set 2Missing characters to make a string PangramCheck if a string is Pangrammatic LipogramArrays.sort() in Java with examplesFor-each loop in JavaReverse a string in JavaImprove Article Save Article Like Article Reflection Array Class in JavaDifficulty Level : HardLast Updated : 10 Nov, 2021The Array class in java.lang.reflect package is a part of the Java Reflection. This class provides static methods to create and access Java arrays dynamically. It is a final class, which means it can’t be instantiated or changed. Only the methods of this class can be used by the class name itself.The java.util.Arrays class contains various methods for manipulating arrays (such as sorting and searching), whereas this java.lang.reflect.Array class provides static methods to create and access Java arrays dynamically. This Array class keeps the array to be type-safe.Class Hierarchy java.lang.Object ↳ java.lang.reflect.ArrayClass Declaration public final class Array extends ObjectSyntax to use ArrayArray.<function name>;Methods in Reflection Array Class in JavaS. No.MethodDescription1Object get(Object array, int index)This method returns the value of the indexed component in the specified array object.2boolean getBoolean(Object array, int index)This method returns the value of the indexed component in the specified array object as a boolean.3byte getByte(Object array, int index)This method returns the value of the indexed component in the specified array object as a byte.4char getChar(Object array, int index)This method returns the value of the indexed component in the specified array object as a char.5double getDouble(Object array, int index)This method returns the value of the indexed component in the specified array object as a double.6float getFloat(Object array, int index)This method returns the value of the indexed component in the specified array object as a float.7int getInt(Object array, int index)This method returns the value of the indexed component in the specified array object as an int.8int getLength(Object array)This method returns the length of the specified array object as an int.9long getLong(Object array, int index)This method returns the value of the indexed component in the specified array object as a long.10short getShort(Object array, int index)This method returns the value of the indexed component in the specified array object as a short.11Object newInstance(Class<E> componentType, int length)This method creates a new array with the specified component type and length.12Object newInstance(Class<E> componentType, int… dimensions)This method creates a new array with the specified component type and dimensions.13void set(Object array, int index, Object value)This method sets the value of the indexed component of the specified array object to the specified new value.14void setBoolean(Object array, int index, boolean z)This method sets the value of the indexed component of the specified array object to the specified boolean value.15void setByte(Object array, int index, byte b)This method sets the value of the indexed component of the specified array object to the specified byte value.16void setChar(Object array, int index, char c)This method sets the value of the indexed component of the specified array object to the specified char value.17void setDouble(Object array, int index, double d)This method sets the value of the indexed component of the specified array object to the specified double value.18void setFloat(Object array, int index, float f)This method sets the value of the indexed component of the specified array object to the specified float value.19void setInt(Object array, int index, int i)This method sets the value of the indexed component of the specified array object to the specified int value.20void setLong(Object array, int index, long l)This method sets the value of the indexed component of the specified array object to the specified long value.21void setShort(Object array, int index, short s)This method sets the value of the indexed component of the specified array object to the specified short value. How to create an Array using java.lang.util.reflect.Array Class?Creating an array using reflect.Array Class is different from the usual way. The process to create such an array is as follows: Get the size of the array to be createdTo create an array (say of X class), use the newInstance() method of Array class to pass the X class as the type of the array, and the size of the array, as parameters.Syntax: X[] arrayOfXType = (X[]) Array.newInstance(X.class, size);Where X is to be replaced by the type of the array like int, double, etc.This method returns an Object array of the given size, then cast into the required X[] type.Hence the required array of type X has been created.Below is an example to create an integer array of size 5, using the Array class:Example: To create an integer array of size 5: Java// Java code to create an integer array of size 5,// using the Array class: import java.lang.reflect.Array;import java.util.Arrays; public class GfG { public static void main(String[] args) { // Get the size of the array int sizeOfArray = 5; // Create an integer array // using reflect.Array class // This is done using the newInstance() method int[] intArray = (int[])Array.newInstance( int.class, sizeOfArray); // Printing the Array content System.out.println(Arrays.toString(intArray)); }}Output[0, 0, 0, 0, 0]How to add elements in an Array using java.lang.util.reflect.Array Class?Like creating an array, adding elements in the array using reflect.Array Class is also different from the usual way. The process to add elements in such an array is as follows: Get the value of the element to be added.Get the index at which the element is to be added.To add an element in an array (say of X class), use the setX() method of Array class, where X is to be replaced by the type of the array such as setInt(), setDouble(), etc. This method takes the X[] as the first parameter, the index at which the element is added as the second parameter, and the element as the third parameter in the below syntax.Syntax: Array.setX(X[], indexOfInsertion, elementToBeInserted);Where X is to be replaced by the type of the array like int, double, etc.This method inserts the element at the specified index in this array.Hence the required element has been inserted into the array.Below is an example to add an element into an integer array, using the Array class:Example: To add an element into an integer array: Java// Java code to add an element into an integer array,// using the Array class: import java.lang.reflect.Array;import java.util.Arrays; public class GfG { public static void main(String[] args) { // Get the size of the array int sizeOfArray = 3; // Create an integer array // using reflect.Array class // This is done using the newInstance() method int[] intArray = (int[])Array.newInstance( int.class, sizeOfArray); // Add elements into the array // This is done using the setInt() method Array.setInt(intArray, 0, 10); Array.setInt(intArray, 1, 20); Array.setInt(intArray, 2, 30); // Printing the Array content System.out.println(Arrays.toString(intArray)); }}Output[10, 20, 30]How to retrieve elements in an Array using java.lang.util.reflect.Array Class?Like creating an array, retrieving elements in the array using reflect.Array Class is also different from the usual way. The process to retrieve elements in such an array is as follows: Get the index at which the element is to be retrieved.To retrieve an element in an array (say of X class), use the getX() method of Array class, where X is to be replaced by the type of the array such as getInt(), getDouble(), etc. This method takes the X[] as the first parameter and the index at which the element is retrieved as the second parameter in the syntax below.Syntax: Array.getX(X[], indexOfRetrieval);Where X is to be replaced by the type of the array like int, double, etc.This method retrieves the element at the specified index from this array.Hence the required element has been retrieved from the array.Below is an example to retrieve an element from an integer array using the Array class:Example: To retrieve an element from an integer array: Java// Java code to retrieve an element from an integer array,// using the Array class: import java.lang.reflect.Array;import java.util.Arrays; public class GfG { public static void main(String[] args) { // Get the size of the array int sizeOfArray = 3; // Create an integer array // using reflect.Array class // This is done using the newInstance() method int[] intArray = (int[])Array.newInstance( int.class, sizeOfArray); // Add elements from the array // This is done using the getInt() method Array.setInt(intArray, 0, 10); Array.setInt(intArray, 1, 20); Array.setInt(intArray, 2, 30); // Printing the Array content System.out.println(Arrays.toString(intArray)); // Retrieve elements from the array // This is done using the getInt() method System.out.println("Element at index 0: " + Array.getInt(intArray, 0)); System.out.println("Element at index 1: " + Array.getInt(intArray, 1)); System.out.println("Element at index 2: " + Array.getInt(intArray, 2)); }}Output[10, 20, 30] Element at index 0: 10 Element at index 1: 20 Element at index 2: 30Attention reader! Don’t stop learning now. Get hold of all the important Java Foundation and Collections concepts with the Fundamentals of Java and Java Collections Course at a student-friendly price and become industry ready. To complete your preparation from learning a language to DS Algo and many more, please refer Complete Interview Preparation Course.My Personal Notes arrow_drop_upSave LikeNext util.Arrays vs reflect.Array in Java with ExamplesRecommended ArticlesPage :How to call private method from another class in Java with help of Reflection API?17, Jun 19JavaFX | Reflection Class17, Aug 18Reflection in Java24, Mar 16How to Access Private Field and Method Using Reflection in Java?02, Feb 21How to Invoke Method by Name in Java Dynamically Using Reflection?08, Feb 21How to prevent Singleton Pattern from Reflection, Serialization and Cloning?18, May 17Java.lang.Class class in Java | Set 130, Mar 17Java.lang.Class class in Java | Set 203, Apr 17Implement Pair Class with Unit Class in Java using JavaTuples20, Sep 18Implement Triplet Class with Pair Class in Java using JavaTuples20, Sep 18Implement Quintet Class with Quartet Class in Java using JavaTuples20, Sep 18Implement Quartet Class with Triplet Class in Java using JavaTuples20, Sep 18Implement Octet Class from Septet Class in Java using JavaTuples24, Sep 18Implement Ennead Class from Octet Class in Java using JavaTuples24, Sep 18Implement Sextet Class from Quintet Class in Java using JavaTuples24, Sep 18Implement Septet Class from Sextet Class in Java using JavaTuples24, Sep 18Implement Decade Class from Ennead Class in Java using JavaTuples24, Sep 18Difference between Abstract Class and Concrete Class in Java11, Jan 19In Java, Can we call the main() method of a class from another class?28, Nov 19Java Program to Check if a Given Class is a Local Inner Class16, Nov 20Java Program to Check if a Given Class is an Anonymous Class16, Nov 20Java Program to Check if a Given Class is an Inner Class14, Dec 20Using predefined class name as Class or Variable name in Java26, May 17Java.util.TimeZone Class (Set-2) | Example On TimeZone Class25, Apr 18Article Contributed By :RishabhPrabhu@RishabhPrabhuVote for difficultyCurrent difficulty : HardEasy Normal Medium Hard ExpertImproved By :nishkarshgandhiArticle Tags :Java-Class and Objectjava-reflection-arrayJavaPractice Tags :Java-Class and ObjectJavaReport IssueWriting code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load CommentsWhat's NewJava Backend Development- LIVE ClassesView DetailsComplete Interview PreparationView DetailsSystem Design-Live Classes for Working ProfessionalsView DetailsMost popular in JavaObject Oriented Programming (OOPs) Concept in JavaArrayList in JavaHashMap in Java with ExamplesMultidimensional Arrays in JavaInitialize an ArrayList in JavaMore related articles in JavaHow to iterate any Map in JavaOverriding in JavaLinkedList in JavaInterfaces in JavaStack Class in Java× 5th Floor, A-118,Sector-136, Noida, Uttar Pradesh - 201305 feedback@geeksforgeeks.orgCompanyAbout UsCareersPrivacy PolicyContact UsCopyright PolicyLearnAlgorithmsData StructuresLanguagesCS SubjectsVideo TutorialsWeb DevelopmentWeb TutorialsHTMLCSSJavaScriptBootstrapContributeWrite an ArticleWrite Interview ExperienceInternshipsVideos@geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It ! Start Your Coding Journey Now!Login Register