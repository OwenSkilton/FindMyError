Remote Method Invocation in Java - GeeksforGeeksSkip to content TutorialsPractice DS & Algo.Must Do QuestionsDSA Topic-wiseDSA Company-wiseAlgorithmsAnalysis of AlgorithmsAsymptotic AnalysisWorst, Average and Best CasesAsymptotic NotationsLittle o and little omega notationsLower and Upper Bound TheoryAnalysis of LoopsSolving RecurrencesAmortized AnalysisWhat does 'Space Complexity' mean ?Pseudo-polynomial AlgorithmsPolynomial Time Approximation SchemeA Time Complexity QuestionSearching AlgorithmsSorting AlgorithmsGraph AlgorithmsPattern SearchingGeometric AlgorithmsMathematicalBitwise AlgorithmsRandomized AlgorithmsGreedy AlgorithmsDynamic ProgrammingDivide and ConquerBacktrackingBranch and BoundAll AlgorithmsData StructuresArraysLinked ListStackQueueBinary TreeBinary Search TreeHeapHashingGraphAdvanced Data StructureMatrixStringsAll Data StructuresInterview CornerCompany PreparationTop TopicsPractice Company QuestionsInterview ExperiencesExperienced InterviewsInternship InterviewsCompetititve ProgrammingDesign PatternsSystem Design TutorialMultiple Choice QuizzesLanguagesCC++JavaPythonC#JavaScriptjQuerySQLPHPScalaPerlGo LanguageHTMLCSSKotlinCS SubjectsMathematicsOperating SystemDBMSComputer NetworksComputer Organization and ArchitectureTheory of ComputationCompiler DesignDigital LogicSoftware EngineeringGATEGATE Computer Science NotesLast Minute NotesGATE CS Solved PapersGATE CS Original Papers and Official KeysGATE 2021 DatesGATE CS 2021 SyllabusImportant Topics for GATE CSWeb TechnologiesHTMLCSSJavaScriptAngularJSReactJSNodeJSBootstrapjQueryPHPSoftware DesignsSoftware Design PatternsSystem Design TutorialSchool LearningSchool ProgrammingMathematicsNumber SystemAlgebraTrigonometryStatisticsProbabilityGeometryMensurationCalculusMaths Notes (Class 8-12)Class 8 NotesClass 9 NotesClass 10 NotesClass 11 NotesClass 12 NotesNCERT SolutionsClass 8 Maths SolutionClass 9 Maths SolutionClass 10 Maths SolutionClass 11 Maths SolutionClass 12 Maths SolutionRD Sharma SolutionsClass 8 Maths SolutionClass 9 Maths SolutionClass 10 Maths SolutionClass 11 Maths SolutionClass 12 Maths SolutionPhysics Notes (Class 8-11)Class 8 NotesClass 9 NotesClass 10 NotesClass 11 NotesISRO CSISRO CS Solved PapersISRO CS Original Papers and Official KeysISRO CS Syllabus for Scientist/Engineer ExamUGC NET CSUGC NET CS Notes Paper IIUGC NET CS Notes Paper IIIUGC NET CS Solved PapersStudentCampus Ambassador ProgramSchool Ambassador ProgramProjectGeek of the MonthCampus Geek of the MonthPlacement CourseCompetititve ProgrammingTestimonialsGeek on the TopCareersInternshipJobsApply for JobsPost a JobCourses WriteCome write articles for us and get featuredPracticeLearn and code with the best industry expertsPremiumGet access to ad-free content, doubt assistance and more!JobsCome and find your dream job with usGeeks DigestQuizzesGeeks CampusGblog ArticlesIDECampus Mantri HomeSaved VideosCoursesGBlogPuzzlesWhat's New ? Change Language Data StructuresAlgorithmsInterview PreparationTopic-wise PracticeC++JavaPythonCompetitive ProgrammingMachine LearningWeb DevelopmentPuzzlesProject IdeasGFG School Related Articles â–²Related ArticlesRemote Method Invocation in JavaDefault Methods In Java 8Static method in Interface in JavaFunction Interface in Java with ExamplesAnnotations in JavaSerialization and Deserialization in Java with Exampletransient keyword in Javavolatile Keyword in Javastrictfp keyword in javaNative Keyword in JavaMarker interface in JavaFunctional Interfaces in JavaLambda Expressions in Java 8Stream In Javathrow and throws in JavaUser-defined Custom Exception in JavaInfinity or Exception in Java when divide by 0?Java Multiple Catch BlockChained Exceptions in JavaNull Pointer Exception In JavaOutput of Java program | Set 12(Exception Handling)Java | Exception Handling | Question 1Java | Exception Handling | Question 2Java | Exception Handling | Question 3Java | Exception Handling | Question 4Arrays in JavaSplit() String method in Java with examplesArrays.sort() in Java with examplesFor-each loop in JavaReverse a string in JavaTable of ContentsRemote Method Invocation in JavaDefault Methods In Java 8Static method in Interface in JavaFunction Interface in Java with ExamplesAnnotations in JavaSerialization and Deserialization in Java with Exampletransient keyword in Javavolatile Keyword in Javastrictfp keyword in javaNative Keyword in JavaMarker interface in JavaFunctional Interfaces in JavaLambda Expressions in Java 8Stream In Javathrow and throws in JavaUser-defined Custom Exception in JavaInfinity or Exception in Java when divide by 0?Java Multiple Catch BlockChained Exceptions in JavaNull Pointer Exception In JavaOutput of Java program | Set 12(Exception Handling)Java | Exception Handling | Question 1Java | Exception Handling | Question 2Java | Exception Handling | Question 3Java | Exception Handling | Question 4Arrays in JavaSplit() String method in Java with examplesArrays.sort() in Java with examplesFor-each loop in JavaReverse a string in JavaImprove Article Save Article Like Article Remote Method Invocation in JavaDifficulty Level : ExpertLast Updated : 29 Oct, 2021Remote Method Invocation (RMI) is an API that allows an object to invoke a method on an object that exists in another address space, which could be on the same machine or on a remote machine. Through RMI, an object running in a JVM present on a computer (Client-side) can invoke methods on an object present in another JVM (Server-side). RMI creates a public remote server object that enables client and server-side communications through simple method calls on the server object.Stub Object: The stub object on the client machine builds an information block and sends this information to the server. The block consists of An identifier of the remote object to be usedMethod name which is to be invokedParameters to the remote JVMSkeleton Object: The skeleton object passes the request from the stub object to the remote object. It performs the following tasks It calls the desired method on the real object present on the server.It forwards the parameters received from the stub object to the method.Working of RMIThe communication between client and server is handled by using two intermediate objects: Stub object (on client side) and Skeleton object (on server-side) as also can be depicted from below media as follows: These are the steps to be followed sequentially to implement Interface as defined below as follows:Defining a remote interfaceImplementing the remote interfaceCreating Stub and Skeleton objects from the implementation class using rmic (RMI compiler)Start the rmiregistryCreate and execute the server application programCreate and execute the client application program.Step 1: Defining the remote interface The first thing to do is to create an interface that will provide the description of the methods that can be invoked by remote clients. This interface should extend the Remote interface and the method prototype within the interface should throw the RemoteException.Example:Java// Creating a Search interfaceimport java.rmi.*;public interface Search extends Remote{ // Declaring the method prototype public String query(String search) throws RemoteException;}Step 2: Implementing the remote interfaceThe next step is to implement the remote interface. To implement the remote interface, the class should extend to UnicastRemoteObject class of java.rmi package. Also, a default constructor needs to be created to throw the java.rmi.RemoteException from its parent constructor in class.Java// Java program to implement the Search interfaceimport java.rmi.*;import java.rmi.server.*;public class SearchQuery extends UnicastRemoteObject implements Search{ // Default constructor to throw RemoteException // from its parent constructor SearchQuery() throws RemoteException { super(); } // Implementation of the query interface public String query(String search) throws RemoteException { String result; if (search.equals("Reflection in Java")) result = "Found"; else result = "Not Found"; return result; }}Step 3: Creating Stub and Skeleton objects from the implementation class using rmic The rmic tool is used to invoke the rmi compiler that creates the Stub and Skeleton objects. Its prototype is rmic classname. For above program the following command need to be executed at the command prompt rmic SearchQuery.Step 4: Start the rmiregistry Start the registry service by issuing the following command at the command prompt start rmiregistryStep 5: Create and execute the server application program The next step is to create the server application program and execute it on a separate command prompt. The server program uses createRegistry method of LocateRegistry class to create rmiregistry within the server JVM with the port number passed as an argument.The rebind method of Naming class is used to bind the remote object to the new name.Java// Java program for server applicationimport java.rmi.*;import java.rmi.registry.*;public class SearchServer{ public static void main(String args[]) { try { // Create an object of the interface // implementation class Search obj = new SearchQuery(); // rmiregistry within the server JVM with // port number 1900 LocateRegistry.createRegistry(1900); // Binds the remote object by the name // geeksforgeeks Naming.rebind("rmi://localhost:1900"+ "/geeksforgeeks",obj); } catch(Exception ae) { System.out.println(ae); } }}Step 6: Create and execute the client application program The last step is to create the client application program and execute it on a separate command prompt . The lookup method of the Naming class is used to get the reference of the Stub object.Java// Java program for client applicationimport java.rmi.*;public class ClientRequest{ public static void main(String args[]) { String answer,value="Reflection in Java"; try { // lookup method to find reference of remote object Search access = (Search)Naming.lookup("rmi://localhost:1900"+ "/geeksforgeeks"); answer = access.query(value); System.out.println("Article on " + value + " " + answer+" at GeeksforGeeks"); } catch(Exception ae) { System.out.println(ae); } }}Note: The above client and server program is executed on the same machine so localhost is used. In order to access the remote object from another machine, localhost is to be replaced with the IP address where the remote object is present. Important Observations: RMI is a pure java solution to Remote Procedure Calls (RPC) and is used to create the distributed applications in java.Stub and Skeleton objects are used for communication between the client and server-side.This article is contributed by Aakash Ojha. If you like GeeksforGeeks and would like to contribute, you can also write an article and mail your article to review-team@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks. Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.Attention reader! Donâ€™t stop learning now. Get hold of all the important Java Foundation and Collections concepts with the Fundamentals of Java and Java Collections Course at a student-friendly price and become industry ready. To complete your preparation from learning a language to DS Algo and many more, please refer Complete Interview Preparation Course.My Personal Notes arrow_drop_upSave LikeNext Default Methods In Java 8Recommended ArticlesPage :Calculator Using RMI(Remote Method Invocation) in Java02, Sep 20Recursive Constructor Invocation in Java20, Sep 21Difference Between java.sql.Time, java.sql.Timestamp and java.sql.Date in Java07, Apr 21How to Convert java.sql.Date to java.util.Date in Java?02, Feb 21Different Ways to Convert java.util.Date to java.time.LocalDate in Java05, Jan 21How to Convert java.util.Date to java.sql.Date in Java?23, Mar 21Java.lang.string.replace() method in Java28, Aug 17Java.util.ArrayList.add() Method in Java28, Sep 17Java.util.ArrayList.addall() method in Java28, Sep 17Java.util.BitSet.set() method in Java09, Oct 17Java 8 | ArrayDeque removeIf() method in Java with Examples18, Sep 18Java lang.Long.lowestOneBit() method in Java with Examples16, May 18Java lang.Long.numberOfTrailingZeros() method in Java with Examples17, May 18Java lang.Long.numberOfLeadingZeros() method in Java with Examples21, May 18Java lang.Long.highestOneBit() method in Java with Examples21, May 18Java lang.Long.byteValue() method in Java with Examples23, May 18Java lang.Long.reverse() method in Java with Examples24, May 18Java.math.BigInteger.modInverse() method in Java19, Jun 18Java.math.BigInteger.probablePrime() method in Java19, Jun 18Java Clock tickMinutes() method in Java with Examples24, Aug 18Java Clock withZone() method in Java with Examples24, Aug 18Java.lang.Short toString() method in Java with Examples17, Jun 19java.lang.reflect.Method Class in Java06, Mar 21Java.util.Collections.rotate() Method in Java with Examples02, Jun 17Article Contributed By :GeeksforGeeksVote for difficultyCurrent difficulty : ExpertEasy Normal Medium Hard ExpertImproved By :solankimayankArticle Tags :JavaPractice Tags :JavaReport IssueWriting code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load CommentsWhat's NewJava Backend Development- LIVE ClassesView DetailsComplete Interview PreparationView DetailsSystem Design-Live Classes for Working ProfessionalsView DetailsMost popular in JavaObject Oriented Programming (OOPs) Concept in JavaArrayList in JavaHashMap in Java with ExamplesMultidimensional Arrays in JavaInitialize an ArrayList in JavaMore related articles in JavaHow to iterate any Map in JavaHow to add an element to an Array in Java?Overriding in JavaInterfaces in JavaLinkedList in JavaÃ— 5th Floor, A-118,Sector-136, Noida, Uttar Pradesh - 201305 feedback@geeksforgeeks.orgCompanyAbout UsCareersPrivacy PolicyContact UsCopyright PolicyLearnAlgorithmsData StructuresLanguagesCS SubjectsVideo TutorialsWeb DevelopmentWeb TutorialsHTMLCSSJavaScriptBootstrapContributeWrite an ArticleWrite Interview ExperienceInternshipsVideos@geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It ! Start Your Coding Journey Now!Login Register