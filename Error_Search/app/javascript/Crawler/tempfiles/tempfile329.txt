Why Java is not a purely Object-Oriented Language? - GeeksforGeeksSkip to content TutorialsPractice DS & Algo.Must Do QuestionsDSA Topic-wiseDSA Company-wiseAlgorithmsAnalysis of AlgorithmsAsymptotic AnalysisWorst, Average and Best CasesAsymptotic NotationsLittle o and little omega notationsLower and Upper Bound TheoryAnalysis of LoopsSolving RecurrencesAmortized AnalysisWhat does 'Space Complexity' mean ?Pseudo-polynomial AlgorithmsPolynomial Time Approximation SchemeA Time Complexity QuestionSearching AlgorithmsSorting AlgorithmsGraph AlgorithmsPattern SearchingGeometric AlgorithmsMathematicalBitwise AlgorithmsRandomized AlgorithmsGreedy AlgorithmsDynamic ProgrammingDivide and ConquerBacktrackingBranch and BoundAll AlgorithmsData StructuresArraysLinked ListStackQueueBinary TreeBinary Search TreeHeapHashingGraphAdvanced Data StructureMatrixStringsAll Data StructuresInterview CornerCompany PreparationTop TopicsPractice Company QuestionsInterview ExperiencesExperienced InterviewsInternship InterviewsCompetititve ProgrammingDesign PatternsSystem Design TutorialMultiple Choice QuizzesLanguagesCC++JavaPythonC#JavaScriptjQuerySQLPHPScalaPerlGo LanguageHTMLCSSKotlinCS SubjectsMathematicsOperating SystemDBMSComputer NetworksComputer Organization and ArchitectureTheory of ComputationCompiler DesignDigital LogicSoftware EngineeringGATEGATE Computer Science NotesLast Minute NotesGATE CS Solved PapersGATE CS Original Papers and Official KeysGATE 2021 DatesGATE CS 2021 SyllabusImportant Topics for GATE CSWeb TechnologiesHTMLCSSJavaScriptAngularJSReactJSNodeJSBootstrapjQueryPHPSoftware DesignsSoftware Design PatternsSystem Design TutorialSchool LearningSchool ProgrammingMathematicsNumber SystemAlgebraTrigonometryStatisticsProbabilityGeometryMensurationCalculusMaths Notes (Class 8-12)Class 8 NotesClass 9 NotesClass 10 NotesClass 11 NotesClass 12 NotesNCERT SolutionsClass 8 Maths SolutionClass 9 Maths SolutionClass 10 Maths SolutionClass 11 Maths SolutionClass 12 Maths SolutionRD Sharma SolutionsClass 8 Maths SolutionClass 9 Maths SolutionClass 10 Maths SolutionClass 11 Maths SolutionClass 12 Maths SolutionPhysics Notes (Class 8-11)Class 8 NotesClass 9 NotesClass 10 NotesClass 11 NotesISRO CSISRO CS Solved PapersISRO CS Original Papers and Official KeysISRO CS Syllabus for Scientist/Engineer ExamUGC NET CSUGC NET CS Notes Paper IIUGC NET CS Notes Paper IIIUGC NET CS Solved PapersStudentCampus Ambassador ProgramSchool Ambassador ProgramProjectGeek of the MonthCampus Geek of the MonthPlacement CourseCompetititve ProgrammingTestimonialsGeek on the TopCareersInternshipJobsApply for JobsPost a JobCourses WriteCome write articles for us and get featuredPracticeLearn and code with the best industry expertsPremiumGet access to ad-free content, doubt assistance and more!JobsCome and find your dream job with usGeeks DigestQuizzesGeeks CampusGblog ArticlesIDECampus Mantri HomeSaved VideosCoursesGBlogPuzzlesWhat's New ? Change Language Data StructuresAlgorithmsInterview PreparationTopic-wise PracticeC++JavaPythonCompetitive ProgrammingMachine LearningWeb DevelopmentPuzzlesProject IdeasGFG School Related Articles ▲Related ArticlesOverriding toString() Method in JavaInstance Variable Hiding in JavaStatic Blocks in JavaThe Initializer Block in JavaInstance Initialization Block (IIB) in JavaStatic vs Dynamic Binding in JavaWhy Java is not a purely Object-Oriented Language?Understanding Classes and Objects in JavaAssigning values to static final variables in JavaCovariant Return Types in JavaObject Class in JavaStatic class in JavaFlexible nature of java.lang.ObjectOverriding equals method in JavaArrays in JavaSplit() String method in Java with examplesArrays.sort() in Java with examplesFor-each loop in JavaReverse a string in JavaHow to iterate any Map in JavaObject Oriented Programming (OOPs) Concept in JavaHashMap in Java with ExamplesInitialize an ArrayList in JavaMultidimensional Arrays in JavaStack Class in JavaArrayList in JavaHow to add an element to an Array in Java?Overriding in JavaCollections.sort() in Java with ExamplesLinkedList in JavaTable of ContentsOverriding toString() Method in JavaInstance Variable Hiding in JavaStatic Blocks in JavaThe Initializer Block in JavaInstance Initialization Block (IIB) in JavaStatic vs Dynamic Binding in JavaWhy Java is not a purely Object-Oriented Language?Understanding Classes and Objects in JavaAssigning values to static final variables in JavaCovariant Return Types in JavaObject Class in JavaStatic class in JavaFlexible nature of java.lang.ObjectOverriding equals method in JavaArrays in JavaSplit() String method in Java with examplesArrays.sort() in Java with examplesFor-each loop in JavaReverse a string in JavaHow to iterate any Map in JavaObject Oriented Programming (OOPs) Concept in JavaHashMap in Java with ExamplesInitialize an ArrayList in JavaMultidimensional Arrays in JavaStack Class in JavaArrayList in JavaHow to add an element to an Array in Java?Overriding in JavaCollections.sort() in Java with ExamplesLinkedList in JavaImprove Article Save Article Like Article Why Java is not a purely Object-Oriented Language?Difficulty Level : EasyLast Updated : 30 May, 2017Pure Object Oriented Language or Complete Object Oriented Language are Fully Object Oriented Language which supports or have features which treats everything inside program as objects. It doesn’t support primitive datatype(like int, char, float, bool, etc.). There are seven qualities to be satisfied for a programming language to be pure Object Oriented. They are:Encapsulation/Data HidingInheritancePolymorphismAbstractionAll predefined types are objectsAll user defined types are objectsAll operations performed on objects must be only through methods exposed at the objects.Example: SmalltalkWhy Java is not a Pure Object Oriented Language?Java supports property 1, 2, 3, 4 and 6 but fails to support property 5 and 7 given above. Java language is not a Pure Object Oriented Language as it contain these properties:Primitive Data Type ex. int, long, bool, float, char, etc as Objects: Smalltalk is a “pure” object-oriented programming language unlike Java and C++ as there is no difference between values which are objects and values which are primitive types. In Smalltalk, primitive values such as integers, booleans and characters are also objects.In Java, we have predefined types as non-objects (primitive types).int a = 5; System.out.print(a); The static keyword: When we declares a class as static then it can be used without the use of an object in Java. If we are using static function or static variable then we can’t call that function or variable by using dot(.) or class object defying object oriented feature.Wrapper Class: Wrapper class provides the mechanism to convert primitive into object and object into primitive. In Java, you can use Integer, Float etc. instead of int, float etc. We can communicate with objects without calling their methods. ex. using arithmetic operators.String s1 = "ABC" + "A" ; Even using Wrapper classes does not make Java a pure OOP language, as internally it will use the operations like Unboxing and Autoboxing. So if you create instead of int Integer and do any mathematical operation on it, under the hoods Java is going to use primitive type int only.public class BoxingExample { public static void main(String[] args) { Integer i = new Integer(10); Integer j = new Integer(20); Integer k = new Integer(i.intValue() + j.intValue()); System.out.println("Output: "+ k); }}In the above code, there are 2 problems where Java fails to work as pure OOP:While creating Integer class you are using primitive type “int” i.e. numbers 10, 20.While doing addition Java is using primitive type “int”.Related Article: Why C++ is partially Object Oriented Language?This article is contributed by Sangeet Anand. If you like GeeksforGeeks and would like to contribute, you can also write an article using contribute.geeksforgeeks.org or mail your article to contribute@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.Attention reader! Don’t stop learning now. Get hold of all the important Java Foundation and Collections concepts with the Fundamentals of Java and Java Collections Course at a student-friendly price and become industry ready. To complete your preparation from learning a language to DS Algo and many more, please refer Complete Interview Preparation Course.My Personal Notes arrow_drop_upSave LikePreviousStatic vs Dynamic Binding in JavaNext Understanding Classes and Objects in JavaRecommended ArticlesPage :Why Java Language is Slower Than CPP for Competitive Programming?18, Dec 20Why Constructors are not inherited in Java?14, Aug 17Why a Constructor can not be final, static or abstract in Java?06, Nov 20Why NULL is Not Allowed in Java TreeSet?16, Dec 20Why java.lang.VerifyError Occurs in Java and How to Solve this?19, Feb 21Why to use char[] array over a string for storing passwords in Java?01, Feb 17Why Kotlin will replace Java for Android App Development10, Dec 17Why is Java 'write once and run anywhere'?24, May 19Why can't static methods be abstract in Java?20, Nov 19Why You Should Switch to Kotlin from Java to Develop Android Apps?01, Jun 20Why non-static variable cannot be referenced from a static method in Java26, Jun 20Why Java Interfaces Cannot Have Constructor But Abstract Classes Can Have?30, Aug 20Why Does BufferedReader Throw IOException in Java?05, Jan 21Why Java Collections Cannot Directly Store Primitives Types?18, Jan 21Why Enum Class Can Have a Private Constructor Only in Java?27, Jan 21Why You Need to Close the Java Streams in Finally Block?01, Feb 21Why We Need Collection Framework in Java?04, Jun 21Difference between Java and C language03, Jan 19Multi-Language Programming - Java Process Class, JNI and IO09, Jul 21Disadvantages of Java Language08, Jan 19The complete History of Java Programming Language02, May 19Why to Override equals(Object) and hashCode() method ?06, Apr 17Why is Scanner skipping nextLine() after use of other next functions?26, Aug 19Why Thread.stop(), Thread.suspend(), and Thread.resume() Methods are Deprecated After JDK 1.1 Version?11, Jul 21Article Contributed By :GeeksforGeeksVote for difficultyCurrent difficulty : EasyEasy Normal Medium Hard ExpertArticle Tags :JavaPractice Tags :JavaReport IssueWriting code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load CommentsWhat's NewJava Backend Development- LIVE ClassesView DetailsComplete Interview PreparationView DetailsSystem Design-Live Classes for Working ProfessionalsView DetailsMost popular in JavaInterfaces in JavaCollections in JavaMath pow() method in Java with ExampleClasses and Objects in JavaSet in JavaMore related articles in JavaSingleton Class in JavaInitializing a List in JavaJava Programming ExamplesInheritance in JavaHow to determine length or size of an Array in Java?× 5th Floor, A-118,Sector-136, Noida, Uttar Pradesh - 201305 feedback@geeksforgeeks.orgCompanyAbout UsCareersPrivacy PolicyContact UsCopyright PolicyLearnAlgorithmsData StructuresLanguagesCS SubjectsVideo TutorialsWeb DevelopmentWeb TutorialsHTMLCSSJavaScriptBootstrapContributeWrite an ArticleWrite Interview ExperienceInternshipsVideos@geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It ! Start Your Coding Journey Now!Login Register