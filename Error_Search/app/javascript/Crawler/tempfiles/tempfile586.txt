AbstractQueue in Java with Examples - GeeksforGeeksSkip to content TutorialsPractice DS & Algo.Must Do QuestionsDSA Topic-wiseDSA Company-wiseAlgorithmsAnalysis of AlgorithmsAsymptotic AnalysisWorst, Average and Best CasesAsymptotic NotationsLittle o and little omega notationsLower and Upper Bound TheoryAnalysis of LoopsSolving RecurrencesAmortized AnalysisWhat does 'Space Complexity' mean ?Pseudo-polynomial AlgorithmsPolynomial Time Approximation SchemeA Time Complexity QuestionSearching AlgorithmsSorting AlgorithmsGraph AlgorithmsPattern SearchingGeometric AlgorithmsMathematicalBitwise AlgorithmsRandomized AlgorithmsGreedy AlgorithmsDynamic ProgrammingDivide and ConquerBacktrackingBranch and BoundAll AlgorithmsData StructuresArraysLinked ListStackQueueBinary TreeBinary Search TreeHeapHashingGraphAdvanced Data StructureMatrixStringsAll Data StructuresInterview CornerCompany PreparationTop TopicsPractice Company QuestionsInterview ExperiencesExperienced InterviewsInternship InterviewsCompetititve ProgrammingDesign PatternsSystem Design TutorialMultiple Choice QuizzesLanguagesCC++JavaPythonC#JavaScriptjQuerySQLPHPScalaPerlGo LanguageHTMLCSSKotlinCS SubjectsMathematicsOperating SystemDBMSComputer NetworksComputer Organization and ArchitectureTheory of ComputationCompiler DesignDigital LogicSoftware EngineeringGATEGATE Computer Science NotesLast Minute NotesGATE CS Solved PapersGATE CS Original Papers and Official KeysGATE 2021 DatesGATE CS 2021 SyllabusImportant Topics for GATE CSWeb TechnologiesHTMLCSSJavaScriptAngularJSReactJSNodeJSBootstrapjQueryPHPSoftware DesignsSoftware Design PatternsSystem Design TutorialSchool LearningSchool ProgrammingMathematicsNumber SystemAlgebraTrigonometryStatisticsProbabilityGeometryMensurationCalculusMaths Notes (Class 8-12)Class 8 NotesClass 9 NotesClass 10 NotesClass 11 NotesClass 12 NotesNCERT SolutionsClass 8 Maths SolutionClass 9 Maths SolutionClass 10 Maths SolutionClass 11 Maths SolutionClass 12 Maths SolutionRD Sharma SolutionsClass 8 Maths SolutionClass 9 Maths SolutionClass 10 Maths SolutionClass 11 Maths SolutionClass 12 Maths SolutionPhysics Notes (Class 8-11)Class 8 NotesClass 9 NotesClass 10 NotesClass 11 NotesISRO CSISRO CS Solved PapersISRO CS Original Papers and Official KeysISRO CS Syllabus for Scientist/Engineer ExamUGC NET CSUGC NET CS Notes Paper IIUGC NET CS Notes Paper IIIUGC NET CS Solved PapersStudentCampus Ambassador ProgramSchool Ambassador ProgramProjectGeek of the MonthCampus Geek of the MonthPlacement CourseCompetititve ProgrammingTestimonialsGeek on the TopCareersInternshipJobsApply for JobsPost a JobCourses WriteCome write articles for us and get featuredPracticeLearn and code with the best industry expertsPremiumGet access to ad-free content, doubt assistance and more!JobsCome and find your dream job with usGeeks DigestQuizzesGeeks CampusGblog ArticlesIDECampus Mantri HomeSaved VideosCoursesGBlogPuzzlesWhat's New ? Change Language Data StructuresAlgorithmsInterview PreparationTopic-wise PracticeC++JavaPythonCompetitive ProgrammingMachine LearningWeb DevelopmentPuzzlesProject IdeasGFG School Related Articles ▲Related ArticlesJava Collection| Difference between Synchronized ArrayList and CopyOnWriteArrayListAbstractQueue in Java with ExamplesArrayBlockingQueue Class in JavaConcurrentLinkedQueue in Java with ExamplesClass getDeclaringClass() method in Java with ExamplesLinkedBlockingQueue remove() method in JavaLinkedBlockingQueue take() Method in Java with ExamplesLinkedBlockingQueue Class in JavaLinkedTransferQueue in Java with ExamplesPriorityBlockingQueue Class in JavaStack Class in JavaQueue Interface In JavaPriorityQueue in JavaImplement PriorityQueue through Comparator in JavaPriorityQueue comparator() Method in JavaInteresting facts about null in JavaUsing _ (underscore) as Variable Name in JavaCurrying Functions in Java with ExamplesUsing underscore in Numeric Literals in JavaBinary Search in JavaSorting in JavaArrays.sort() in Java with examplesCollections.sort() in Java with ExamplesComparator Interface in Java with ExamplesComparable vs Comparator in JavaArrays in JavaSplit() String method in Java with examplesFor-each loop in JavaReverse a string in JavaTable of ContentsJava Collection| Difference between Synchronized ArrayList and CopyOnWriteArrayListAbstractQueue in Java with ExamplesArrayBlockingQueue Class in JavaConcurrentLinkedQueue in Java with ExamplesClass getDeclaringClass() method in Java with ExamplesLinkedBlockingQueue remove() method in JavaLinkedBlockingQueue take() Method in Java with ExamplesLinkedBlockingQueue Class in JavaLinkedTransferQueue in Java with ExamplesPriorityBlockingQueue Class in JavaStack Class in JavaQueue Interface In JavaPriorityQueue in JavaImplement PriorityQueue through Comparator in JavaPriorityQueue comparator() Method in JavaInteresting facts about null in JavaUsing _ (underscore) as Variable Name in JavaCurrying Functions in Java with ExamplesUsing underscore in Numeric Literals in JavaBinary Search in JavaSorting in JavaArrays.sort() in Java with examplesCollections.sort() in Java with ExamplesComparator Interface in Java with ExamplesComparable vs Comparator in JavaArrays in JavaSplit() String method in Java with examplesFor-each loop in JavaReverse a string in JavaImprove Article Save Article Like Article AbstractQueue in Java with ExamplesDifficulty Level : BasicLast Updated : 05 Nov, 2020The AbstractQueue class in Java is a part of the Java Collection Framework and implements the Collection interface and the AbstractCollection class. It provides skeletal implementations of some Queue operations. The implementations in this class are appropriate when the base implementation does not allow null elements. Methods add, remove, and element are based on offer, poll, and peek, respectively, but throw exceptions instead of indicating failure via false or null returns. Class Hierarchy: java.lang.Object ↳ java.util.AbstractCollection<E> ↳ Class AbstractQueue<E> This class implements Iterable<E>, Collection<E>, Queue<E> interfaces and extends AbstractCollectionDeclaration: public abstract class AbstractQueue<E> extends AbstractCollection<E> implements Queue<E>E – Type of element maintained by the Collection Framework class or interface.Constructors in Java AbstractQueueSince AbstractQueue is an abstract class, it’s implementation is provided by its sub-classes. Below shows the list of classes that can provide the implementation. To create it, we need to it from java.uti.AbstractQueue.protected AbstractQueue(): The default constructor, but being abstract, it doesn’t allow to create an AbstractQueue object. The implementation should be provided by one of its subclasses like ArrayBlockingQueue, ConcurrentLinkedQueue, DelayQueue, LinkedBlockingDeque, LinkedBlockingQueue, LinkedTransferQueue, PriorityBlockingQueue, PriorityQueue, SynchronousQueue.AbstractQueue<E> objName = new ArrayBlockingQueue<E>(); Below is a sample program to illustrate AbstractQueue in Java: Java// Java code to illustrate AbstractQueue import java.util.*;import java.util.concurrent.LinkedBlockingQueue; public class AbstractQueueExample { public static void main(String[] argv) throws Exception { // Creating object of AbstractQueue<Integer> AbstractQueue<Integer> AQ = new LinkedBlockingQueue<Integer>(); // Adding elements to the Queue AQ.add(10); AQ.add(20); AQ.add(30); AQ.add(40); AQ.add(50); // print the queue contents to the console System.out.println("AbstractQueue contains: " + AQ); }}Output: AbstractQueue contains: [10, 20, 30, 40, 50] Basic Operations1. Adding ElementsTo add elements into the AbstractQueue, it provides two methods. The add(E e) method inserts the specified element into this queue if it is possible to do so immediately without violating capacity restrictions. It returns true upon success and throws an IllegalStateException if no space is currently available. The addAll(E e) method adds all the elements in the specified collection to this queue.Java// Java program to illustrate the// adding elements to the AbstractQueue import java.util.*;import java.util.concurrent.LinkedBlockingQueue; public class AddingElementsExample { public static void main(String[] argv) throws Exception { // Since AbstractQueue is an abstract class // create object using LinkedBlockingQueue AbstractQueue<Integer> AQ1 = new LinkedBlockingQueue<Integer>(); // Populating AQ AQ1.add(10); AQ1.add(20); AQ1.add(30); AQ1.add(40); AQ1.add(50); // print AQ System.out.println("AbstractQueue contains : " + AQ1); // Since AbstractQueue is an abstract class // create object using LinkedBlockingQueue AbstractQueue<Integer> AQ2 = new LinkedBlockingQueue<Integer>(); // print AQ2 initially System.out.println("AbstractQueue2 initially contains : " + AQ2); // adds elements of AQ1 in AQ2 AQ2.addAll(AQ1); System.out.println( "AbstractQueue1 after addition contains : " + AQ2); }} OutputAbstractQueue contains : [10, 20, 30, 40, 50] AbstractQueue2 initially contains : [] AbstractQueue1 after addition contains : [10, 20, 30, 40, 50]2. Remove the Elements To remove the elements from AbstractQueue, it provides remove() and clear() methods.The remove() method returns and removes the head of this queue.The clear() method removes all the elements from this queue. The queue will be empty after this call returns.Java// Java program to illustrate the// removal of elements from AbstractQueue import java.util.*;import java.util.concurrent.LinkedBlockingQueue; public class RemovingElementsExample { public static void main(String[] argv) throws Exception { // Since AbstractQueue is an abstract class // create object using LinkedBlockingQueue AbstractQueue<Integer> AQ1 = new LinkedBlockingQueue<Integer>(); // Add elements using add method AQ1.add(10); AQ1.add(20); AQ1.add(30); AQ1.add(40); AQ1.add(50); // print the queue contents to the console System.out.println("AbstractQueue1 contains : " + AQ1); // Retrieves the head int head = AQ1.remove(); // print the head element to the console System.out.println("head : " + head); // print the modified queue System.out.println("AbstractQueue1 after removal of head : " + AQ1); // remove all the elements AQ1.clear(); // print the modified queue System.out.println("AbstractQueue1 : " + AQ1); }} OutputAbstractQueue1 contains : [10, 20, 30, 40, 50] head : 10 AbstractQueue1 after removal of head : [20, 30, 40, 50] AbstractQueue1 : []3. Accessing the ElementsThe element() method of AbstractQueue retrieves but does not remove, the head of this queue.Java// Java program to illustrate the// accessing element from AbstractQueue import java.util.*;import java.util.concurrent.LinkedBlockingQueue; public class AccessingElementExample { public static void main(String[] argv) throws Exception { // Since AbstractQueue is an abstract class // create object using LinkedBlockingQueue AbstractQueue<Integer> AQ1 = new LinkedBlockingQueue<Integer>(); // Populating AQ1 using add method AQ1.add(10); AQ1.add(20); AQ1.add(30); AQ1.add(40); AQ1.add(50); // print AQ to the console System.out.println("AbstractQueue1 contains : " + AQ1); // access the head element System.out.println("head : " + AQ1.element()); }} OutputAbstractQueue1 contains : [10, 20, 30, 40, 50] head : 10Methods of AbstractQueueMETHODDESCRIPTIONadd​(E e)Inserts the specified element into this queue if it is possible to do so immediately without violating capacity restrictions, returning true upon success, and throwing an IllegalStateException if no space is currently available.addAll​(Collection<? extends E> c)Adds all the elements in the specified collection to this queue.clear()Removes all the elements from this queue.element()Retrieves, but does not remove, the head of this queue.remove()Retrieves and removes the head of this queue.Methods declared in class java.util.AbstractCollectionMETHODDESCRIPTIONcontains​(Object o)Returns true if this collection contains the specified element.containsAll​(Collection<?> c)Returns true if this collection contains all of the elements in the specified collection.isEmpty()Returns true if this collection contains no elements.iterator()Returns an iterator over the elements contained in this collection.remove​(Object o)Removes a single instance of the specified element from this collection, if it is present (optional operation).removeAll​(Collection<?> c)Removes all of this collection’s elements that are also contained in the specified collection (optional operation).retainAll​(Collection<?> c)Retains only the elements in this collection that are contained in the specified collection (optional operation).toArray()Returns an array containing all of the elements in this collection.toArray​(T[] a)Returns an array containing all of the elements in this collection; the runtime type of the returned array is that of the specified array.toString()Returns a string representation of this collection.Methods declared in interface java.util.CollectionMETHODDESCRIPTIONcontains​(Object o)Returns true if this collection contains the specified element.containsAll​(Collection<?> c)Returns true if this collection contains all the elements in the specified collection.equals​(Object o)Compares the specified object with this collection for equality.hashCode()Returns the hash code value for this collection.isEmpty()Returns true if this collection contains no elements.iterator()Returns an iterator over the elements in this collection.parallelStream()Returns a possibly parallel Stream with this collection as its source.remove​(Object o)Removes a single instance of the specified element from this collection, if it is present (optional operation).removeAll​(Collection<?> c)Removes all of this collection’s elements that are also contained in the specified collection (optional operation).removeIf​(Predicate<? super E> filter)Removes all the elements of this collection that satisfy the given predicate.retainAll​(Collection<?> c)Retains only the elements in this collection that are contained in the specified collection (optional operation).size()Returns the number of elements in this collection.spliterator()Creates a Spliterator over the elements in this collection.stream()Returns a sequential Stream with this collection as its source.toArray()Returns an array containing all the elements in this collection.toArray​(IntFunction<T[]> generator)Returns an array containing all the elements in this collection, using the provided generator function to allocate the returned array.toArray​(T[] a)Returns an array containing all the elements in this collection; the runtime type of the returned array is that of the specified array.Methods declared in interface java.lang.IterableMETHODDESCRIPTIONforEach​(Consumer<? super T> action)Performs the given action for each element of the Iterable until all elements have been processed or the action throws an exception.Methods declared in interface java.util.QueueMETHODDESCRIPTIONoffer​(E e)Inserts the specified element into this queue if it is possible to do so immediately without violating capacity restrictions.peek()Retrieves, but does not remove, the head of this queue, or returns null if this queue is empty.poll()Retrieves and removes the head of this queue, or returns null if this queue is empty.Reference: https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/AbstractQueue.htmlAttention reader! Don’t stop learning now. Get hold of all the important Java Foundation and Collections concepts with the Fundamentals of Java and Java Collections Course at a student-friendly price and become industry ready. To complete your preparation from learning a language to DS Algo and many more, please refer Complete Interview Preparation Course.My Personal Notes arrow_drop_upSave LikePreviousJava Collection| Difference between Synchronized ArrayList and CopyOnWriteArrayListNext ArrayBlockingQueue Class in JavaRecommended ArticlesPage :AbstractQueue add() method in Java with examples19, Oct 18AbstractQueue clear() method in Java with examples19, Oct 18AbstractQueue element() method in Java with examples19, Oct 18AbstractQueue addAll() method in Java with examples19, Oct 18AbstractQueue remove() method in Java with examples20, Oct 18Difference Between java.sql.Time, java.sql.Timestamp and java.sql.Date in Java07, Apr 21Java.util.BitSet class methods in Java with Examples | Set 218, Nov 16Java.util.BitSet class in Java with Examples | Set 116, Nov 16Java 8 | Consumer Interface in Java with Examples24, Sep 18Java.util.LinkedList.poll(), pollFirst(), pollLast() with examples in Java24, Oct 17Java 8 | ArrayDeque removeIf() method in Java with Examples18, Sep 18Java lang.Long.lowestOneBit() method in Java with Examples16, May 18Java lang.Long.numberOfTrailingZeros() method in Java with Examples17, May 18Java lang.Long.numberOfLeadingZeros() method in Java with Examples21, May 18Java lang.Long.highestOneBit() method in Java with Examples21, May 18Java lang.Long.byteValue() method in Java with Examples23, May 18Java lang.Long.reverse() method in Java with Examples24, May 18Java Clock tickMinutes() method in Java with Examples24, Aug 18Java Clock withZone() method in Java with Examples24, Aug 18Java.util.concurrent.RecursiveAction class in Java with Examples17, Jun 19Java 8 | BiConsumer Interface in Java with Examples24, Sep 18Java 8 | IntToDoubleFunction Interface in Java with Examples28, Sep 18Java 8 | DoubleToLongFunction Interface in Java with Examples28, Sep 18Java 8 | IntToLongFunction Interface in Java with Examples28, Sep 18Article Contributed By :RishabhPrabhu@RishabhPrabhuVote for difficultyCurrent difficulty : BasicEasy Normal Medium Hard ExpertImproved By :GaneshchowdharysadanalaArticle Tags :Java - util packagejava-AbstractQueueJava-CollectionsJavaPractice Tags :JavaJava-CollectionsReport IssueWriting code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load CommentsWhat's NewJava Backend Development- LIVE ClassesView DetailsComplete Interview PreparationView DetailsSystem Design-Live Classes for Working ProfessionalsView DetailsMost popular in JavaObject Oriented Programming (OOPs) Concept in JavaArrayList in JavaHashMap in Java with ExamplesInitialize an ArrayList in JavaMultidimensional Arrays in JavaMore related articles in JavaHow to iterate any Map in JavaHow to add an element to an Array in Java?Overriding in JavaInterfaces in JavaLinkedList in Java× 5th Floor, A-118,Sector-136, Noida, Uttar Pradesh - 201305 feedback@geeksforgeeks.orgCompanyAbout UsCareersPrivacy PolicyContact UsCopyright PolicyLearnAlgorithmsData StructuresLanguagesCS SubjectsVideo TutorialsWeb DevelopmentWeb TutorialsHTMLCSSJavaScriptBootstrapContributeWrite an ArticleWrite Interview ExperienceInternshipsVideos@geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It ! Start Your Coding Journey Now!Login Register