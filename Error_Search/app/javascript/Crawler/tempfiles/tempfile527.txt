Decision Making in Java (if, if-else, switch, break, continue, jump) - GeeksforGeeksSkip to content TutorialsPractice DS & Algo.Must Do QuestionsDSA Topic-wiseDSA Company-wiseAlgorithmsAnalysis of AlgorithmsAsymptotic AnalysisWorst, Average and Best CasesAsymptotic NotationsLittle o and little omega notationsLower and Upper Bound TheoryAnalysis of LoopsSolving RecurrencesAmortized AnalysisWhat does 'Space Complexity' mean ?Pseudo-polynomial AlgorithmsPolynomial Time Approximation SchemeA Time Complexity QuestionSearching AlgorithmsSorting AlgorithmsGraph AlgorithmsPattern SearchingGeometric AlgorithmsMathematicalBitwise AlgorithmsRandomized AlgorithmsGreedy AlgorithmsDynamic ProgrammingDivide and ConquerBacktrackingBranch and BoundAll AlgorithmsData StructuresArraysLinked ListStackQueueBinary TreeBinary Search TreeHeapHashingGraphAdvanced Data StructureMatrixStringsAll Data StructuresInterview CornerCompany PreparationTop TopicsPractice Company QuestionsInterview ExperiencesExperienced InterviewsInternship InterviewsCompetititve ProgrammingDesign PatternsSystem Design TutorialMultiple Choice QuizzesLanguagesCC++JavaPythonC#JavaScriptjQuerySQLPHPScalaPerlGo LanguageHTMLCSSKotlinCS SubjectsMathematicsOperating SystemDBMSComputer NetworksComputer Organization and ArchitectureTheory of ComputationCompiler DesignDigital LogicSoftware EngineeringGATEGATE Computer Science NotesLast Minute NotesGATE CS Solved PapersGATE CS Original Papers and Official KeysGATE 2021 DatesGATE CS 2021 SyllabusImportant Topics for GATE CSWeb TechnologiesHTMLCSSJavaScriptAngularJSReactJSNodeJSBootstrapjQueryPHPSoftware DesignsSoftware Design PatternsSystem Design TutorialSchool LearningSchool ProgrammingMathematicsNumber SystemAlgebraTrigonometryStatisticsProbabilityGeometryMensurationCalculusMaths Notes (Class 8-12)Class 8 NotesClass 9 NotesClass 10 NotesClass 11 NotesClass 12 NotesNCERT SolutionsClass 8 Maths SolutionClass 9 Maths SolutionClass 10 Maths SolutionClass 11 Maths SolutionClass 12 Maths SolutionRD Sharma SolutionsClass 8 Maths SolutionClass 9 Maths SolutionClass 10 Maths SolutionClass 11 Maths SolutionClass 12 Maths SolutionPhysics Notes (Class 8-11)Class 8 NotesClass 9 NotesClass 10 NotesClass 11 NotesISRO CSISRO CS Solved PapersISRO CS Original Papers and Official KeysISRO CS Syllabus for Scientist/Engineer ExamUGC NET CSUGC NET CS Notes Paper IIUGC NET CS Notes Paper IIIUGC NET CS Solved PapersStudentCampus Ambassador ProgramSchool Ambassador ProgramProjectGeek of the MonthCampus Geek of the MonthPlacement CourseCompetititve ProgrammingTestimonialsGeek on the TopCareersInternshipJobsApply for JobsPost a JobCourses WriteCome write articles for us and get featuredPracticeLearn and code with the best industry expertsPremiumGet access to ad-free content, doubt assistance and more!JobsCome and find your dream job with usGeeks DigestQuizzesGeeks CampusGblog ArticlesIDECampus Mantri HomeSaved VideosCoursesGBlogPuzzlesWhat's New ? Change Language Data StructuresAlgorithmsInterview PreparationTopic-wise PracticeC++JavaPythonCompetitive ProgrammingMachine LearningWeb DevelopmentPuzzlesProject IdeasGFG School Related Articles ▲Related ArticlesBasics of JavaJava TutorialIntroduction to JavaSimilarities and Difference between Java and C++Setting up the environment in JavaJava Basic SyntaxJava Hello World ProgramDifferences between JDK, JRE and JVMHow JVM Works – JVM Architecture?Java IdentifiersVariables & DataTypes in JavaVariables in JavaScope of Variables In JavaData types in JavaOperators in JavaOperators in JavaJava Arithmetic Operators with ExamplesJava Assignment Operators with ExamplesJava Unary Operator with ExamplesJava Relational Operators with ExamplesJava Logical Operators with ExamplesJava Ternary Operator with ExamplesBitwise Operators in JavaPackages in JavaPackages In JavaFlow Control in JavaDecision Making in Java (if, if-else, switch, break, continue, jump)Java if statement with ExamplesJava if-else statement with ExamplesJava if-else-if ladder with ExamplesLoops in JavaLoops in JavaJava For loop with ExamplesJava while loop with ExamplesJava do-while loop with ExamplesFor-each loop in JavaJump Statements in JavaContinue Statement in JavaBreak statement in Javareturn keyword in JavaArrays in JavaArrays in JavaMultidimensional Arrays in JavaJagged Array in JavaStrings in JavaStrings in JavaString class in Java | Set 1StringBuffer class in JavaStringBuilder Class in Java with ExamplesOOPS in JavaObject Oriented Programming (OOPs) Concept in JavaClasses and Objects in JavaMethods in JavaAccess Modifiers in JavaWrapper Classes in JavaNeed of Wrapper Classes in JavaConstructors in JavaConstructors in JavaCopy Constructor in JavaConstructor Chaining In Java with ExamplesPrivate Constructors and Singleton Classes in JavaInheritance & Polymorphism in JavaInheritance in JavaJava and Multiple InheritanceComparison of Inheritance in C++ and JavaPolymorphism in JavaDynamic Method Dispatch or Runtime Polymorphism in JavaMethod overloading & OveridingOverloading in JavaDifferent ways of Method Overloading in JavaOverriding in JavaDifference Between Method Overloading and Method Overriding in JavaAbstraction & EncapsulationAbstraction in JavaAbstract Classes in JavaDifference between Abstract Class and Interface in JavaEncapsulation in JavaInterfaces in JavaInterfaces in JavaNested Interface in JavaMarker interface in JavaFunctional Interfaces in JavaComparator Interface in Java with ExamplesKeywords in JavaList of all Java KeywordsSuper Keyword in Javafinal Keyword in Javaabstract keyword in javastatic Keyword in Java‘this’ reference in Javaenum in JavaException Handling in JavaExceptions in JavaTypes of Exception in Java with ExamplesChecked vs Unchecked Exceptions in JavaTry, catch, throw and throws in JavaFlow control in try catch finally in Javathrow and throws in JavaUser-defined Custom Exception in JavaCollection FrameworkCollections in JavaCollections Class in JavaList Interface in Java with ExamplesArrayList in JavaVector Class in JavaStack Class in JavaLinkedList in JavaQueue Interface In JavaPriorityQueue in JavaDeque interface in Java with ExampleArrayDeque in JavaSet in JavaHashSet in JavaLinkedHashSet in Java with ExamplesSortedSet Interface in Java with ExamplesNavigableSet in Java with ExamplesTreeSet in JavaMap Interface in JavaHashMap in Java with ExamplesHashtable in JavaLinkedHashMap in JavaSortedMap Interface in Java with ExamplesTreeMap in JavaMulti-threading in JavaMultithreading in JavaLifecycle and States of a Thread in JavaMain thread in JavaJava Thread Priority in MultithreadingThread Pools in JavaSynchronization in JavaMethod and Block Synchronization in JavaImportance of Thread Synchronization in JavaThread Safety and how to achieve it in JavaTable of ContentsBasics of JavaJava TutorialIntroduction to JavaSimilarities and Difference between Java and C++Setting up the environment in JavaJava Basic SyntaxJava Hello World ProgramDifferences between JDK, JRE and JVMHow JVM Works – JVM Architecture?Java IdentifiersVariables & DataTypes in JavaVariables in JavaScope of Variables In JavaData types in JavaOperators in JavaOperators in JavaJava Arithmetic Operators with ExamplesJava Assignment Operators with ExamplesJava Unary Operator with ExamplesJava Relational Operators with ExamplesJava Logical Operators with ExamplesJava Ternary Operator with ExamplesBitwise Operators in JavaPackages in JavaPackages In JavaFlow Control in JavaDecision Making in Java (if, if-else, switch, break, continue, jump)Java if statement with ExamplesJava if-else statement with ExamplesJava if-else-if ladder with ExamplesLoops in JavaLoops in JavaJava For loop with ExamplesJava while loop with ExamplesJava do-while loop with ExamplesFor-each loop in JavaJump Statements in JavaContinue Statement in JavaBreak statement in Javareturn keyword in JavaArrays in JavaArrays in JavaMultidimensional Arrays in JavaJagged Array in JavaStrings in JavaStrings in JavaString class in Java | Set 1StringBuffer class in JavaStringBuilder Class in Java with ExamplesOOPS in JavaObject Oriented Programming (OOPs) Concept in JavaClasses and Objects in JavaMethods in JavaAccess Modifiers in JavaWrapper Classes in JavaNeed of Wrapper Classes in JavaConstructors in JavaConstructors in JavaCopy Constructor in JavaConstructor Chaining In Java with ExamplesPrivate Constructors and Singleton Classes in JavaInheritance & Polymorphism in JavaInheritance in JavaJava and Multiple InheritanceComparison of Inheritance in C++ and JavaPolymorphism in JavaDynamic Method Dispatch or Runtime Polymorphism in JavaMethod overloading & OveridingOverloading in JavaDifferent ways of Method Overloading in JavaOverriding in JavaDifference Between Method Overloading and Method Overriding in JavaAbstraction & EncapsulationAbstraction in JavaAbstract Classes in JavaDifference between Abstract Class and Interface in JavaEncapsulation in JavaInterfaces in JavaInterfaces in JavaNested Interface in JavaMarker interface in JavaFunctional Interfaces in JavaComparator Interface in Java with ExamplesKeywords in JavaList of all Java KeywordsSuper Keyword in Javafinal Keyword in Javaabstract keyword in javastatic Keyword in Java‘this’ reference in Javaenum in JavaException Handling in JavaExceptions in JavaTypes of Exception in Java with ExamplesChecked vs Unchecked Exceptions in JavaTry, catch, throw and throws in JavaFlow control in try catch finally in Javathrow and throws in JavaUser-defined Custom Exception in JavaCollection FrameworkCollections in JavaCollections Class in JavaList Interface in Java with ExamplesArrayList in JavaVector Class in JavaStack Class in JavaLinkedList in JavaQueue Interface In JavaPriorityQueue in JavaDeque interface in Java with ExampleArrayDeque in JavaSet in JavaHashSet in JavaLinkedHashSet in Java with ExamplesSortedSet Interface in Java with ExamplesNavigableSet in Java with ExamplesTreeSet in JavaMap Interface in JavaHashMap in Java with ExamplesHashtable in JavaLinkedHashMap in JavaSortedMap Interface in Java with ExamplesTreeMap in JavaMulti-threading in JavaMultithreading in JavaLifecycle and States of a Thread in JavaMain thread in JavaJava Thread Priority in MultithreadingThread Pools in JavaSynchronization in JavaMethod and Block Synchronization in JavaImportance of Thread Synchronization in JavaThread Safety and how to achieve it in JavaImprove Article Save Article Like Article Decision Making in Java (if, if-else, switch, break, continue, jump)Difficulty Level : EasyLast Updated : 22 Nov, 2019Decision Making in programming is similar to decision making in real life. In programming also we face some situations where we want a certain block of code to be executed when some condition is fulfilled.A programming language uses control statements to control the flow of execution of program based on certain conditions. These are used to cause the flow of execution to advance and branch based on changes to the state of a program.Java’s Selection statements:ifif-elsenested-ifif-else-ifswitch-casejump – break, continue, returnThese statements allow you to control the flow of your program’s execution based upon conditions known only during run time.if: if statement is the most simple decision making statement. It is used to decide whether a certain statement or block of statements will be executed or not i.e if a certain condition is true then a block of statement is executed otherwise not.Syntax:if(condition) { // Statements to execute if // condition is true } Here, condition after evaluation will be either true or false. if statement accepts boolean values – if the value is true then it will execute the block of statements under it.If we do not provide the curly braces ‘{‘ and ‘}’ after if( condition ) then by default if statement will consider the immediate one statement to be inside its block. For example,if(condition) statement1; statement2; // Here if the condition is true, if block // will consider only statement1 to be inside // its block.Flow chart:Example:// Java program to illustrate If statementclass IfDemo{ public static void main(String args[]) { int i = 10; if (i > 15) System.out.println("10 is less than 15"); // This statement will be executed // as if considers one statement by default System.out.println("I am Not in if"); }}Output:I am Not in if if-else: The if statement alone tells us that if a condition is true it will execute a block of statements and if the condition is false it won’t. But what if we want to do something else if the condition is false. Here comes the else statement. We can use the else statement with if statement to execute a block of code when the condition is false.Syntax:if (condition) { // Executes this block if // condition is true } else { // Executes this block if // condition is false } Example:// Java program to illustrate if-else statementclass IfElseDemo{ public static void main(String args[]) { int i = 10; if (i < 15) System.out.println("i is smaller than 15"); else System.out.println("i is greater than 15"); }}Output:i is smaller than 15nested-if: A nested if is an if statement that is the target of another if or else. Nested if statements means an if statement inside an if statement. Yes, java allows us to nest if statements within if statements. i.e, we can place an if statement inside another if statement.Syntax:if (condition1) { // Executes when condition1 is true if (condition2) { // Executes when condition2 is true } } Example:// Java program to illustrate nested-if statementclass NestedIfDemo{ public static void main(String args[]) { int i = 10; if (i == 10) { // First if statement if (i < 15) System.out.println("i is smaller than 15"); // Nested - if statement // Will only be executed if statement above // it is true if (i < 12) System.out.println("i is smaller than 12 too"); else System.out.println("i is greater than 15"); } }}Output:i is smaller than 15 i is smaller than 12 too if-else-if ladder: Here, a user can decide among multiple options.The if statements are executed from the top down. As soon as one of the conditions controlling the if is true, the statement associated with that if is executed, and the rest of the ladder is bypassed. If none of the conditions is true, then the final else statement will be executed.if (condition) statement; else if (condition) statement; . . else statement; Example:// Java program to illustrate if-else-if ladderclass ifelseifDemo{ public static void main(String args[]) { int i = 20; if (i == 10) System.out.println("i is 10"); else if (i == 15) System.out.println("i is 15"); else if (i == 20) System.out.println("i is 20"); else System.out.println("i is not present"); }}Output:i is 20 switch-case The switch statement is a multiway branch statement. It provides an easy way to dispatch execution to different parts of code based on the value of the expression.Syntax:switch (expression) { case value1: statement1; break; case value2: statement2; break; . . case valueN: statementN; break; default: statementDefault; }Expression can be of type byte, short, int char or an enumeration. Beginning with JDK7, expression can also be of type String.Dulplicate case values are not allowed.The default statement is optional.The break statement is used inside the switch to terminate a statement sequence.The break statement is optional. If omitted, execution will continue on into the next case.Example:// Java program to illustrate switch-caseclass SwitchCaseDemo{ public static void main(String args[]) { int i = 9; switch (i) { case 0: System.out.println("i is zero."); break; case 1: System.out.println("i is one."); break; case 2: System.out.println("i is two."); break; default: System.out.println("i is greater than 2."); } }}Output:i is greater than 2. jump: Java supports three jump statement: break, continue and return. These three statements transfer control to other part of the program.Break: In Java, break is majorly used for:Terminate a sequence in a switch statement (discussed above).To exit a loop.Used as a “civilized” form of goto.Using break to exit a LoopUsing break, we can force immediate termination of a loop, bypassing the conditional expression and any remaining code in the body of the loop.Note: Break, when used inside a set of nested loops, will only break out of the innermost loop.Example:// Java program to illustrate using// break to exit a loopclass BreakLoopDemo{ public static void main(String args[]) { // Initially loop is set to run from 0-9 for (int i = 0; i < 10; i++) { // terminate loop when i is 5. if (i == 5) break; System.out.println("i: " + i); } System.out.println("Loop complete."); }}Output:i: 0 i: 1 i: 2 i: 3 i: 4 Loop complete. Using break as a Form of GotoJava does not have a goto statement because it provides a way to branch in an arbitrary and unstructured manner. Java uses label. A Label is use to identifies a block of code.Syntax:label: { statement1; statement2; statement3; . . }Now, break statement can be use to jump out of target block.Note: You cannot break to any label which is not defined for an enclosing block.Syntax:break label;Example:// Java program to illustrate using break with gotoclass BreakLabelDemo{ public static void main(String args[]) { boolean t = true; // label first first: { // Illegal statement here as label second is not // introduced yet break second; second: { third: { // Before break System.out.println("Before the break statement"); // break will take the control out of // second label if (t) break second; System.out.println("This won't execute."); } System.out.println("This won't execute."); } // First block System.out.println("This is after second block."); } }}Output:Before the break. This is after second block. Continue: Sometimes it is useful to force an early iteration of a loop. That is, you might want to continue running the loop but stop processing the remainder of the code in its body for this particular iteration. This is, in effect, a goto just past the body of the loop, to the loop’s end. The continue statement performs such an action.Example:// Java program to illustrate using// continue in an if statementclass ContinueDemo{ public static void main(String args[]) { for (int i = 0; i < 10; i++) { // If the number is even // skip and continue if (i%2 == 0) continue; // If number is odd, print it System.out.print(i + " "); } }}Output:1 3 5 7 9 Return:The return statement is used to explicitly return from a method. That is, it causes a program control to transfer back to the caller of the method.Example:// Java program to illustrate using returnclass Return{ public static void main(String args[]) { boolean t = true; System.out.println("Before the return."); if (t) return; // Compiler will bypass every statement // after return System.out.println("This won't execute."); }}Output:Before the return. This article is contributed by Anuj Chauhan and Harsh Aggarwal. If you like GeeksforGeeks and would like to contribute, you can also write an article using contribute.geeksforgeeks.org or mail your article to contribute@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.My Personal Notes arrow_drop_upSave LikePreviousPackages In JavaNext Java if statement with ExamplesRecommended ArticlesPage :Break and Continue statement in Java02, Sep 20Loops and Control Statements (continue, break and pass) in Python29, May 16Difference between continue and break statements in C++14, Oct 18Decision Making in C / C++ (if , if..else, Nested if, if-else-if )19, May 17Continue Statement in Java02, Nov 20Print the pattern by using one loop | Set 2 (Using Continue Statement)26, Jun 17Jump Statements in Java16, Oct 21Break statement in Java04, Nov 19Break Any Outer Nested Loop by Referencing its Name in Java18, Oct 20Usage of Break keyword in Java09, Nov 20Java program without making class01, Jul 17Switch Statement in Java15, May 178 Reasons Why You Should Switch To Kotlin From Java07, Jan 20Why You Should Switch to Kotlin from Java to Develop Android Apps?01, Jun 20Enhancements for Switch Statement in Java 1323, Oct 20Usage of Enum and Switch keyword in Java09, Nov 20String in Switch Case in Java15, May 17Three way partitioning using Dutch National Sort Algorithm(switch-case version) in Java09, Nov 20Program to find the Break Even Point25, Nov 18switch vs if else15, May 17Menu-Driven program using Switch-case in C18, Dec 17Nested switch statement in C++23, Oct 18How to add Custom Switch using IconSwitch Library in android ?25, Jun 20How to Switch Themes in Android Using RadioButtons?19, Mar 21Article Contributed By :GeeksforGeeksVote for difficultyCurrent difficulty : EasyEasy Normal Medium Hard ExpertImproved By :sonamchawlavrk-19Article Tags :java-basicsJavaSchool ProgrammingPractice Tags :JavaReport IssueWriting code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load CommentsWhat's NewJava Backend Development- LIVE ClassesView DetailsJava FoundationView DetailsComplete Interview PreparationView DetailsMost popular in JavaSplit() String method in Java with examplesArrays.sort() in Java with examplesReverse a string in JavaHow to iterate any Map in JavaInitialize an ArrayList in JavaMost visited in School ProgrammingPython DictionaryArrays in C/C++Reverse a string in JavaInheritance in C++C++ Data Types× 5th Floor, A-118,Sector-136, Noida, Uttar Pradesh - 201305 feedback@geeksforgeeks.orgCompanyAbout UsCareersPrivacy PolicyContact UsCopyright PolicyLearnAlgorithmsData StructuresLanguagesCS SubjectsVideo TutorialsWeb DevelopmentWeb TutorialsHTMLCSSJavaScriptBootstrapContributeWrite an ArticleWrite Interview ExperienceInternshipsVideos@geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It ! Start Your Coding Journey Now!Login Register