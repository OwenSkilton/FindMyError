Analysis of Algorithm | Set 4 (Solving Recurrences) - GeeksforGeeksSkip to content TutorialsPractice DS & Algo.Must Do QuestionsDSA Topic-wiseDSA Company-wiseAlgorithmsAnalysis of AlgorithmsAsymptotic AnalysisWorst, Average and Best CasesAsymptotic NotationsLittle o and little omega notationsLower and Upper Bound TheoryAnalysis of LoopsSolving RecurrencesAmortized AnalysisWhat does 'Space Complexity' mean ?Pseudo-polynomial AlgorithmsPolynomial Time Approximation SchemeA Time Complexity QuestionSearching AlgorithmsSorting AlgorithmsGraph AlgorithmsPattern SearchingGeometric AlgorithmsMathematicalBitwise AlgorithmsRandomized AlgorithmsGreedy AlgorithmsDynamic ProgrammingDivide and ConquerBacktrackingBranch and BoundAll AlgorithmsData StructuresArraysLinked ListStackQueueBinary TreeBinary Search TreeHeapHashingGraphAdvanced Data StructureMatrixStringsAll Data StructuresInterview CornerCompany PreparationTop TopicsPractice Company QuestionsInterview ExperiencesExperienced InterviewsInternship InterviewsCompetititve ProgrammingDesign PatternsSystem Design TutorialMultiple Choice QuizzesLanguagesCC++JavaPythonC#JavaScriptjQuerySQLPHPScalaPerlGo LanguageHTMLCSSKotlinCS SubjectsMathematicsOperating SystemDBMSComputer NetworksComputer Organization and ArchitectureTheory of ComputationCompiler DesignDigital LogicSoftware EngineeringGATEGATE Computer Science NotesLast Minute NotesGATE CS Solved PapersGATE CS Original Papers and Official KeysGATE 2021 DatesGATE CS 2021 SyllabusImportant Topics for GATE CSWeb TechnologiesHTMLCSSJavaScriptAngularJSReactJSNodeJSBootstrapjQueryPHPSoftware DesignsSoftware Design PatternsSystem Design TutorialSchool LearningSchool ProgrammingMathematicsNumber SystemAlgebraTrigonometryStatisticsProbabilityGeometryMensurationCalculusMaths Notes (Class 8-12)Class 8 NotesClass 9 NotesClass 10 NotesClass 11 NotesClass 12 NotesNCERT SolutionsClass 8 Maths SolutionClass 9 Maths SolutionClass 10 Maths SolutionClass 11 Maths SolutionClass 12 Maths SolutionRD Sharma SolutionsClass 8 Maths SolutionClass 9 Maths SolutionClass 10 Maths SolutionClass 11 Maths SolutionClass 12 Maths SolutionPhysics Notes (Class 8-11)Class 8 NotesClass 9 NotesClass 10 NotesClass 11 NotesISRO CSISRO CS Solved PapersISRO CS Original Papers and Official KeysISRO CS Syllabus for Scientist/Engineer ExamUGC NET CSUGC NET CS Notes Paper IIUGC NET CS Notes Paper IIIUGC NET CS Solved PapersStudentCampus Ambassador ProgramSchool Ambassador ProgramProjectGeek of the MonthCampus Geek of the MonthPlacement CourseCompetititve ProgrammingTestimonialsGeek on the TopCareersInternshipJobsApply for JobsPost a JobCourses WriteCome write articles for us and get featuredPracticeLearn and code with the best industry expertsPremiumGet access to ad-free content, doubt assistance and more!JobsCome and find your dream job with usGeeks DigestQuizzesGeeks CampusGblog ArticlesIDECampus Mantri HomeSaved VideosCoursesGBlogPuzzlesWhat's New ? Change Language Data StructuresAlgorithmsInterview PreparationTopic-wise PracticeC++JavaPythonCompetitive ProgrammingMachine LearningWeb DevelopmentPuzzlesProject IdeasGFG School Related Articles ▲Related ArticlesAnalysis of Algorithms | Set 2 (Worst, Average and Best Cases)Analysis of Algorithms | Set 3 (Asymptotic Notations)Analysis of Algorithms | Set 4 (Analysis of Loops)Analysis of Algorithm | Set 4 (Solving Recurrences)Analysis of Algorithm | Set 5 (Amortized Analysis Introduction)What does ‘Space Complexity’ mean?Pseudo-polynomial AlgorithmsNP-Completeness | Set 1 (Introduction)A Time Complexity QuestionMerge SortQuickSortHeapSortBinary HeapTime Complexity of building a heapApplications of Heap Data StructureBinomial HeapFibonacci Heap | Set 1 (Introduction)Fibonacci Heap – Insertion and UnionFibonacci Heap – Deletion, Extract min and Decrease keyLeftist Tree / Leftist HeapK-ary HeapIterative HeapSortAnalysis of Algorithms | Set 1 (Asymptotic Analysis)Practice Questions on Time Complexity AnalysisUnderstanding Time Complexity with Simple ExamplesComplexity of different operations in Binary tree, Binary Search Tree and AVL treeTable of ContentsAnalysis of Algorithms | Set 2 (Worst, Average and Best Cases)Analysis of Algorithms | Set 3 (Asymptotic Notations)Analysis of Algorithms | Set 4 (Analysis of Loops)Analysis of Algorithm | Set 4 (Solving Recurrences)Analysis of Algorithm | Set 5 (Amortized Analysis Introduction)What does ‘Space Complexity’ mean?Pseudo-polynomial AlgorithmsNP-Completeness | Set 1 (Introduction)A Time Complexity QuestionMerge SortQuickSortHeapSortBinary HeapTime Complexity of building a heapApplications of Heap Data StructureBinomial HeapFibonacci Heap | Set 1 (Introduction)Fibonacci Heap – Insertion and UnionFibonacci Heap – Deletion, Extract min and Decrease keyLeftist Tree / Leftist HeapK-ary HeapIterative HeapSortAnalysis of Algorithms | Set 1 (Asymptotic Analysis)Practice Questions on Time Complexity AnalysisUnderstanding Time Complexity with Simple ExamplesComplexity of different operations in Binary tree, Binary Search Tree and AVL treeImprove Article Save Article Like Article Analysis of Algorithm | Set 4 (Solving Recurrences)Difficulty Level : MediumLast Updated : 14 Jun, 2021 In the previous post, we discussed analysis of loops. Many algorithms are recursive in nature. When we analyze them, we get a recurrence relation for time complexity. We get running time on an input of size n as a function of n and the running time on inputs of smaller sizes. For example in Merge Sort, to sort a given array, we divide it in two halves and recursively repeat the process for the two halves. Finally we merge the results. Time complexity of Merge Sort can be written as T(n) = 2T(n/2) + cn. There are many other algorithms like Binary Search, Tower of Hanoi, etc. There are mainly three ways for solving recurrences. 1) Substitution Method: We make a guess for the solution and then we use mathematical induction to prove the guess is correct or incorrect. For example consider the recurrence T(n) = 2T(n/2) + n We guess the solution as T(n) = O(nLogn). Now we use induction to prove our guess. We need to prove that T(n) <= cnLogn. We can assume that it is true for values smaller than n. T(n) = 2T(n/2) + n <= 2cn/2Log(n/2) + n = cnLogn - cnLog2 + n = cnLogn - cn + n <= cnLogn2) Recurrence Tree Method: In this method, we draw a recurrence tree and calculate the time taken by every level of tree. Finally, we sum the work done at all levels. To draw the recurrence tree, we start from the given recurrence and keep drawing till we find a pattern among levels. The pattern is typically a arithmetic or geometric series. For example consider the recurrence relation T(n) = T(n/4) + T(n/2) + cn2 cn2 / \ T(n/4) T(n/2) If we further break down the expression T(n/4) and T(n/2), we get following recursion tree. cn2 / \ c(n2)/16 c(n2)/4 / \ / \ T(n/16) T(n/8) T(n/8) T(n/4) Breaking down further gives us following cn2 / \ c(n2)/16 c(n2)/4 / \ / \ c(n2)/256 c(n2)/64 c(n2)/64 c(n2)/16 / \ / \ / \ / \ To know the value of T(n), we need to calculate sum of tree nodes level by level. If we sum the above tree level by level, we get the following series T(n) = c(n^2 + 5(n^2)/16 + 25(n^2)/256) + .... The above series is geometrical progression with ratio 5/16. To get an upper bound, we can sum the infinite series. We get the sum as (n2)/(1 - 5/16) which is O(n2)3) Master Method: Master Method is a direct way to get the solution. The master method works only for following type of recurrences or for recurrences that can be transformed to following type. T(n) = aT(n/b) + f(n) where a >= 1 and b > 1There are following three cases: 1. If f(n) = O(nc) where c < Logba then T(n) = Θ(nLogba) 2. If f(n) = Θ(nc) where c = Logba then T(n) = Θ(ncLog n) 3.If f(n) = Ω(nc) where c > Logba then T(n) = Θ(f(n)) How does this work? Master method is mainly derived from recurrence tree method. If we draw recurrence tree of T(n) = aT(n/b) + f(n), we can see that the work done at root is f(n) and work done at all leaves is Θ(nc) where c is Logba. And the height of recurrence tree is Logbn In recurrence tree method, we calculate total work done. If the work done at leaves is polynomially more, then leaves are the dominant part, and our result becomes the work done at leaves (Case 1). If work done at leaves and root is asymptotically same, then our result becomes height multiplied by work done at any level (Case 2). If work done at root is asymptotically more, then our result becomes work done at root (Case 3). Examples of some standard algorithms whose time complexity can be evaluated using Master Method Merge Sort: T(n) = 2T(n/2) + Θ(n). It falls in case 2 as c is 1 and Logba] is also 1. So the solution is Θ(n Logn) Binary Search: T(n) = T(n/2) + Θ(1). It also falls in case 2 as c is 0 and Logba is also 0. So the solution is Θ(Logn) Notes: 1) It is not necessary that a recurrence of the form T(n) = aT(n/b) + f(n) can be solved using Master Theorem. The given three cases have some gaps between them. For example, the recurrence T(n) = 2T(n/2) + n/Logn cannot be solved using master method. 2) Case 2 can be extended for f(n) = Θ(ncLogkn) If f(n) = Θ(ncLogkn) for some constant k >= 0 and c = Logba, then T(n) = Θ(ncLogk+1n) Practice Problems and Solutions on Master Theorem. Next – Analysis of Algorithm | Set 5 (Amortized Analysis Introduction) References: http://en.wikipedia.org/wiki/Master_theorem MIT Video Lecture on Asymptotic Notation | Recurrences | Substitution, Master Method Introduction to Algorithms 3rd Edition by Clifford Stein, Thomas H. Cormen, Charles E. Leiserson, Ronald L. Rivest Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above My Personal Notes arrow_drop_upSave LikePreviousAnalysis of Algorithms | Set 4 (Analysis of Loops)Next Analysis of Algorithm | Set 5 (Amortized Analysis Introduction)Recommended ArticlesPage :Analysis of Algorithm | Set 5 (Amortized Analysis Introduction)23, Sep 14Algorithms | Recurrences | Set 127, Dec 18Algorithms Sample Questions | Recurrences | Set 227, May 19Analysis of Algorithms | Set 1 (Asymptotic Analysis)03, Jan 12Analysis of Algorithms | Set 4 (Analysis of Loops)11, Feb 14Master Theorem For Subtract and Conquer Recurrences12, Jul 17Advanced master theorem for divide and conquer recurrences17, Apr 18Analysis of Algorithms | Big-O analysis28, Feb 18What is algorithm and why analysis of it is important?12, Jan 21Analysis of Algorithms | Set 5 (Practice Problems)02, May 17Algorithms Sample Questions | Set 3 | Time Order Analysis27, May 19Analysis of Algorithms | Set 3 (Asymptotic Notations)26, Oct 13Analysis of Algorithms | Set 2 (Worst, Average and Best Cases)19, Feb 12Asymptotic Analysis and comparison of sorting algorithms28, Dec 16Analysis of algorithms | little o and little omega notations14, Aug 17Practice Questions on Time Complexity Analysis12, Dec 17Analysis of different sorting techniques29, Jan 18Time Complexity Analysis | Tower Of Hanoi (Recursion)27, Feb 18Guidelines for asymptotic analysis27, May 21Complexity Analysis of Binary Search29, May 19Difference between Posteriori and Priori analysis07, Aug 19Complexity analysis of various operations of Binary Min Heap26, Jun 20Analysis of Algorithms | Big - Θ (Big Theta) Notation11, Jul 21Analysis of Algorithms | Big - Ω (Big- Omega) Notation11, Jul 21Article Contributed By :GeeksforGeeksVote for difficultyCurrent difficulty : MediumEasy Normal Medium Hard ExpertImproved By :Manish Dhanukaanimagussirius7pragatpandyaArticle Tags :AnalysisReport IssueWriting code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load CommentsWhat's NewComplete Interview PreparationView DetailsSystem Design-Live Classes for Working ProfessionalsView DetailsData Structures & Algorithms- Self Paced CourseView DetailsMost popular in AnalysisTypes of Complexity Classes | P, NP, CoNP, NP hard and NP completeTime Complexity and Space ComplexityAnalysis of different sorting techniquesAnalysis of Algorithms | Big-O analysisDifference between Big Oh, Big Omega and Big ThetaMore related articles in AnalysisTime complexities of different data structuresCyclomatic ComplexityComplexity Analysis of Binary SearchDifference between NP hard and NP complete problemTail Recursion× 5th Floor, A-118,Sector-136, Noida, Uttar Pradesh - 201305 feedback@geeksforgeeks.orgCompanyAbout UsCareersPrivacy PolicyContact UsCopyright PolicyLearnAlgorithmsData StructuresLanguagesCS SubjectsVideo TutorialsWeb DevelopmentWeb TutorialsHTMLCSSJavaScriptBootstrapContributeWrite an ArticleWrite Interview ExperienceInternshipsVideos@geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It ! Start Your Coding Journey Now!Login Register