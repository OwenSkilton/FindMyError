HashSet in Java - GeeksforGeeksSkip to content TutorialsPractice DS & Algo.Must Do QuestionsDSA Topic-wiseDSA Company-wiseAlgorithmsAnalysis of AlgorithmsAsymptotic AnalysisWorst, Average and Best CasesAsymptotic NotationsLittle o and little omega notationsLower and Upper Bound TheoryAnalysis of LoopsSolving RecurrencesAmortized AnalysisWhat does 'Space Complexity' mean ?Pseudo-polynomial AlgorithmsPolynomial Time Approximation SchemeA Time Complexity QuestionSearching AlgorithmsSorting AlgorithmsGraph AlgorithmsPattern SearchingGeometric AlgorithmsMathematicalBitwise AlgorithmsRandomized AlgorithmsGreedy AlgorithmsDynamic ProgrammingDivide and ConquerBacktrackingBranch and BoundAll AlgorithmsData StructuresArraysLinked ListStackQueueBinary TreeBinary Search TreeHeapHashingGraphAdvanced Data StructureMatrixStringsAll Data StructuresInterview CornerCompany PreparationTop TopicsPractice Company QuestionsInterview ExperiencesExperienced InterviewsInternship InterviewsCompetititve ProgrammingDesign PatternsSystem Design TutorialMultiple Choice QuizzesLanguagesCC++JavaPythonC#JavaScriptjQuerySQLPHPScalaPerlGo LanguageHTMLCSSKotlinCS SubjectsMathematicsOperating SystemDBMSComputer NetworksComputer Organization and ArchitectureTheory of ComputationCompiler DesignDigital LogicSoftware EngineeringGATEGATE Computer Science NotesLast Minute NotesGATE CS Solved PapersGATE CS Original Papers and Official KeysGATE 2021 DatesGATE CS 2021 SyllabusImportant Topics for GATE CSWeb TechnologiesHTMLCSSJavaScriptAngularJSReactJSNodeJSBootstrapjQueryPHPSoftware DesignsSoftware Design PatternsSystem Design TutorialSchool LearningSchool ProgrammingMathematicsNumber SystemAlgebraTrigonometryStatisticsProbabilityGeometryMensurationCalculusMaths Notes (Class 8-12)Class 8 NotesClass 9 NotesClass 10 NotesClass 11 NotesClass 12 NotesNCERT SolutionsClass 8 Maths SolutionClass 9 Maths SolutionClass 10 Maths SolutionClass 11 Maths SolutionClass 12 Maths SolutionRD Sharma SolutionsClass 8 Maths SolutionClass 9 Maths SolutionClass 10 Maths SolutionClass 11 Maths SolutionClass 12 Maths SolutionPhysics Notes (Class 8-11)Class 8 NotesClass 9 NotesClass 10 NotesClass 11 NotesISRO CSISRO CS Solved PapersISRO CS Original Papers and Official KeysISRO CS Syllabus for Scientist/Engineer ExamUGC NET CSUGC NET CS Notes Paper IIUGC NET CS Notes Paper IIIUGC NET CS Solved PapersStudentCampus Ambassador ProgramSchool Ambassador ProgramProjectGeek of the MonthCampus Geek of the MonthPlacement CourseCompetititve ProgrammingTestimonialsGeek on the TopCareersInternshipJobsApply for JobsPost a JobCourses WriteCome write articles for us and get featuredPracticeLearn and code with the best industry expertsPremiumGet access to ad-free content, doubt assistance and more!JobsCome and find your dream job with usGeeks DigestQuizzesGeeks CampusGblog ArticlesIDECampus Mantri HomeSaved VideosCoursesGBlogPuzzlesWhat's New ? Change Language Data StructuresAlgorithmsInterview PreparationTopic-wise PracticeC++JavaPythonCompetitive ProgrammingMachine LearningWeb DevelopmentPuzzlesProject IdeasGFG School Related Articles ▲Related ArticlesBasics of JavaJava TutorialIntroduction to JavaSimilarities and Difference between Java and C++Setting up the environment in JavaJava Basic SyntaxJava Hello World ProgramDifferences between JDK, JRE and JVMHow JVM Works – JVM Architecture?Java IdentifiersVariables & DataTypes in JavaVariables in JavaScope of Variables In JavaData types in JavaOperators in JavaOperators in JavaJava Arithmetic Operators with ExamplesJava Assignment Operators with ExamplesJava Unary Operator with ExamplesJava Relational Operators with ExamplesJava Logical Operators with ExamplesJava Ternary Operator with ExamplesBitwise Operators in JavaPackages in JavaPackages In JavaFlow Control in JavaDecision Making in Java (if, if-else, switch, break, continue, jump)Java if statement with ExamplesJava if-else statement with ExamplesJava if-else-if ladder with ExamplesLoops in JavaLoops in JavaJava For loop with ExamplesJava while loop with ExamplesJava do-while loop with ExamplesFor-each loop in JavaJump Statements in JavaContinue Statement in JavaBreak statement in Javareturn keyword in JavaArrays in JavaArrays in JavaMultidimensional Arrays in JavaJagged Array in JavaStrings in JavaStrings in JavaString class in Java | Set 1StringBuffer class in JavaStringBuilder Class in Java with ExamplesOOPS in JavaObject Oriented Programming (OOPs) Concept in JavaClasses and Objects in JavaMethods in JavaAccess Modifiers in JavaWrapper Classes in JavaNeed of Wrapper Classes in JavaConstructors in JavaConstructors in JavaCopy Constructor in JavaConstructor Chaining In Java with ExamplesPrivate Constructors and Singleton Classes in JavaInheritance & Polymorphism in JavaInheritance in JavaJava and Multiple InheritanceComparison of Inheritance in C++ and JavaPolymorphism in JavaDynamic Method Dispatch or Runtime Polymorphism in JavaMethod overloading & OveridingOverloading in JavaDifferent ways of Method Overloading in JavaOverriding in JavaDifference Between Method Overloading and Method Overriding in JavaAbstraction & EncapsulationAbstraction in JavaAbstract Classes in JavaDifference between Abstract Class and Interface in JavaEncapsulation in JavaInterfaces in JavaInterfaces in JavaNested Interface in JavaMarker interface in JavaFunctional Interfaces in JavaComparator Interface in Java with ExamplesKeywords in JavaList of all Java KeywordsSuper Keyword in Javafinal Keyword in Javaabstract keyword in javastatic Keyword in Java‘this’ reference in Javaenum in JavaException Handling in JavaExceptions in JavaTypes of Exception in Java with ExamplesChecked vs Unchecked Exceptions in JavaTry, catch, throw and throws in JavaFlow control in try catch finally in Javathrow and throws in JavaUser-defined Custom Exception in JavaCollection FrameworkCollections in JavaCollections Class in JavaList Interface in Java with ExamplesArrayList in JavaVector Class in JavaStack Class in JavaLinkedList in JavaQueue Interface In JavaPriorityQueue in JavaDeque interface in Java with ExampleArrayDeque in JavaSet in JavaHashSet in JavaLinkedHashSet in Java with ExamplesSortedSet Interface in Java with ExamplesNavigableSet in Java with ExamplesTreeSet in JavaMap Interface in JavaHashMap in Java with ExamplesHashtable in JavaLinkedHashMap in JavaSortedMap Interface in Java with ExamplesTreeMap in JavaMulti-threading in JavaMultithreading in JavaLifecycle and States of a Thread in JavaMain thread in JavaJava Thread Priority in MultithreadingThread Pools in JavaSynchronization in JavaMethod and Block Synchronization in JavaImportance of Thread Synchronization in JavaThread Safety and how to achieve it in JavaTable of ContentsBasics of JavaJava TutorialIntroduction to JavaSimilarities and Difference between Java and C++Setting up the environment in JavaJava Basic SyntaxJava Hello World ProgramDifferences between JDK, JRE and JVMHow JVM Works – JVM Architecture?Java IdentifiersVariables & DataTypes in JavaVariables in JavaScope of Variables In JavaData types in JavaOperators in JavaOperators in JavaJava Arithmetic Operators with ExamplesJava Assignment Operators with ExamplesJava Unary Operator with ExamplesJava Relational Operators with ExamplesJava Logical Operators with ExamplesJava Ternary Operator with ExamplesBitwise Operators in JavaPackages in JavaPackages In JavaFlow Control in JavaDecision Making in Java (if, if-else, switch, break, continue, jump)Java if statement with ExamplesJava if-else statement with ExamplesJava if-else-if ladder with ExamplesLoops in JavaLoops in JavaJava For loop with ExamplesJava while loop with ExamplesJava do-while loop with ExamplesFor-each loop in JavaJump Statements in JavaContinue Statement in JavaBreak statement in Javareturn keyword in JavaArrays in JavaArrays in JavaMultidimensional Arrays in JavaJagged Array in JavaStrings in JavaStrings in JavaString class in Java | Set 1StringBuffer class in JavaStringBuilder Class in Java with ExamplesOOPS in JavaObject Oriented Programming (OOPs) Concept in JavaClasses and Objects in JavaMethods in JavaAccess Modifiers in JavaWrapper Classes in JavaNeed of Wrapper Classes in JavaConstructors in JavaConstructors in JavaCopy Constructor in JavaConstructor Chaining In Java with ExamplesPrivate Constructors and Singleton Classes in JavaInheritance & Polymorphism in JavaInheritance in JavaJava and Multiple InheritanceComparison of Inheritance in C++ and JavaPolymorphism in JavaDynamic Method Dispatch or Runtime Polymorphism in JavaMethod overloading & OveridingOverloading in JavaDifferent ways of Method Overloading in JavaOverriding in JavaDifference Between Method Overloading and Method Overriding in JavaAbstraction & EncapsulationAbstraction in JavaAbstract Classes in JavaDifference between Abstract Class and Interface in JavaEncapsulation in JavaInterfaces in JavaInterfaces in JavaNested Interface in JavaMarker interface in JavaFunctional Interfaces in JavaComparator Interface in Java with ExamplesKeywords in JavaList of all Java KeywordsSuper Keyword in Javafinal Keyword in Javaabstract keyword in javastatic Keyword in Java‘this’ reference in Javaenum in JavaException Handling in JavaExceptions in JavaTypes of Exception in Java with ExamplesChecked vs Unchecked Exceptions in JavaTry, catch, throw and throws in JavaFlow control in try catch finally in Javathrow and throws in JavaUser-defined Custom Exception in JavaCollection FrameworkCollections in JavaCollections Class in JavaList Interface in Java with ExamplesArrayList in JavaVector Class in JavaStack Class in JavaLinkedList in JavaQueue Interface In JavaPriorityQueue in JavaDeque interface in Java with ExampleArrayDeque in JavaSet in JavaHashSet in JavaLinkedHashSet in Java with ExamplesSortedSet Interface in Java with ExamplesNavigableSet in Java with ExamplesTreeSet in JavaMap Interface in JavaHashMap in Java with ExamplesHashtable in JavaLinkedHashMap in JavaSortedMap Interface in Java with ExamplesTreeMap in JavaMulti-threading in JavaMultithreading in JavaLifecycle and States of a Thread in JavaMain thread in JavaJava Thread Priority in MultithreadingThread Pools in JavaSynchronization in JavaMethod and Block Synchronization in JavaImportance of Thread Synchronization in JavaThread Safety and how to achieve it in JavaImprove Article Save Article Like Article HashSet in JavaDifficulty Level : MediumLast Updated : 09 Sep, 2020The HashSet class implements the Set interface, backed by a hash table which is actually a HashMap instance. No guarantee is made as to the iteration order of the set which means that the class does not guarantee the constant order of elements over time. This class permits the null element. The class also offers constant time performance for the basic operations like add, remove, contains, and size assuming the hash function disperses the elements properly among the buckets, which we shall see further in the article. Few important features of HashSet are: Implements Set Interface.The underlying data structure for HashSet is Hashtable.As it implements the Set Interface, duplicate values are not allowed.Objects that you insert in HashSet are not guaranteed to be inserted in the same order. Objects are inserted based on their hash code.NULL elements are allowed in HashSet.HashSet also implements Serializable and Cloneable interfaces.The Hierarchy of HashSet HashSet extends Abstract Set<E> class and implements Set<E>, Cloneable and Serializable interfaces where E is the type of elements maintained by this set. The directly known subclass of HashSet is LinkedHashSet.Now for the maintenance of constant time performance, iterating over HashSet requires time proportional to the sum of the HashSet instance’s size (the number of elements) plus the “capacity” of the backing HashMap instance (the number of buckets). Thus, it’s very important not to set the initial capacity too high (or the load factor too low) if iteration performance is important. Initial Capacity: The initial capacity means the number of buckets when hashtable (HashSet internally uses hashtable data structure) is created. The number of buckets will be automatically increased if the current size gets full. Load Factor: The load factor is a measure of how full the HashSet is allowed to get before its capacity is automatically increased. When the number of entries in the hash table exceeds the product of the load factor and the current capacity, the hash table is rehashed (that is, internal data structures are rebuilt) so that the hash table has approximately twice the number of buckets. Number of stored elements in the table Load Factor = ----------------------------------------- Size of the hash table Example: If internal capacity is 16 and the load factor is 0.75 then the number of buckets will automatically get increased when the table has 12 elements in it.Effect on performance: Load factor and initial capacity are two main factors that affect the performance of HashSet operations. A load factor of 0.75 provides very effective performance with respect to time and space complexity. If we increase the load factor value more than that then memory overhead will be reduced (because it will decrease internal rebuilding operation) but, it will affect the add and search operation in the hashtable. To reduce the rehashing operation we should choose initial capacity wisely. If the initial capacity is greater than the maximum number of entries divided by the load factor, no rehash operation will ever occur.Note: The implementation in a HashSet is not synchronized, in the sense that if multiple threads access a hash set concurrently, and at least one of the threads modifies the set, it must be synchronized externally. This is typically accomplished by synchronizing on some object that naturally encapsulates the set. If no such object exists, the set should be “wrapped” using the Collections.synchronizedSet method. This is best done at creation time, to prevent accidental unsynchronized access to the set as shown below: Set s = Collections.synchronizedSet(new HashSet(...)); Declaration of HashSet:public class HashSet<E> extends AbstractSet<E> implements Set<E>, Cloneable, Serializable where E is the type of elements stored in a HashSet.Constructors of HashSet classIn order to create a HashSet, we need to create an object of the HashSet class. The HashSet class consists of various constructors that allow the possible creation of the HashSet. The following are the constructors available in this class.1. HashSet(): This constructor is used to build an empty HashSet object in which the default initial capacity is 16 and the default load factor is 0.75. If we wish to create an empty HashSet with the name hs, then, it can be created as:HashSet<E> hs = new HashSet<E>();2. HashSet(int initialCapacity): This constructor is used to build an empty HashSet object in which the initialCapacity is specified at the time of object creation. Here, the default loadFactor remains 0.75.HashSet<E> hs = new HashSet<E>(int initialCapacity);3. HashSet(int initialCapacity, float loadFactor): This constructor is used to build an empty HashSet object in which the initialCapacity and loadFactor are specified at the time of object creation.HashSet<E> hs = new HashSet<E>(int initialCapacity, float loadFactor);4. HashSet(Collection): This constructor is used to build a HashSet object containing all the elements from the given collection. In short, this constructor is used when any conversion is needed from any Collection object to the HashSet object. If we wish to create a HashSet with the name hs, it can be created as:HashSet<E> hs = new HashSet<E>(Collection C);Example: Java// Java program to demonstrate working of HashSetimport java.util.*; class HashSetDemo { // Main Method public static void main(String[] args) { HashSet<String> h = new HashSet<String>(); // Adding elements into HashSet usind add() h.add("India"); h.add("Australia"); h.add("South Africa"); h.add("India"); // adding duplicate elements // Displaying the HashSet System.out.println(h); System.out.println("List contains India or not:" + h.contains("India")); // Removing items from HashSet using remove() h.remove("Australia"); System.out.println("List after removing Australia:" + h); // Iterating over hash set items System.out.println("Iterating over list:"); Iterator<String> i = h.iterator(); while (i.hasNext()) System.out.println(i.next()); }}Output:[South Africa, Australia, India] List contains India or not:true List after removing Australia:[South Africa, India] Iterating over list: South Africa IndiaPerforming Various Operations on HashSetLet’s see how to perform a few frequently used operations on the HashSet.1. Adding Elements: In order to add an element to the HashSet, we can use the add() method. However, the insertion order is not retained in the HashSet. We need to keep a note that duplicate elements are not allowed and all the duplicate elements are ignored.Java// Java program for adding// elements to a HashSetimport java.util.*;import java.io.*; class AddingElementsToHashSet { public static void main(String[] args) { // Instantiate an object // of HashSet HashSet<String> hs = new HashSet<String>(); // Elements are added using add() method hs.add("Geek"); hs.add("For"); hs.add("Geeks"); // Print the contents on the console System.out.println("HashSet elements : " + hs); }}Output:HashSet elements : [Geek, For, Geeks]2. Removing the Elements: The values can be removed from the HashSet using the remove() method.Java// Java program to remove// elements of HashSetimport java.io.*;import java.util.*; class RemoveElementsOfHashSet { public static void main(String[] args) { // Instantiate an object // of HashSet HashSet<String> hs = new HashSet<String>(); // Elements are added using add() method hs.add("Geek"); hs.add("For"); hs.add("Geeks"); hs.add("A"); hs.add("B"); hs.add("Z"); // Print the contents on the console System.out.println("Initial HashSet " + hs); // Removing the element B hs.remove("B"); // Print the contents on the console System.out.println("After removing element " + hs); // Returns false if the element is not present System.out.println("Element AC exists in the Set : " + hs.remove("AC")); }}Output:Initial HashSet [A, B, Geek, For, Geeks, Z] After removing element [A, Geek, For, Geeks, Z] Element AC exists in the Set : false3. Iterating through the HashSet: Iterate through the elements of HashSet using the iterator() method. The most famous one is to use the enhanced for loop.Java// Java program to iterate// the HashSetimport java.io.*;import java.util.*; class IterateTheHashSet { public static void main(String[] args) { // Instantiate an object of HashSet HashSet<String> hs = new HashSet<String>(); // Elements are added using add() method hs.add("Geek"); hs.add("For"); hs.add("Geeks"); hs.add("A"); hs.add("B"); hs.add("Z"); // Iterating though the HashSet Iterator itr = hs.iterator(); while (itr.hasNext()) System.out.print(itr.next() + ", "); System.out.println(); // Using enhanced for loop for (String s : hs) System.out.print(s + ", "); System.out.println(); }}Output:A, B, Geek, For, Geeks, Z, A, B, Geek, For, Geeks, Z,Internal working of a HashSet: All the classes of Set interface internally backed up by Map. HashSet uses HashMap for storing its object internally. You must be wondering that to enter a value in HashMap we need a key-value pair, but in HashSet, we are passing only one value. Storage in HashMap: Actually the value we insert in HashSet acts as a key to the map Object and for its value, java uses a constant variable. So in key-value pair, all the values will be the same.Implementation of HashSet in java doc: private transient HashMap map; // Constructor - 1 // All the constructors are internally creating HashMap Object. public HashSet() { // Creating internally backing HashMap object map = new HashMap(); } // Constructor - 2 public HashSet(int initialCapacity) { // Creating internally backing HashMap object map = new HashMap(initialCapacity); } // Dummy value to associate with an Object in Map private static final Object PRESENT = new Object(); If we look at the add() method of HashSet class: public boolean add(E e) { return map.put(e, PRESENT) == null; } We can notice that, add() method of HashSet class internally calls the put() method of backing the HashMap object by passing the element you have specified as a key and constant “PRESENT” as its value. remove() method also works in the same manner. It internally calls remove method of Map interface. public boolean remove(Object o) { return map.remove(o) == PRESENT; } HashSet not only stores unique Objects but also unique Collection of Objects like ArrayList<E>, LinkedList<E>, Vector<E>,..etc.Let us understand this with the help of the below example:Java// Java program to illustrate the concept// of Collection objects storage in a HashSetimport java.io.*;import java.util.*; class CollectionObjectStorage { public static void main(String[] args) { // Instantiate an object of HashSet HashSet<ArrayList> set = new HashSet<>(); // create ArrayList list1 ArrayList<Integer> list1 = new ArrayList<>(); // create ArrayList list2 ArrayList<Integer> list2 = new ArrayList<>(); // Add elements using add method list1.add(1); list1.add(2); list2.add(1); list2.add(2); set.add(list1); set.add(list2); // print the set size to understand the // internal storage of ArrayList in Set System.out.println(set.size()); }}Output:1Before storing an Object, HashSet checks whether there is an existing entry using hashCode() and equals() methods. In the above example, two lists are considered equal if they have the same elements in the same order. When you invoke the hashCode() method on the two lists, they both would give the same hash since they are equal. HashSet does not store duplicate items, if you give two Objects that are equal then it stores only the first one, here it is list1.Time Complexity of HashSet Operations: The underlying data structure for HashSet is hashtable. So amortize (average or usual case) time complexity for add, remove and look-up (contains method) operation of HashSet takes O(1) time.Methods in HashSetHere, E is the Type of elements store in HashSet METHODDESCRIPTIONadd(E e)Used to add the specified element if it is not present, if it is present then return false.clear()Used to remove all the elements from set.contains(Object o)Used to return true if an element is present in set.remove(Object o)Used to remove the element if it is present in set.iterator() Used to return an iterator over the element in the set.isEmpty()Used to check whether the set is empty or not. Returns true for empty and false for a non-empty condition for set.size()Used to return the size of the set.clone()Used to create a shallow copy of the set.Methods inherited from class java.util.AbstractSetMETHODDESCRIPTIONequals()Used to verify the equality of an Object with a HashSet and compare them. The list returns true only if both HashSet contains same elements, irrespective of order.hashcode()Returns the hash code value for this set.removeAll(collection)This method is used to remove all the elements from the collection which are present in the set.This method returns true if this set changed as a result of the call.Methods inherited from class java.util.AbstractCollectionMETHODDESCRIPTIONaddAll(collection) This method is used to append all of the elements from the mentioned collection to the existing set.The elements are added randomly without following any specific order.containsAll(collection) This method is used to check whether the set contains all the elements present in the given collection or not.This method returns true if the set contains all the elements and returns false if any of the elements are missing.retainAll(collection)This method is used to retain all the elements from the set which are mentioned in the given collection.This method returns true if this set changed as a result of the call.toArray()This method is used to form an array of the same elements as that of the Set.toString()The toString() method of Java HashSet is used to return a string representation of the elements of the HashSet Collection.Methods declared in interface java.util.CollectionMETHODDESCRIPTIONparallelStream()Returns a possibly parallel Stream with this collection as its source.removeIf​(Predicate<? super E> filter)Removes all of the elements of this collection that satisfy the given predicate.stream()Returns a sequential Stream with this collection as its source.toArray​(IntFunction<T[]> generator)Returns an array containing all of the elements in this collection, using the provided generator function to allocate the returned array.Methods declared in interface java.lang.IterableMETHODDESCRIPTION forEach​(Consumer<? super T> action)Performs the given action for each element of the Iterable until all elements have been processed or the action throws an exception.Methods declared in interface java.util.SetMETHODDESCRIPTIONaddAll​(Collection<? extends E> c)Adds all of the elements in the specified collection to this set if they’re not already present (optional operation).containsAll​(Collection<?> c)Returns true if this set contains all of the elements of the specified collection.equals​(Object o)Compares the specified object with this set for equality.hashCode()Returns the hash code value for this set.removeAll​(Collection<?> c)Removes from this set all of its elements that are contained in the specified collection (optional operation).retainAll​(Collection<?> c)Retains only the elements in this set that are contained in the specified collection (optional operation).toArray()Returns an array containing all of the elements in this set.toArray​(T[] a)Returns an array containing all of the elements in this set; the runtime type of the returned array is that of the specified array.HashSet vs HashMapBASISHashSetHashMapImplementationHashSet implements Set interface.HashMap implements Map interface.DuplicatesHashSet doesn’t allow duplicate values.HashMap store key, value pairs and it does not allow duplicate keys. If key is duplicate then the old key is replaced with the new value.Number of objects during storing objectsHashSet requires only one object add(Object o).HashMap requires two objects put(K key, V Value) to add an element to the HashMap object.Dummy valueHashSet internally uses HashMap to add elements. In HashSet, the argument passed in add(Object) method serves as key K. Java internally associates dummy value for each value passed in add(Object) method.HashMap does not have any concept of dummy value.Storing or Adding mechanismHashSet internally uses the HashMap object to store or add the objects.HashMap internally uses hashing to store or add objectsFasterHashSet is slower than HashMap.HashMap is faster than HashSet.InsertionHashSet uses the add() method for add or storing data.HashMap uses the put() method for storing data.ExampleHashSet is a set, e.g. {1, 2, 3, 4, 5, 6, 7}.HashMap is a key -> value pair(key to value) map, e.g. {a -> 1, b -> 2, c -> 2, d -> 1}.HashSet vs TreeSetBASISHashSetTreeSetSpeed and internal implementationFor operations like search, insert and delete. It takes constant time for these operations on average. HashSet is faster than TreeSet. HashSet is Implemented using a hash table.TreeSet takes O(Log n) for search, insert and delete which is higher than HashSet. But TreeSet keeps sorted data. Also, it supports operations like higher() (Returns least higher element), floor(), ceiling(), etc. These operations are also O(Log n) in TreeSet and not supported in HashSet. TreeSet is implemented using a Self Balancing Binary Search Tree (Red-Black Tree). TreeSet is backed by TreeMap in Java.Ordering Elements in HashSet are not ordered.TreeSet maintains objects in Sorted order defined by either Comparable or Comparator method in Java. TreeSet elements are sorted in ascending order by default. It offers several methods to deal with the ordered set like first(), last(), headSet(), tailSet(), etc.Null ObjectHashSet allows the null object.TreeSet doesn’t allow null Object and throw NullPointerException, Why, because TreeSet uses compareTo() method to compare keys and compareTo() will throw java.lang.NullPointerException.ComparisonHashSet uses equals() method to compare two objects in Set and for detecting duplicates.TreeSet uses compareTo() method for same purpose. If equals() and compareTo() are not consistent, i.e. for two equal object equals should return true while compareTo() should return zero, then it will break the contract of the Set interface and will allow duplicates in Set implementations like TreeSetReference: https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/HashSet.html This article is contributed by Dharmesh Singh. Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.My Personal Notes arrow_drop_upSave LikePreviousSet in JavaNext LinkedHashSet in Java with ExamplesRecommended ArticlesPage :How to Copy or Append HashSet to Another HashSet in Java?13, Dec 20Internal working of Set/HashSet in Java29, Jun 17Initializing HashSet in Java04, Oct 17HashSet contains() Method in Java18, Jun 18HashSet clear() Method in Java18, Jun 18How to Find the Minimum and Maximum Value from Java HashSet?28, Dec 20HashSet isEmpty() Method in Java14, Jun 18HashSet iterator() Method in Java18, Jun 18HashSet remove() Method in Java14, Jun 18HashSet size() Method in Java14, Jun 18HashSet add() Method in Java14, Jun 18HashSet clone() Method in Java18, Jun 18HashSet spliterator() method in Java18, Sep 18How to sort HashSet in Java05, Nov 18Difference between ArrayList and HashSet in Java10, Nov 18HashSet hashCode() method in Java with Example24, Dec 18HashSet containsAll() method in Java with Example24, Dec 18HashSet toString() method in Java with Example24, Dec 18HashSet toArray() method in Java with Example24, Dec 18HashSet toArray(T[]) method in Java with Example24, Dec 18HashSet equals() method in Java with Example24, Dec 18HashSet retainAll() method in Java with Example24, Dec 18Difference and similarities between HashSet, LinkedHashSet and TreeSet in Java02, Jan 19Convert HashSet to TreeSet in Java02, Jan 19Article Contributed By :GeeksforGeeksVote for difficultyCurrent difficulty : MediumEasy Normal Medium Hard ExpertImproved By :Chinmoy LenkaashishvermapuGaneshchowdharysadanalaArticle Tags :Java - util packageJava-Collectionsjava-hashsetJavaPractice Tags :JavaJava-CollectionsReport IssueWriting code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load CommentsWhat's NewJava Backend Development- LIVE ClassesView DetailsComplete Interview PreparationView DetailsSystem Design-Live Classes for Working ProfessionalsView DetailsMost popular in JavaSplit() String method in Java with examplesArrays.sort() in Java with examplesReverse a string in JavaHow to iterate any Map in JavaInitialize an ArrayList in JavaMore related articles in JavaSingleton Class in JavaHow to add an element to an Array in Java?Java Programming ExamplesStream In JavaInitializing a List in Java× 5th Floor, A-118,Sector-136, Noida, Uttar Pradesh - 201305 feedback@geeksforgeeks.orgCompanyAbout UsCareersPrivacy PolicyContact UsCopyright PolicyLearnAlgorithmsData StructuresLanguagesCS SubjectsVideo TutorialsWeb DevelopmentWeb TutorialsHTMLCSSJavaScriptBootstrapContributeWrite an ArticleWrite Interview ExperienceInternshipsVideos@geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It ! Start Your Coding Journey Now!Login Register