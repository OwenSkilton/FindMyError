TreeSet in Java - GeeksforGeeksSkip to content TutorialsPractice DS & Algo.Must Do QuestionsDSA Topic-wiseDSA Company-wiseAlgorithmsAnalysis of AlgorithmsAsymptotic AnalysisWorst, Average and Best CasesAsymptotic NotationsLittle o and little omega notationsLower and Upper Bound TheoryAnalysis of LoopsSolving RecurrencesAmortized AnalysisWhat does 'Space Complexity' mean ?Pseudo-polynomial AlgorithmsPolynomial Time Approximation SchemeA Time Complexity QuestionSearching AlgorithmsSorting AlgorithmsGraph AlgorithmsPattern SearchingGeometric AlgorithmsMathematicalBitwise AlgorithmsRandomized AlgorithmsGreedy AlgorithmsDynamic ProgrammingDivide and ConquerBacktrackingBranch and BoundAll AlgorithmsData StructuresArraysLinked ListStackQueueBinary TreeBinary Search TreeHeapHashingGraphAdvanced Data StructureMatrixStringsAll Data StructuresInterview CornerCompany PreparationTop TopicsPractice Company QuestionsInterview ExperiencesExperienced InterviewsInternship InterviewsCompetititve ProgrammingDesign PatternsSystem Design TutorialMultiple Choice QuizzesLanguagesCC++JavaPythonC#JavaScriptjQuerySQLPHPScalaPerlGo LanguageHTMLCSSKotlinCS SubjectsMathematicsOperating SystemDBMSComputer NetworksComputer Organization and ArchitectureTheory of ComputationCompiler DesignDigital LogicSoftware EngineeringGATEGATE Computer Science NotesLast Minute NotesGATE CS Solved PapersGATE CS Original Papers and Official KeysGATE 2021 DatesGATE CS 2021 SyllabusImportant Topics for GATE CSWeb TechnologiesHTMLCSSJavaScriptAngularJSReactJSNodeJSBootstrapjQueryPHPSoftware DesignsSoftware Design PatternsSystem Design TutorialSchool LearningSchool ProgrammingMathematicsNumber SystemAlgebraTrigonometryStatisticsProbabilityGeometryMensurationCalculusMaths Notes (Class 8-12)Class 8 NotesClass 9 NotesClass 10 NotesClass 11 NotesClass 12 NotesNCERT SolutionsClass 8 Maths SolutionClass 9 Maths SolutionClass 10 Maths SolutionClass 11 Maths SolutionClass 12 Maths SolutionRD Sharma SolutionsClass 8 Maths SolutionClass 9 Maths SolutionClass 10 Maths SolutionClass 11 Maths SolutionClass 12 Maths SolutionPhysics Notes (Class 8-11)Class 8 NotesClass 9 NotesClass 10 NotesClass 11 NotesISRO CSISRO CS Solved PapersISRO CS Original Papers and Official KeysISRO CS Syllabus for Scientist/Engineer ExamUGC NET CSUGC NET CS Notes Paper IIUGC NET CS Notes Paper IIIUGC NET CS Solved PapersStudentCampus Ambassador ProgramSchool Ambassador ProgramProjectGeek of the MonthCampus Geek of the MonthPlacement CourseCompetititve ProgrammingTestimonialsGeek on the TopCareersInternshipJobsApply for JobsPost a JobCourses WriteCome write articles for us and get featuredPracticeLearn and code with the best industry expertsPremiumGet access to ad-free content, doubt assistance and more!JobsCome and find your dream job with usGeeks DigestQuizzesGeeks CampusGblog ArticlesIDECampus Mantri HomeSaved VideosCoursesGBlogPuzzlesWhat's New ? Change Language Data StructuresAlgorithmsInterview PreparationTopic-wise PracticeC++JavaPythonCompetitive ProgrammingMachine LearningWeb DevelopmentPuzzlesProject IdeasGFG School Related Articles ▲Related ArticlesBasics of JavaJava TutorialIntroduction to JavaSimilarities and Difference between Java and C++Setting up the environment in JavaJava Basic SyntaxJava Hello World ProgramDifferences between JDK, JRE and JVMHow JVM Works – JVM Architecture?Java IdentifiersVariables & DataTypes in JavaVariables in JavaScope of Variables In JavaData types in JavaOperators in JavaOperators in JavaJava Arithmetic Operators with ExamplesJava Assignment Operators with ExamplesJava Unary Operator with ExamplesJava Relational Operators with ExamplesJava Logical Operators with ExamplesJava Ternary Operator with ExamplesBitwise Operators in JavaPackages in JavaPackages In JavaFlow Control in JavaDecision Making in Java (if, if-else, switch, break, continue, jump)Java if statement with ExamplesJava if-else statement with ExamplesJava if-else-if ladder with ExamplesLoops in JavaLoops in JavaJava For loop with ExamplesJava while loop with ExamplesJava do-while loop with ExamplesFor-each loop in JavaJump Statements in JavaContinue Statement in JavaBreak statement in Javareturn keyword in JavaArrays in JavaArrays in JavaMultidimensional Arrays in JavaJagged Array in JavaStrings in JavaStrings in JavaString class in Java | Set 1StringBuffer class in JavaStringBuilder Class in Java with ExamplesOOPS in JavaObject Oriented Programming (OOPs) Concept in JavaClasses and Objects in JavaMethods in JavaAccess Modifiers in JavaWrapper Classes in JavaNeed of Wrapper Classes in JavaConstructors in JavaConstructors in JavaCopy Constructor in JavaConstructor Chaining In Java with ExamplesPrivate Constructors and Singleton Classes in JavaInheritance & Polymorphism in JavaInheritance in JavaJava and Multiple InheritanceComparison of Inheritance in C++ and JavaPolymorphism in JavaDynamic Method Dispatch or Runtime Polymorphism in JavaMethod overloading & OveridingOverloading in JavaDifferent ways of Method Overloading in JavaOverriding in JavaDifference Between Method Overloading and Method Overriding in JavaAbstraction & EncapsulationAbstraction in JavaAbstract Classes in JavaDifference between Abstract Class and Interface in JavaEncapsulation in JavaInterfaces in JavaInterfaces in JavaNested Interface in JavaMarker interface in JavaFunctional Interfaces in JavaComparator Interface in Java with ExamplesKeywords in JavaList of all Java KeywordsSuper Keyword in Javafinal Keyword in Javaabstract keyword in javastatic Keyword in Java‘this’ reference in Javaenum in JavaException Handling in JavaExceptions in JavaTypes of Exception in Java with ExamplesChecked vs Unchecked Exceptions in JavaTry, catch, throw and throws in JavaFlow control in try catch finally in Javathrow and throws in JavaUser-defined Custom Exception in JavaCollection FrameworkCollections in JavaCollections Class in JavaList Interface in Java with ExamplesArrayList in JavaVector Class in JavaStack Class in JavaLinkedList in JavaQueue Interface In JavaPriorityQueue in JavaDeque interface in Java with ExampleArrayDeque in JavaSet in JavaHashSet in JavaLinkedHashSet in Java with ExamplesSortedSet Interface in Java with ExamplesNavigableSet in Java with ExamplesTreeSet in JavaMap Interface in JavaHashMap in Java with ExamplesHashtable in JavaLinkedHashMap in JavaSortedMap Interface in Java with ExamplesTreeMap in JavaMulti-threading in JavaMultithreading in JavaLifecycle and States of a Thread in JavaMain thread in JavaJava Thread Priority in MultithreadingThread Pools in JavaSynchronization in JavaMethod and Block Synchronization in JavaImportance of Thread Synchronization in JavaThread Safety and how to achieve it in JavaTable of ContentsBasics of JavaJava TutorialIntroduction to JavaSimilarities and Difference between Java and C++Setting up the environment in JavaJava Basic SyntaxJava Hello World ProgramDifferences between JDK, JRE and JVMHow JVM Works – JVM Architecture?Java IdentifiersVariables & DataTypes in JavaVariables in JavaScope of Variables In JavaData types in JavaOperators in JavaOperators in JavaJava Arithmetic Operators with ExamplesJava Assignment Operators with ExamplesJava Unary Operator with ExamplesJava Relational Operators with ExamplesJava Logical Operators with ExamplesJava Ternary Operator with ExamplesBitwise Operators in JavaPackages in JavaPackages In JavaFlow Control in JavaDecision Making in Java (if, if-else, switch, break, continue, jump)Java if statement with ExamplesJava if-else statement with ExamplesJava if-else-if ladder with ExamplesLoops in JavaLoops in JavaJava For loop with ExamplesJava while loop with ExamplesJava do-while loop with ExamplesFor-each loop in JavaJump Statements in JavaContinue Statement in JavaBreak statement in Javareturn keyword in JavaArrays in JavaArrays in JavaMultidimensional Arrays in JavaJagged Array in JavaStrings in JavaStrings in JavaString class in Java | Set 1StringBuffer class in JavaStringBuilder Class in Java with ExamplesOOPS in JavaObject Oriented Programming (OOPs) Concept in JavaClasses and Objects in JavaMethods in JavaAccess Modifiers in JavaWrapper Classes in JavaNeed of Wrapper Classes in JavaConstructors in JavaConstructors in JavaCopy Constructor in JavaConstructor Chaining In Java with ExamplesPrivate Constructors and Singleton Classes in JavaInheritance & Polymorphism in JavaInheritance in JavaJava and Multiple InheritanceComparison of Inheritance in C++ and JavaPolymorphism in JavaDynamic Method Dispatch or Runtime Polymorphism in JavaMethod overloading & OveridingOverloading in JavaDifferent ways of Method Overloading in JavaOverriding in JavaDifference Between Method Overloading and Method Overriding in JavaAbstraction & EncapsulationAbstraction in JavaAbstract Classes in JavaDifference between Abstract Class and Interface in JavaEncapsulation in JavaInterfaces in JavaInterfaces in JavaNested Interface in JavaMarker interface in JavaFunctional Interfaces in JavaComparator Interface in Java with ExamplesKeywords in JavaList of all Java KeywordsSuper Keyword in Javafinal Keyword in Javaabstract keyword in javastatic Keyword in Java‘this’ reference in Javaenum in JavaException Handling in JavaExceptions in JavaTypes of Exception in Java with ExamplesChecked vs Unchecked Exceptions in JavaTry, catch, throw and throws in JavaFlow control in try catch finally in Javathrow and throws in JavaUser-defined Custom Exception in JavaCollection FrameworkCollections in JavaCollections Class in JavaList Interface in Java with ExamplesArrayList in JavaVector Class in JavaStack Class in JavaLinkedList in JavaQueue Interface In JavaPriorityQueue in JavaDeque interface in Java with ExampleArrayDeque in JavaSet in JavaHashSet in JavaLinkedHashSet in Java with ExamplesSortedSet Interface in Java with ExamplesNavigableSet in Java with ExamplesTreeSet in JavaMap Interface in JavaHashMap in Java with ExamplesHashtable in JavaLinkedHashMap in JavaSortedMap Interface in Java with ExamplesTreeMap in JavaMulti-threading in JavaMultithreading in JavaLifecycle and States of a Thread in JavaMain thread in JavaJava Thread Priority in MultithreadingThread Pools in JavaSynchronization in JavaMethod and Block Synchronization in JavaImportance of Thread Synchronization in JavaThread Safety and how to achieve it in JavaImprove Article Save Article Like Article TreeSet in JavaDifficulty Level : EasyLast Updated : 16 Sep, 2021TreeSet is one of the most important implementations of the SortedSet interface in Java that uses a Tree for storage. The ordering of the elements is maintained by a set using their natural ordering whether or not an explicit comparator is provided. This must be consistent with equals if it is to correctly implement the Set interface. It can also be ordered by a Comparator provided at set creation time, depending on which constructor is used. The TreeSet implements a NavigableSet interface by inheriting AbstractSet class.It can clearly be perceived from the above image that the navigable set extends the sorted set interface. Since a set doesn’t retain the insertion order, the navigable set interface provides the implementation to navigate through the Set. The class which implements the navigable set is a TreeSet which is an implementation of a self-balancing tree. Therefore, this interface provides us with a way to navigate through this tree. Note:An object is said to be comparable if and only if the corresponding class implements a Comparable interface.String class and all the Wrapper classes already implement Comparable interface but StringBuffer class implements Comparable interface. Hence, we DO NOT get a ClassCastException in the above example.For an empty tree-set, when trying to insert null as the first value, one will get NPE from JDK 7. From JDK 7 onwards, null is not at all accepted by TreeSet. However, up to JDK 6, null was accepted as the first value, but any insertion of more null values in the TreeSet resulted in NullPointerException. Hence, it was considered a bug and thus removed in JDK 7.TreeSet serves as an excellent choice for storing large amounts of sorted information which are supposed to be accessed quickly because of its faster access and retrieval time.The insertion of null values into a TreeSet throws NullPointerException because while insertion of null, it gets compared to the existing elements, and null cannot be compared to any value.How does TreeSet work Internally?TreeSet is basically an implementation of a self-balancing binary search tree like a Red-Black Tree. Therefore operations like add, remove, and search takes O(log(N)) time. The reason is that in a self-balancing tree, it is made sure that the height of the tree is always O(log(N)) for all the operations. Therefore, this is considered as one of the most efficient data structures in order to store the huge sorted data and perform operations on it. However, operations like printing N elements in the sorted order take O(N) time.Now let us discuss Synchronized TreeSet prior moving ahead. The implementation of a TreeSet is not synchronized. This means that if multiple threads access a tree set concurrently, and at least one of the threads modifies the set, it must be synchronized externally. This is typically accomplished by synchronizing some object that naturally encapsulates the set. If no such object exists, the set should be “wrapped” using the Collections.synchronizedSortedSet method. This is best done at the creation time, to prevent accidental unsynchronized access to the set. It can be achieved as shown below as follows:TreeSet ts = new TreeSet(); Set syncSet = Collections.synchronziedSet(ts); Constructors of TreeSet Class are as follows:In order to create a TreeSet, we need to create an object of the TreeSet class. The TreeSet class consists of various constructors which allow the possible creation of the TreeSet. The following are the constructors available in this class:TreeSet(): This constructor is used to build an empty TreeSet object in which elements will get stored in default natural sorting order.Syntax: If we wish to create an empty TreeSet with the name ts, then, it can be created as: TreeSet ts = new TreeSet(); TreeSet(Comparator): This constructor is used to build an empty TreeSet object in which elements will need an external specification of the sorting order.Syntax: If we wish to create an empty TreeSet with the name ts with an external sorting phenomenon, then, it can be created as:TreeSet ts = new TreeSet(Comparator comp); TreeSet(Collection): This constructor is used to build a TreeSet object containing all the elements from the given collection in which elements will get stored in default natural sorting order. In short, this constructor is used when any conversion is needed from any Collection object to TreeSet object.Syntax: If we wish to create a TreeSet with the name ts, then, it can be created as follows:TreeSet t = new TreeSet(Collection col); TreeSet(SortedSet): This constructor is used to build a TreeSet object containing all the elements from the given sortedset in which elements will get stored in default natural sorting order. In short, this constructor is used to convert the SortedSet object to the TreeSet object.Syntax: If we wish to create a TreeSet with the name ts, then, it can be created as follows:TreeSet t = new TreeSet(SortedSet s);Methods in TreeSet Class are depicted below in tabular format which later on we will be implementing to showcase in the implementation part.TreeSet implements SortedSet so it has the availability of all methods in Collection, Set, and SortedSet interfaces. Following are the methods in the Treeset interface. In the table below, the “?” signifies that the method works with any type of object including user-defined objects. MethodDescriptionadd(Object o)This method will add the specified element according to the same sorting order mentioned during the creation of the TreeSet. Duplicate entries will not get added.addAll(Collection c)This method will add all elements of the specified Collection to the set. Elements in the Collection should be homogeneous otherwise ClassCastException will be thrown. Duplicate Entries of Collection will not be added to TreeSet.ceiling?(E e)This method returns the least element in this set greater than or equal to the given element, or null if there is no such element.clear()This method will remove all the elements.clone()The method is used to return a shallow copy of the set, which is just a simple copied set.Comparator comparator()This method will return the Comparator used to sort elements in TreeSet or it will return null if the default natural sorting order is used.contains(Object o)This method will return true if a given element is present in TreeSet else it will return false.descendingIterator?()This method returns an iterator over the elements in this set in descending order.descendingSet?()This method returns a reverse order view of the elements contained in this set.first()This method will return the first element in TreeSet if TreeSet is not null else it will throw NoSuchElementException.floor?(E e)This method returns the greatest element in this set less than or equal to the given element, or null if there is no such element.headSet(Object toElement)This method will return elements of TreeSet which are less than the specified element.higher?(E e)This method returns the least element in this set strictly greater than the given element, or null if there is no such element.isEmpty()This method is used to return true if this set contains no elements or is empty and false for the opposite case.Iterator iterator()Returns an iterator for iterating over the elements of the set.last()This method will return the last element in TreeSet if TreeSet is not null else it will throw NoSuchElementException.lower?(E e)This method returns the greatest element in this set strictly less than the given element, or null if there is no such element.pollFirst?()This method retrieves and removes the first (lowest) element, or returns null if this set is empty.pollLast?()This method retrieves and removes the last (highest) element, or returns null if this set is empty.remove(Object o)This method is used to return a specific element from the set.size()This method is used to return the size of the set or the number of elements present in the set.spliterator()This method creates a late-binding and fail-fast Spliterator over the elements in this set.subSet(Object fromElement, Object toElement)This method will return elements ranging from fromElement to toElement. fromElement is inclusive and toElement is exclusive.tailSet(Object fromElement)This method will return elements of TreeSet which are greater than or equal to the specified element.Illustration: The following implementation demonstrates how to create and use a TreeSet.Java// Java program to Illustrate Working of TreeSet // Importing required utility classesimport java.util.*; // Main classclass GFG { // Main driver method public static void main(String[] args) { // Creating a Set interface with reference to // TreeSet Set<String> ts1 = new TreeSet<>(); // Elements are added using add() method ts1.add("A"); ts1.add("B"); ts1.add("C"); // Duplicates will not get insert ts1.add("C"); // Elements get stored in default natural // Sorting Order(Ascending) System.out.println(ts1); }}Output: [A, B, C] Implementation:Here we will be performing various operations over the TreeSet object to get familiar with the methods and concepts of TreeSet in java. Let’s see how to perform a few frequently used operations on the TreeSet. They are listed as follows:Adding elementsAccessing elementsRemoving elementsIterating through elementsNow let us discuss each operation individually one by one later alongside grasping with the help of a clean java program.Operation 1: Adding ElementsIn order to add an element to the TreeSet, we can use the add() method. However, the insertion order is not retained in the TreeSet. Internally, for every element, the values are compared and sorted in ascending order. We need to keep a note that duplicate elements are not allowed and all the duplicate elements are ignored. And also, Null values are not accepted by the TreeSet.ExampleJava// Java code to Illustrate Addition of Elements to TreeSet // Importing utility classesimport java.util.*; // Main classclass GFG { // Main driver method public static void main(String[] args) { // Creating a Set interface with // reference to TreeSet class // Declaring object of string type Set<String> ts = new TreeSet<>(); // Elements are added using add() method ts.add("Geek"); ts.add("For"); ts.add("Geeks"); // Print all elements inside object System.out.println(ts); }}Output: [For, Geek, Geeks] Operation 2: Accessing the ElementsAfter adding the elements, if we wish to access the elements, we can use inbuilt methods like contains(), first(), last(), etc. ExampleJava// Java code to Illustrate Working of TreeSet by// Accessing the Element of TreeSet // Importing utility classesimport java.util.*; // Main classclass GFG { // Main driver method public static void main(String[] args) { // Creating a NavigableSet object with // reference to TreeSet class NavigableSet<String> ts = new TreeSet<>(); // Elements are added using add() method ts.add("Geek"); ts.add("For"); ts.add("Geeks"); // Printing the elements inside the TreeSet object System.out.println("Tree Set is " + ts); String check = "Geeks"; // Check if the above string exists in // the treeset or not System.out.println("Contains " + check + " " + ts.contains(check)); // Print the first element in // the TreeSet System.out.println("First Value " + ts.first()); // Print the last element in // the TreeSet System.out.println("Last Value " + ts.last()); String val = "Geek"; // Find the values just greater // and smaller than the above string System.out.println("Higher " + ts.higher(val)); System.out.println("Lower " + ts.lower(val)); }}Output: Tree Set is [For, Geek, Geeks] Contains Geeks true First Value For Last Value Geeks Higher Geeks Lower For Operation 3: Removing the ValuesThe values can be removed from the TreeSet using the remove() method. There are various other methods that are used to remove the first value or the last value. ExampleJava// Java Program to Illustrate Removal of Elements// in a TreeSet // Importing utility classesimport java.util.*; // Main classclass GFG { // Main driver method public static void main(String[] args) { // Creating an object of NavigableSet // with reference to TreeSet class // Declaring object of string type NavigableSet<String> ts = new TreeSet<>(); // Elements are added // using add() method ts.add("Geek"); ts.add("For"); ts.add("Geeks"); ts.add("A"); ts.add("B"); ts.add("Z"); // Print and display initial elements of TreeSet System.out.println("Initial TreeSet " + ts); // Removing a specific existing element inserted // above ts.remove("B"); // Printing the updated TreeSet System.out.println("After removing element " + ts); // Now removing the first element // using pollFirst() method ts.pollFirst(); // Again printing the updated TreeSet System.out.println("After removing first " + ts); // Removing the last element // using pollLast() method ts.pollLast(); // Lastly printing the elements of TreeSet remaining // to figure out pollLast() method System.out.println("After removing last " + ts); }}Output: Initial TreeSet [A, B, For, Geek, Geeks, Z] After removing element [A, For, Geek, Geeks, Z] After removing first [For, Geek, Geeks, Z] After removing last [For, Geek, Geeks] Operation 4: Iterating through the TreeSetThere are various ways to iterate through the TreeSet. The most famous one is to use the enhanced for loop. and geeks mostly you would be iterating the elements with this approach while practicing questions over TreeSet as this is most frequently used when it comes to tree, maps, and graphs problems. ExampleJava// Java Program to Illustrate Working of TreeSet // Importing utility classesimport java.util.*; // Main classclass GFG { // Main driver method public static void main(String[] args) { // Creating an object of Set with reference to // TreeSet class // Note: You can refer above media if geek // is confused in programs why we are not // directly creating TreeSet object Set<String> ts = new TreeSet<>(); // Adding elements in above object // using add() method ts.add("Geek"); ts.add("For"); ts.add("Geeks"); ts.add("A"); ts.add("B"); ts.add("Z"); // Now we will be using for each loop in order // to iterate through the TreeSet for (String value : ts) // Printing the values inside the object System.out.print(value + ", "); System.out.println(); }}Output: A, B, For, Geek, Geeks, Z, Features of a TreeSet:TreeSet implements the SortedSet interface. So, duplicate values are not allowed.Objects in a TreeSet are stored in a sorted and ascending order.TreeSet does not preserve the insertion order of elements but elements are sorted by keys.If we are depending on the default natural sorting order, the objects that are being inserted into the tree should be homogeneous and comparable. TreeSet does not allow the insertion of heterogeneous objects. It will throw a classCastException at Runtime if we try to add heterogeneous objects.The TreeSet can only accept generic types which are comparable.For example, the StringBuffer class implements the Comparable interfaceJava// Java code to illustrate What if Heterogeneous// Objects are Inserted // Importing all utilit classesimport java.util.*; // Main classclass GFG { // Main driver method public static void main(String[] args) { // Object creation Set<StringBuffer> ts = new TreeSet<>(); // Adding elements to above object // using add() method ts.add(new StringBuffer("A")); ts.add(new StringBuffer("Z")); ts.add(new StringBuffer("L")); ts.add(new StringBuffer("B")); ts.add(new StringBuffer("O")); ts.add(new StringBuffer(1)); // Note: StringBuffer implements Comparable // interface // Printing the elements System.out.println(ts); }}Output[, A, B, L, O, Z]Attention reader! Don’t stop learning now. Get hold of all the important Java Foundation and Collections concepts with the Fundamentals of Java and Java Collections Course at a student-friendly price and become industry ready. To complete your preparation from learning a language to DS Algo and many more, please refer Complete Interview Preparation Course.My Personal Notes arrow_drop_upSave LikePreviousNavigableSet in Java with ExamplesNext Map Interface in JavaRecommended ArticlesPage :How to Fix java.lang.ClassCastException in TreeSet By Using Custom Comparator in Java?05, Jan 21TreeSet in Java30, May 16TreeSet size() Method in Java19, Jun 18TreeSet iterator() Method in Java19, Jun 18TreeSet remove() Method in Java19, Jun 18TreeSet pollFirst() method in Java28, Dec 18Job Sequencing Problem | Set 3 (Using TreeSet in JAVA)17, Jul 18TreeSet subSet() Method in Java19, Jun 18TreeSet tailSet() Method in Java19, Jun 18TreeSet headSet() Method in Java With Examples19, Jun 18TreeSet last() Method in Java19, Jun 18TreeSet first() Method in Java19, Jun 18TreeSet isEmpty() Method in Java19, Jun 18TreeSet clone() Method in Java19, Jun 18TreeSet clear() Method in Java19, Jun 18TreeSet addAll() Method in Java19, Jun 18TreeSet add() Method in Java19, Jun 18TreeSet comparator() Method in Java with Examples23, Jul 18TreeSet descendingIterator() method in Java with Examples10, Oct 18TreeSet descendingSet() method in Java with Examples10, Oct 18TreeSet floor() method in Java with Examples10, Oct 18TreeSet ceiling() method in Java with Examples10, Oct 18How to Loop Over TreeSet in Java?05, Nov 18How to sort TreeSet in descending order in Java?05, Nov 18Article Contributed By :GeeksforGeeksVote for difficultyCurrent difficulty : EasyEasy Normal Medium Hard ExpertImproved By :Chinmoy LenkaVinay PathakKaashyapMSKadarsh thimmappaAnshul_AggarwalsubtlyrudePriya_Bhimjyanianikakapoorakshaysingh98088Article Tags :Java - util packageJava-Collectionsjava-treesetJavaPractice Tags :JavaJava-CollectionsReport IssueWriting code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load CommentsWhat's NewJava Backend Development- LIVE ClassesView DetailsComplete Interview PreparationView DetailsSystem Design-Live Classes for Working ProfessionalsView DetailsMost popular in JavaSplit() String method in Java with examplesArrays.sort() in Java with examplesReverse a string in JavaInitialize an ArrayList in JavaHow to iterate any Map in JavaMore related articles in JavaHow to add an element to an Array in Java?Math pow() method in Java with ExampleSingleton Class in JavaInitializing a List in JavaJava Programming Examples× 5th Floor, A-118,Sector-136, Noida, Uttar Pradesh - 201305 feedback@geeksforgeeks.orgCompanyAbout UsCareersPrivacy PolicyContact UsCopyright PolicyLearnAlgorithmsData StructuresLanguagesCS SubjectsVideo TutorialsWeb DevelopmentWeb TutorialsHTMLCSSJavaScriptBootstrapContributeWrite an ArticleWrite Interview ExperienceInternshipsVideos@geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It ! Start Your Coding Journey Now!Login Register