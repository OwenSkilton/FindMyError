Inner Class in Java - GeeksforGeeksSkip to content TutorialsPractice DS & Algo.Must Do QuestionsDSA Topic-wiseDSA Company-wiseAlgorithmsAnalysis of AlgorithmsAsymptotic AnalysisWorst, Average and Best CasesAsymptotic NotationsLittle o and little omega notationsLower and Upper Bound TheoryAnalysis of LoopsSolving RecurrencesAmortized AnalysisWhat does 'Space Complexity' mean ?Pseudo-polynomial AlgorithmsPolynomial Time Approximation SchemeA Time Complexity QuestionSearching AlgorithmsSorting AlgorithmsGraph AlgorithmsPattern SearchingGeometric AlgorithmsMathematicalBitwise AlgorithmsRandomized AlgorithmsGreedy AlgorithmsDynamic ProgrammingDivide and ConquerBacktrackingBranch and BoundAll AlgorithmsData StructuresArraysLinked ListStackQueueBinary TreeBinary Search TreeHeapHashingGraphAdvanced Data StructureMatrixStringsAll Data StructuresInterview CornerCompany PreparationTop TopicsPractice Company QuestionsInterview ExperiencesExperienced InterviewsInternship InterviewsCompetititve ProgrammingDesign PatternsSystem Design TutorialMultiple Choice QuizzesLanguagesCC++JavaPythonC#JavaScriptjQuerySQLPHPScalaPerlGo LanguageHTMLCSSKotlinCS SubjectsMathematicsOperating SystemDBMSComputer NetworksComputer Organization and ArchitectureTheory of ComputationCompiler DesignDigital LogicSoftware EngineeringGATEGATE Computer Science NotesLast Minute NotesGATE CS Solved PapersGATE CS Original Papers and Official KeysGATE 2021 DatesGATE CS 2021 SyllabusImportant Topics for GATE CSWeb TechnologiesHTMLCSSJavaScriptAngularJSReactJSNodeJSBootstrapjQueryPHPSoftware DesignsSoftware Design PatternsSystem Design TutorialSchool LearningSchool ProgrammingMathematicsNumber SystemAlgebraTrigonometryStatisticsProbabilityGeometryMensurationCalculusMaths Notes (Class 8-12)Class 8 NotesClass 9 NotesClass 10 NotesClass 11 NotesClass 12 NotesNCERT SolutionsClass 8 Maths SolutionClass 9 Maths SolutionClass 10 Maths SolutionClass 11 Maths SolutionClass 12 Maths SolutionRD Sharma SolutionsClass 8 Maths SolutionClass 9 Maths SolutionClass 10 Maths SolutionClass 11 Maths SolutionClass 12 Maths SolutionPhysics Notes (Class 8-11)Class 8 NotesClass 9 NotesClass 10 NotesClass 11 NotesISRO CSISRO CS Solved PapersISRO CS Original Papers and Official KeysISRO CS Syllabus for Scientist/Engineer ExamUGC NET CSUGC NET CS Notes Paper IIUGC NET CS Notes Paper IIIUGC NET CS Solved PapersStudentCampus Ambassador ProgramSchool Ambassador ProgramProjectGeek of the MonthCampus Geek of the MonthPlacement CourseCompetititve ProgrammingTestimonialsGeek on the TopCareersInternshipJobsApply for JobsPost a JobCourses WriteCome write articles for us and get featuredPracticeLearn and code with the best industry expertsPremiumGet access to ad-free content, doubt assistance and more!JobsCome and find your dream job with usGeeks DigestQuizzesGeeks CampusGblog ArticlesIDECampus Mantri HomeSaved VideosCoursesGBlogPuzzlesWhat's New ? Change Language Data StructuresAlgorithmsInterview PreparationTopic-wise PracticeC++JavaPythonCompetitive ProgrammingMachine LearningWeb DevelopmentPuzzlesProject IdeasGFG School Related Articles ▲Related ArticlesClasses and Objects in JavaUnderstanding Classes and Objects in JavaInner Class in JavaAnonymous Inner Class in JavaNested Classes in JavaJava.util.Objects class in JavaDifferent ways to create objects in JavaHow are Java objects stored in memory?Passing and Returning Objects in JavaLambda Expressions in Java 8Serialization and Deserialization in Java with ExampleGarbage Collection in JavaHow to prevent objects of a class from Garbage Collection in JavaCount number of a class objects created in JavaTable of ContentsClasses and Objects in JavaUnderstanding Classes and Objects in JavaInner Class in JavaAnonymous Inner Class in JavaNested Classes in JavaJava.util.Objects class in JavaDifferent ways to create objects in JavaHow are Java objects stored in memory?Passing and Returning Objects in JavaLambda Expressions in Java 8Serialization and Deserialization in Java with ExampleGarbage Collection in JavaHow to prevent objects of a class from Garbage Collection in JavaCount number of a class objects created in JavaImprove Article Save Article Like Article Inner Class in JavaDifficulty Level : MediumLast Updated : 12 Jan, 2022In Java, inner class refers to the class that is declared inside class or interface which were mainly introduced, to sum up, same logically relatable classes as Java is purely object-oriented so bringing it closer to the real world. Now geeks you must be wondering why they were introduced? There are certain advantages associated with inner classes are as follows:Making code clean and readable.Private methods of the outer class can be accessed, so bringing a new dimension and making it closer to the real world.Optimizing the code module.We do use them often as we go advance in java object-oriented programming where we want certain operations to be performed, granting access to limited classes and many more which will be clear as we do discuss and implement all types of inner classes in Java.Types of Inner ClassesThere are basically four types of inner classes in java.Nested Inner ClassMethod Local Inner ClassesStatic Nested ClassesAnonymous Inner ClassesLet us discuss each of the above following types sequentially in-depth alongside a clean java program which is very crucial at every step as it becomes quite tricky as we adhere forwards.Type 1: Nested Inner Class It can access any private instance variable of the outer class. Like any other instance variable, we can have access modifier private, protected, public, and default modifier. Like class, an interface can also be nested and can have access specifiers. Example 1AJava// Java Program to Demonstrate Nested class // Class 1// Helper classesclass Outer { // Class 2 // Simple nested inner class class Inner { // show() method of inner class public void show() { // Print statement System.out.println("In a nested class method"); } }} // Class 2// Main classclass Main { // Main driver method public static void main(String[] args) { // Note how inner class object is created inside // main() Outer.Inner in = new Outer().new Inner(); // Calling show() method over above object created in.show(); }}OutputIn a nested class methodNote: We can not have a static method in a nested inner class because an inner class is implicitly associated with an object of its outer class so it cannot define any static method for itself. For example, the following program doesn’t compile. Example 1BJava// Java Program to Demonstrate Nested class // Where Error is thrown // Class 1// Outer classclass Outer { // Method defined inside outer class void outerMethod() { // Print statement System.out.println("inside outerMethod"); } // Class 2 // Inner class class Inner { // Main driver method public static void main(String[] args) { // Display message for better readability System.out.println("inside inner class Method"); } }}Output:An interface can also be nested and nested interfaces have some interesting properties. We will be covering nested interfaces in the next post.Type 2: Method Local Inner Classes Inner class can be declared within a method of an outer class which we will be illustrating in the below example where Inner is an inner class in outerMethod().Example 1Java// Java Program to Illustrate Inner class can be// declared within a method of outer class // Class 1// Outer classclass Outer { // Method inside outer class void outerMethod() { // Print statement System.out.println("inside outerMethod"); // Class 2 // Inner class // It is local to outerMethod() class Inner { // Method defined inside inner class void innerMethod() { // Print statement whenever inner class is // called System.out.println("inside innerMethod"); } } // Creating object of inner class Inner y = new Inner(); // Calling over method defined inside it y.innerMethod(); }} // Class 3// Main classclass GFG { // Main driver method public static void main(String[] args) { // Creating object of outer class inside main() // method Outer x = new Outer(); // Calling over the same method // as we did for inner class above x.outerMethod(); }}Outputinside outerMethod inside innerMethodMethod Local inner classes can’t use a local variable of the outer method until that local variable is not declared as final. For example, the following code generates a compiler error. Note: “x” is not final in outerMethod() and innerMethod() tries to access it.Example 2Javaclass Outer { void outerMethod() { int x = 98; System.out.println("inside outerMethod"); class Inner { void innerMethod() { System.out.println("x= "+x); } } Inner y = new Inner(); y.innerMethod(); }}class MethodLocalVariableDemo { public static void main(String[] args) { Outer x=new Outer(); x.outerMethod(); }}Outputinside outerMethod x= 98Note: Local inner class cannot access non-final local variable till JDK 1.7. Since JDK 1.8, it is possible to access the non-final local variable in method local inner class. But the following code compiles and runs fine (Note that x is final this time) Example 3Javaclass Outer { void outerMethod() { final int x=98; System.out.println("inside outerMethod"); class Inner { void innerMethod() { System.out.println("x = "+x); } } Inner y = new Inner(); y.innerMethod(); }}class MethodLocalVariableDemo { public static void main(String[] args){ Outer x = new Outer(); x.outerMethod(); }}Outputinside outerMethod x = 98The main reason we need to declare a local variable as a final is that the local variable lives on the stack till the method is on the stack but there might be a case the object of the inner class still lives on the heap. Method local inner class can’t be marked as private, protected, static, and transient but can be marked as abstract and final, but not both at the same time.Type 3: Static Nested ClassesStatic nested classes are not technically inner classes. They are like a static member of outer class. ExampleJava// Java Program to Illustrate Static Nested Classes // Importing required classesimport java.util.*; // Class 1// Outer classclass Outer { // Method private static void outerMethod() { // Print statement System.out.println("inside outerMethod"); } // Class 2 // Static inner class static class Inner { public static void display() { // Print statement System.out.println("inside inner class Method"); // Calling method insid main() method outerMethod(); } }} // Class 3// Main classclass GFG { // Main driver method public static void main(String args[]) { Outer.Inner obj = new Outer.Inner(); // Calling method via above instance created obj.display(); }}Outputinside inner class Method inside outerMethodType 4: Anonymous Inner Classes Anonymous inner classes are declared without any name at all. They are created in two ways. As a subclass of the specified typeAs an implementer of the specified interfaceWay 1: As a subclass of the specified type Example:Java// Java Program to Illustrate Anonymous Inner classes// Declaration Without any Name // As a subclass of the specified type // Importing required classesimport java.util.*; // Class 1// Helper classclass Demo { // Method of helper class void show() { // Print statement System.out.println( "i am in show method of super class"); }} // Class 2// Main classclass Flavor1Demo { // An anonymous class with Demo as base class static Demo d = new Demo() { // Method 1 // show() method void show() { // Calling method show() via super keyword // which refers to parent class super.show(); // Print statement System.out.println("i am in Flavor1Demo class"); } }; // Method 2 // Main driver method public static void main(String[] args) { // Calling show() method inside main() method d.show(); }}Outputi am in show method of super class i am in Flavor1Demo classIn the above code, we have two classes Demo and Flavor1Demo. Here demo act as a super-class and the anonymous class acts as a subclass, both classes have a method show(). In anonymous class show() method is overridden.Way 2: As an implementer of the specified interface Example:Java// Java Program to Illustrate Anonymous Inner Classes// Declaration Without Any Name// As an implementer of Specified interface // Interfaceinterface Hello { // Method defined inside interface void show();} // Main classclass GFG { // Class implementing interface static Hello h = new Hello() { // Method 1 // show() method inside main class public void show() { // Print statement System.out.println("i am in anonymous class"); } }; // Method 2 // Main driver method public static void main(String[] args) { // Calling show() method inside main() method h.show(); }}Outputi am in anonymous classOutput explanation:In the above code, we create an object of anonymous inner class but this anonymous inner class is an implementer of the interface Hello. Any anonymous inner class can implement only one interface at one time. It can either extend a class or implement an interface at a time.This article is contributed by Pawan Kumar. Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above.Attention reader! Don’t stop learning now. Get hold of all the important Java Foundation and Collections concepts with the Fundamentals of Java and Java Collections Course at a student-friendly price and become industry ready. To complete your preparation from learning a language to DS Algo and many more, please refer Complete Interview Preparation Course.My Personal Notes arrow_drop_upSave LikePreviousUnderstanding Classes and Objects in JavaNext Anonymous Inner Class in JavaRecommended ArticlesPage :Inner Class And Anonymous Inner Class that Implements Runnable | Concurrent Programming Approach 308, Apr 19Java Program to Check if a Given Class is a Local Inner Class16, Nov 20Java Program to Check if a Given Class is an Inner Class14, Dec 20Diamond operator for Anonymous Inner Class with Examples in Java15, Jan 20Java Program to illustrates Use of Static Inner Class05, Dec 20Local Inner Class in Java19, May 17Anonymous Inner Class in Java19, Dec 16Difference between Anonymous Inner Class and Lambda Expression17, Jun 19How to Access Inner Classes in Java?21, Dec 21Java.lang.Class class in Java | Set 130, Mar 17Java.lang.Class class in Java | Set 203, Apr 17Implement Pair Class with Unit Class in Java using JavaTuples20, Sep 18Implement Triplet Class with Pair Class in Java using JavaTuples20, Sep 18Implement Quintet Class with Quartet Class in Java using JavaTuples20, Sep 18Implement Quartet Class with Triplet Class in Java using JavaTuples20, Sep 18Implement Octet Class from Septet Class in Java using JavaTuples24, Sep 18Implement Ennead Class from Octet Class in Java using JavaTuples24, Sep 18Implement Sextet Class from Quintet Class in Java using JavaTuples24, Sep 18Implement Septet Class from Sextet Class in Java using JavaTuples24, Sep 18Implement Decade Class from Ennead Class in Java using JavaTuples24, Sep 18Difference between Abstract Class and Concrete Class in Java11, Jan 19In Java, Can we call the main() method of a class from another class?28, Nov 19Java Program to Check if a Given Class is an Anonymous Class16, Nov 20Using predefined class name as Class or Variable name in Java26, May 17Article Contributed By :GeeksforGeeksVote for difficultyCurrent difficulty : MediumEasy Normal Medium Hard ExpertImproved By :solankimayanksurinderdawra388chhabradhanvisurindertarika1234prachisoda1234kashishsodaakshitsaxenaa09as5853535Article Tags :JavaPractice Tags :JavaReport IssueWriting code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load CommentsWhat's NewJava Backend Development- LIVE ClassesView DetailsComplete Interview PreparationView DetailsSystem Design-Live Classes for Working ProfessionalsView DetailsMost popular in JavaArrays in JavaObject Oriented Programming (OOPs) Concept in JavaSplit() String method in Java with examplesFor-each loop in JavaArrays.sort() in Java with examplesMore related articles in JavaReverse a string in JavaArrayList in JavaHashMap in Java with ExamplesInitialize an ArrayList in JavaMultidimensional Arrays in Java× 5th Floor, A-118,Sector-136, Noida, Uttar Pradesh - 201305 feedback@geeksforgeeks.orgCompanyAbout UsCareersPrivacy PolicyContact UsCopyright PolicyLearnAlgorithmsData StructuresLanguagesCS SubjectsVideo TutorialsWeb DevelopmentWeb TutorialsHTMLCSSJavaScriptBootstrapContributeWrite an ArticleWrite Interview ExperienceInternshipsVideos@geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It ! Start Your Coding Journey Now!Login Register