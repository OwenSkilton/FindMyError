Comments in Java - GeeksforGeeksSkip to content TutorialsPractice DS & Algo.Must Do QuestionsDSA Topic-wiseDSA Company-wiseAlgorithmsAnalysis of AlgorithmsAsymptotic AnalysisWorst, Average and Best CasesAsymptotic NotationsLittle o and little omega notationsLower and Upper Bound TheoryAnalysis of LoopsSolving RecurrencesAmortized AnalysisWhat does 'Space Complexity' mean ?Pseudo-polynomial AlgorithmsPolynomial Time Approximation SchemeA Time Complexity QuestionSearching AlgorithmsSorting AlgorithmsGraph AlgorithmsPattern SearchingGeometric AlgorithmsMathematicalBitwise AlgorithmsRandomized AlgorithmsGreedy AlgorithmsDynamic ProgrammingDivide and ConquerBacktrackingBranch and BoundAll AlgorithmsData StructuresArraysLinked ListStackQueueBinary TreeBinary Search TreeHeapHashingGraphAdvanced Data StructureMatrixStringsAll Data StructuresInterview CornerCompany PreparationTop TopicsPractice Company QuestionsInterview ExperiencesExperienced InterviewsInternship InterviewsCompetititve ProgrammingDesign PatternsSystem Design TutorialMultiple Choice QuizzesLanguagesCC++JavaPythonC#JavaScriptjQuerySQLPHPScalaPerlGo LanguageHTMLCSSKotlinCS SubjectsMathematicsOperating SystemDBMSComputer NetworksComputer Organization and ArchitectureTheory of ComputationCompiler DesignDigital LogicSoftware EngineeringGATEGATE Computer Science NotesLast Minute NotesGATE CS Solved PapersGATE CS Original Papers and Official KeysGATE 2021 DatesGATE CS 2021 SyllabusImportant Topics for GATE CSWeb TechnologiesHTMLCSSJavaScriptAngularJSReactJSNodeJSBootstrapjQueryPHPSoftware DesignsSoftware Design PatternsSystem Design TutorialSchool LearningSchool ProgrammingMathematicsNumber SystemAlgebraTrigonometryStatisticsProbabilityGeometryMensurationCalculusMaths Notes (Class 8-12)Class 8 NotesClass 9 NotesClass 10 NotesClass 11 NotesClass 12 NotesNCERT SolutionsClass 8 Maths SolutionClass 9 Maths SolutionClass 10 Maths SolutionClass 11 Maths SolutionClass 12 Maths SolutionRD Sharma SolutionsClass 8 Maths SolutionClass 9 Maths SolutionClass 10 Maths SolutionClass 11 Maths SolutionClass 12 Maths SolutionPhysics Notes (Class 8-11)Class 8 NotesClass 9 NotesClass 10 NotesClass 11 NotesISRO CSISRO CS Solved PapersISRO CS Original Papers and Official KeysISRO CS Syllabus for Scientist/Engineer ExamUGC NET CSUGC NET CS Notes Paper IIUGC NET CS Notes Paper IIIUGC NET CS Solved PapersStudentCampus Ambassador ProgramSchool Ambassador ProgramProjectGeek of the MonthCampus Geek of the MonthPlacement CourseCompetititve ProgrammingTestimonialsGeek on the TopCareersInternshipJobsApply for JobsPost a JobCourses WriteCome write articles for us and get featuredPracticeLearn and code with the best industry expertsPremiumGet access to ad-free content, doubt assistance and more!JobsCome and find your dream job with usGeeks DigestQuizzesGeeks CampusGblog ArticlesIDECampus Mantri HomeSaved VideosCoursesGBlogPuzzlesWhat's New ? Change Language Data StructuresAlgorithmsInterview PreparationTopic-wise PracticeC++JavaPythonCompetitive ProgrammingMachine LearningWeb DevelopmentPuzzlesProject IdeasGFG School Related Articles ▲Related ArticlesBasicsJava Programming LanguageIntroduction to JavaSetting up the environment in JavaJava Basic SyntaxJava Hello World ProgramCommand Line Arguments in JavaHow JVM Works – JVM Architecture?Differences between JDK, JRE and JVMJava IdentifiersData types in JavaVariables in JavaComments in JavaOperators in JavaWays to read input from console in JavaFlow ControlDecision Making in Java (if, if-else, switch, break, continue, jump)Loops in JavaJava For loop with ExamplesFor-each loop in JavaJava while loop with ExamplesSwitch Statement in JavaContinue Statement in JavaBreak statement in JavaStringsStrings in JavaString class in Java | Set 1StringBuffer class in JavaStringBuilder Class in Java with ExamplesArraysArrays in JavaMultidimensional Arrays in JavaJagged Array in JavaArray Copy in JavaHow to convert an Array to String in Java?How to compare two arrays in Java?MethodsMethods in JavaParameter Passing Techniques in Java with ExamplesReturning Multiple values in JavaDifferent ways of Method Overloading in JavaScope of Variables In JavaConstructorsConstructors in JavaCopy Constructor in JavaConstructor Overloading in JavaConstructor Chaining In Java with ExamplesPrivate Constructors and Singleton Classes in JavaOOP ConceptsClasses and Objects in JavaInheritance in JavaEncapsulation in JavaPolymorphism in JavaAbstraction in JavaOverriding in JavaOverloading in JavaException HandlingExceptions in JavaTypes of Exception in Java with ExamplesChecked vs Unchecked Exceptions in Javathrow and throws in JavaUser-defined Custom Exception in JavaInterfaces & Abstract ClassesInterfaces in JavaNested Interface in JavaMarker interface in JavaAbstract Classes in JavaDifference between Abstract Class and Interface in JavaFunctional Interfaces in JavaComparator Interface in Java with ExamplesCollectionsCollections in JavaCollections Class in JavaCollection vs Collections in Java with ExampleJava | Implementing Iterator and Iterable InterfaceList Interface in Java with ExamplesArrayList in JavaVector Class in JavaStack Class in JavaLinkedList in JavaQueue Interface In JavaPriorityQueue in JavaDeque interface in Java with ExampleArrayDeque in JavaSet in JavaHashSet in JavaLinkedHashSet in Java with ExamplesSortedSet Interface in Java with ExamplesNavigableSet in Java with ExamplesTreeSet in JavaMap Interface in JavaHashMap in Java with ExamplesHashtable in JavaLinkedHashMap in JavaSortedMap Interface in Java with ExamplesTreeMap in JavaMultithreadingMultithreading in JavaLifecycle and States of a Thread in JavaMain thread in JavaJava Thread Priority in MultithreadingSynchronization in JavaFile HandlingFile Handling in Java with CRUD operationsJava.io.InputStream Class in JavaJava.io.OutputStream class in JavaJava.io.File Class in JavaFile Permissions in JavaCopying file using FileStreams in JavaDelete a File Using JavaTable of ContentsBasicsJava Programming LanguageIntroduction to JavaSetting up the environment in JavaJava Basic SyntaxJava Hello World ProgramCommand Line Arguments in JavaHow JVM Works – JVM Architecture?Differences between JDK, JRE and JVMJava IdentifiersData types in JavaVariables in JavaComments in JavaOperators in JavaWays to read input from console in JavaFlow ControlDecision Making in Java (if, if-else, switch, break, continue, jump)Loops in JavaJava For loop with ExamplesFor-each loop in JavaJava while loop with ExamplesSwitch Statement in JavaContinue Statement in JavaBreak statement in JavaStringsStrings in JavaString class in Java | Set 1StringBuffer class in JavaStringBuilder Class in Java with ExamplesArraysArrays in JavaMultidimensional Arrays in JavaJagged Array in JavaArray Copy in JavaHow to convert an Array to String in Java?How to compare two arrays in Java?MethodsMethods in JavaParameter Passing Techniques in Java with ExamplesReturning Multiple values in JavaDifferent ways of Method Overloading in JavaScope of Variables In JavaConstructorsConstructors in JavaCopy Constructor in JavaConstructor Overloading in JavaConstructor Chaining In Java with ExamplesPrivate Constructors and Singleton Classes in JavaOOP ConceptsClasses and Objects in JavaInheritance in JavaEncapsulation in JavaPolymorphism in JavaAbstraction in JavaOverriding in JavaOverloading in JavaException HandlingExceptions in JavaTypes of Exception in Java with ExamplesChecked vs Unchecked Exceptions in Javathrow and throws in JavaUser-defined Custom Exception in JavaInterfaces & Abstract ClassesInterfaces in JavaNested Interface in JavaMarker interface in JavaAbstract Classes in JavaDifference between Abstract Class and Interface in JavaFunctional Interfaces in JavaComparator Interface in Java with ExamplesCollectionsCollections in JavaCollections Class in JavaCollection vs Collections in Java with ExampleJava | Implementing Iterator and Iterable InterfaceList Interface in Java with ExamplesArrayList in JavaVector Class in JavaStack Class in JavaLinkedList in JavaQueue Interface In JavaPriorityQueue in JavaDeque interface in Java with ExampleArrayDeque in JavaSet in JavaHashSet in JavaLinkedHashSet in Java with ExamplesSortedSet Interface in Java with ExamplesNavigableSet in Java with ExamplesTreeSet in JavaMap Interface in JavaHashMap in Java with ExamplesHashtable in JavaLinkedHashMap in JavaSortedMap Interface in Java with ExamplesTreeMap in JavaMultithreadingMultithreading in JavaLifecycle and States of a Thread in JavaMain thread in JavaJava Thread Priority in MultithreadingSynchronization in JavaFile HandlingFile Handling in Java with CRUD operationsJava.io.InputStream Class in JavaJava.io.OutputStream class in JavaJava.io.File Class in JavaFile Permissions in JavaCopying file using FileStreams in JavaDelete a File Using JavaImprove Article Save Article Like Article Comments in JavaDifficulty Level : BasicLast Updated : 25 Jan, 2022In a program, comments take part in making the program become more human readable by placing the detail of code involved and proper use of comments makes maintenance easier and finding bugs easily. Comments are ignored by the compiler while compiling a code.In Java there are three types of comments: Single – line comments.Multi – line comments.Documentation comments. Single-line CommentsA beginner level programmer uses mostly single-line comments for describing the code functionality. Its the most easiest typed comments. Syntax: //Comments here( Text in this line only is considered as comment )Example: Java//Java program to show single line commentsclass Scomment{ public static void main(String args[]) { // Single line comment here System.out.println("Single line comment above"); }}Multi-line CommentsTo describe a full method in a code or a complex snippet single line comments can be tedious to write, since we have to give ‘//’ at every line. So to overcome this multi line comments can be used. Syntax: /*Comment starts continues continues . . . Comment ends*/Example: Java//Java program to show multi line commentsclass Scomment{ public static void main(String args[]) { System.out.println("Multi line comments below"); /*Comment line 1 Comment line 2 Comment line 3*/ }}We can also accomplish single line comments by using the above syntax as shown below: /*Comment line 1*/ Documentation CommentsThis type of comments are used generally when writing code for a project/software package, since it helps to generate a documentation page for reference, which can be used for getting information about methods present, its parameters, etc. For example http://docs.oracle.com/javase/7/docs/api/java/util/Scanner.html is an auto generated documentation page which is generated by using documentation comments and a javadoc tool for processing the comments.Syntax: /**Comment start * *tags are used in order to specify a parameter *or method or heading *HTML tags can also be used *such as <h1> * *comment ends*/Available tags to use: TagDescriptionSyntax@authorAdds the author of a class.@author name-text{@code}Displays text in code font without interpreting the text as HTML markup or nested javadoc tags.{@code text}{@docRoot}Represents the relative path to the generated document’s root directory from any generated page.{@docRoot}@deprecatedAdds a comment indicating that this API should no longer be used.@deprecated deprecatedtext@exceptionAdds a Throws subheading to the generated documentation, with the classname and description text.@exception class-name description{@inheritDoc}Inherits a comment from the nearest inheritable class or implementable interface.Inherits a comment from the immediate surperclass.{@link}Inserts an in-line link with the visible text label that points to the documentation for the specified package, class, or member name of a referenced class.{@link package.class#member label}{@linkplain}Identical to {@link}, except the link’s label is displayed in plain text than code font.{@linkplain package.class#member label}@paramAdds a parameter with the specified parameter-name followed by the specified description to the “Parameters” section.@param parameter-name description@returnAdds a “Returns” section with the description text.@return description@seeAdds a “See Also” heading with a link or text entry that points to reference.@see reference@serialUsed in the doc comment for a default serializable field.@serial field-description | include | exclude@serialDataDocuments the data written by the writeObject( ) or writeExternal( ) methods.@serialData data-description@serialFieldDocuments an ObjectStreamField component.@serialField field-name field-type field-description@sinceAdds a “Since” heading with the specified since-text to the generated documentation.@since release@throwsThe @throws and @exception tags are synonyms.@throws class-name description{@value}When {@value} is used in the doc comment of a static field, it displays the value of that constant.{@value package.class#field}@versionAdds a “Version” subheading with the specified version-text to the generated docs when the -version option is used.@version version-text Java//Java program to illustrate frequently used// Comment tags /*** <h1>Find average of three numbers!</h1>* The FindAvg program implements an application that* simply calculates average of three integers and Prints* the output on the screen.** @author Pratik Agarwal* @version 1.0* @since 2017-02-18*/public class FindAvg{ /** * This method is used to find average of three integers. * @param numA This is the first parameter to findAvg method * @param numB This is the second parameter to findAvg method * @param numC This is the second parameter to findAvg method * @return int This returns average of numA, numB and numC. */ public int findAvg(int numA, int numB, int numC) { return (numA + numB + numC)/3; } /** * This is the main method which makes use of findAvg method. * @param args Unused. * @return Nothing. */ public static void main(String args[]) { FindAvg obj = new FindAvg(); int avg = obj.findAvg(10, 20, 30); System.out.println("Average of 10, 20 and 30 is :" + avg); }}Output: Average of 10, 20 and 30 is :20For the above code documentation can be generated by using a tool ‘javadoc’ : Javadoc can be used by running the following command in terminal. javadoc FindAvg.javaThis article is contributed by Pratik Agarwal. If you like GeeksforGeeks and would like to contribute, you can also write an article using write.geeksforgeeks.org or mail your article to review-team@geeksforgeeks.org. See your article appearing on the GeeksforGeeks main page and help other Geeks.Please write comments if you find anything incorrect, or you want to share more information about the topic discussed above. Attention reader! Don’t stop learning now. Get hold of all the important Java Foundation and Collections concepts with the Fundamentals of Java and Java Collections Course at a student-friendly price and become industry ready. To complete your preparation from learning a language to DS Algo and many more, please refer Complete Interview Preparation Course.My Personal Notes arrow_drop_upSave LikePreviousVariables in JavaNext Operators in JavaRecommended ArticlesPage :Executable Comments in Java08, Jan 18Comments in C/C++23, Aug 18Concept of Comments in Computer Programming29, Aug 18Difference Between java.sql.Time, java.sql.Timestamp and java.sql.Date in Java07, Apr 21How to Convert java.sql.Date to java.util.Date in Java?02, Feb 21Different Ways to Convert java.util.Date to java.time.LocalDate in Java05, Jan 21How to Convert java.util.Date to java.sql.Date in Java?23, Mar 21Java.util.BitSet class methods in Java with Examples | Set 218, Nov 16Java.Lang.Float class in Java27, Mar 17Java.io.BufferedInputStream class in Java20, Jan 17Java.io.ObjectInputStream Class in Java | Set 102, Feb 17Java.util.BitSet class in Java with Examples | Set 116, Nov 16Java.io.BufferedWriter class methods in Java29, Dec 16Java.io.DataOutputStream in Java06, Jan 17Java.io.StreamTokenizer Class in Java | Set 106, Jan 17Java.io.InputStream Class in Java09, Jan 17Java.io.SequenceInputStream in Java06, Jan 17Java.io.StreamTokenizer Class in Java | Set 209, Jan 17Java.io.Console class in Java09, Jan 17Java.io.FilterOutputStream Class in Java13, Jan 17Java.io.CharArrayReader Class in Java16, Jan 17Java.io.CharArrayWriter class in Java | Set 117, Jan 17Java.io.CharArrayWriter class in Java | Set 217, Jan 17Java.io.DataInputStream class in Java | Set 118, Jan 17Article Contributed By :GeeksforGeeksVote for difficultyCurrent difficulty : BasicEasy Normal Medium Hard ExpertImproved By :sumitgumber28Article Tags :java-basicsJavaSchool ProgrammingPractice Tags :JavaReport IssueWriting code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load CommentsWhat's NewJava Backend Development- LIVE ClassesView DetailsJava FoundationView DetailsComplete Interview PreparationView DetailsMost popular in JavaObject Oriented Programming (OOPs) Concept in JavaSplit() String method in Java with examplesArrays.sort() in Java with examplesReverse a string in JavaInitialize an ArrayList in JavaMost visited in School ProgrammingPython DictionaryArrays in C/C++Reverse a string in JavaInheritance in C++C++ Data Types× 5th Floor, A-118,Sector-136, Noida, Uttar Pradesh - 201305 feedback@geeksforgeeks.orgCompanyAbout UsCareersPrivacy PolicyContact UsCopyright PolicyLearnAlgorithmsData StructuresLanguagesCS SubjectsVideo TutorialsWeb DevelopmentWeb TutorialsHTMLCSSJavaScriptBootstrapContributeWrite an ArticleWrite Interview ExperienceInternshipsVideos@geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It ! Start Your Coding Journey Now!Login Register