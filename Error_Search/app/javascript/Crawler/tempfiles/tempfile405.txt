Difference between Thread.start() and Thread.run() in Java - GeeksforGeeksSkip to content TutorialsPractice DS & Algo.Must Do QuestionsDSA Topic-wiseDSA Company-wiseAlgorithmsAnalysis of AlgorithmsAsymptotic AnalysisWorst, Average and Best CasesAsymptotic NotationsLittle o and little omega notationsLower and Upper Bound TheoryAnalysis of LoopsSolving RecurrencesAmortized AnalysisWhat does 'Space Complexity' mean ?Pseudo-polynomial AlgorithmsPolynomial Time Approximation SchemeA Time Complexity QuestionSearching AlgorithmsSorting AlgorithmsGraph AlgorithmsPattern SearchingGeometric AlgorithmsMathematicalBitwise AlgorithmsRandomized AlgorithmsGreedy AlgorithmsDynamic ProgrammingDivide and ConquerBacktrackingBranch and BoundAll AlgorithmsData StructuresArraysLinked ListStackQueueBinary TreeBinary Search TreeHeapHashingGraphAdvanced Data StructureMatrixStringsAll Data StructuresInterview CornerCompany PreparationTop TopicsPractice Company QuestionsInterview ExperiencesExperienced InterviewsInternship InterviewsCompetititve ProgrammingDesign PatternsSystem Design TutorialMultiple Choice QuizzesLanguagesCC++JavaPythonC#JavaScriptjQuerySQLPHPScalaPerlGo LanguageHTMLCSSKotlinCS SubjectsMathematicsOperating SystemDBMSComputer NetworksComputer Organization and ArchitectureTheory of ComputationCompiler DesignDigital LogicSoftware EngineeringGATEGATE Computer Science NotesLast Minute NotesGATE CS Solved PapersGATE CS Original Papers and Official KeysGATE 2021 DatesGATE CS 2021 SyllabusImportant Topics for GATE CSWeb TechnologiesHTMLCSSJavaScriptAngularJSReactJSNodeJSBootstrapjQueryPHPSoftware DesignsSoftware Design PatternsSystem Design TutorialSchool LearningSchool ProgrammingMathematicsNumber SystemAlgebraTrigonometryStatisticsProbabilityGeometryMensurationCalculusMaths Notes (Class 8-12)Class 8 NotesClass 9 NotesClass 10 NotesClass 11 NotesClass 12 NotesNCERT SolutionsClass 8 Maths SolutionClass 9 Maths SolutionClass 10 Maths SolutionClass 11 Maths SolutionClass 12 Maths SolutionRD Sharma SolutionsClass 8 Maths SolutionClass 9 Maths SolutionClass 10 Maths SolutionClass 11 Maths SolutionClass 12 Maths SolutionPhysics Notes (Class 8-11)Class 8 NotesClass 9 NotesClass 10 NotesClass 11 NotesISRO CSISRO CS Solved PapersISRO CS Original Papers and Official KeysISRO CS Syllabus for Scientist/Engineer ExamUGC NET CSUGC NET CS Notes Paper IIUGC NET CS Notes Paper IIIUGC NET CS Solved PapersStudentCampus Ambassador ProgramSchool Ambassador ProgramProjectGeek of the MonthCampus Geek of the MonthPlacement CourseCompetititve ProgrammingTestimonialsGeek on the TopCareersInternshipJobsApply for JobsPost a JobCourses WriteCome write articles for us and get featuredPracticeLearn and code with the best industry expertsPremiumGet access to ad-free content, doubt assistance and more!JobsCome and find your dream job with usGeeks DigestQuizzesGeeks CampusGblog ArticlesIDECampus Mantri HomeSaved VideosCoursesGBlogPuzzlesWhat's New ? Change Language Data StructuresAlgorithmsInterview PreparationTopic-wise PracticeC++JavaPythonCompetitive ProgrammingMachine LearningWeb DevelopmentPuzzlesProject IdeasGFG School Related Articles ▲Related ArticlesOverloading of Thread class run() methodOverriding of Thread class start() methodDifference between Thread.start() and Thread.run() in JavaRegular Expressions in JavaMultithreading in JavaLifecycle and States of a Thread in JavaMain thread in JavaJava Concurrency – yield(), sleep() and join() MethodsInter-thread Communication in JavaJava.lang.Thread Class in JavaWhat does start() function do in multithreading in Java?Java Thread Priority in MultithreadingJoining Threads in JavaNaming a thread and fetching name of current thread in JavaSynchronization in JavaMethod and Block Synchronization in JavaProducer-Consumer solution using threads in JavaThread Pools in JavaSemaphore in JavaJava.util.concurrent.Semaphore class in JavaCountDownLatch in JavaDeadlock in Java MultithreadingDaemon Thread in JavaDifference Between == and .equals() Method in JavaDifference between BFS and DFSClass method vs Static method in PythonDifference between Intel and AMDDifferences between Black Box Testing vs White Box TestingStack vs Heap Memory AllocationDifferences between TCP and UDPTable of ContentsOverloading of Thread class run() methodOverriding of Thread class start() methodDifference between Thread.start() and Thread.run() in JavaRegular Expressions in JavaMultithreading in JavaLifecycle and States of a Thread in JavaMain thread in JavaJava Concurrency – yield(), sleep() and join() MethodsInter-thread Communication in JavaJava.lang.Thread Class in JavaWhat does start() function do in multithreading in Java?Java Thread Priority in MultithreadingJoining Threads in JavaNaming a thread and fetching name of current thread in JavaSynchronization in JavaMethod and Block Synchronization in JavaProducer-Consumer solution using threads in JavaThread Pools in JavaSemaphore in JavaJava.util.concurrent.Semaphore class in JavaCountDownLatch in JavaDeadlock in Java MultithreadingDaemon Thread in JavaDifference Between == and .equals() Method in JavaDifference between BFS and DFSClass method vs Static method in PythonDifference between Intel and AMDDifferences between Black Box Testing vs White Box TestingStack vs Heap Memory AllocationDifferences between TCP and UDPImprove Article Save Article Like Article Difference between Thread.start() and Thread.run() in JavaDifficulty Level : BasicLast Updated : 23 Jan, 2019In Java’s multi-threading concept, start() and run() are the two most important methods. Below are some of the differences between the Thread.start() and Thread.run() methods:New Thread creation: When a program calls the start() method, a new thread is created and then the run() method is executed. But if we directly call the run() method then no new thread will be created and run() method will be executed as a normal method call on the current calling thread itself and no multi-threading will take place.Let us understand it with an example:class MyThread extends Thread { public void run() { System.out.println("Current thread name: " + Thread.currentThread().getName()); System.out.println("run() method called"); }} class GeeksforGeeks { public static void main(String[] args) { MyThread t = new MyThread(); t.start(); }}Output:Current thread name: Thread-0 run() method called As we can see in the above example, when we call the start() method of our thread class instance, a new thread is created with default name Thread-0 and then run() method is called and everything inside it is executed on the newly created thread.Now, let us try to call run() method directly instead of start() method:class MyThread extends Thread { public void run() { System.out.println("Current thread name: " + Thread.currentThread().getName()); System.out.println("run() method called"); }} class GeeksforGeeks { public static void main(String[] args) { MyThread t = new MyThread(); t.run(); }}Output:Current thread name: main run() method called As we can see in the above example, when we called the run() method of our MyThread class, no new thread is created and the run() method is executed on the current thread i.e. main thread. Hence, no multi-threading took place. The run() method is called as a normal function call.Multiple invocation: In Java’s multi-threading concept, another most important difference between start() and run() method is that we can’t call the start() method twice otherwise it will throw an IllegalStateException whereas run() method can be called multiple times as it is just a normal method calling.Let us understand it with an example:class MyThread extends Thread { public void run() { System.out.println("Current thread name: " + Thread.currentThread().getName()); System.out.println("run() method called"); }} class GeeksforGeeks { public static void main(String[] args) { MyThread t = new MyThread(); t.start(); t.start(); }}Output:Current thread name: Thread-0 run() method called Exception in thread "main" java.lang.IllegalThreadStateException at java.lang.Thread.start(Thread.java:708) at GeeksforGeeks.main(File.java:11) As we can see in the above example, calling start() method again raises java.lang.IllegalThreadStateException.Now, let us try to call run() method twice:class MyThread extends Thread { public void run() { System.out.println("Current thread name: " + Thread.currentThread().getName()); System.out.println("run() method called"); }} class GeeksforGeeks { public static void main(String[] args) { MyThread t = new MyThread(); t.run(); t.run(); }}Output:Current thread name: main run() method called Current thread name: main run() method called As we can see in the above example, calling run() method twice doesn’t raise any exception and it is executed twice as expected but on the main thread itself.Summarystart()run()Creates a new thread and the run() method is executed on the newly created thread.No new thread is created and the run() method is executed on the calling thread itself.Can’t be invoked more than one time otherwise throws java.lang.IllegalStateExceptionMultiple invocation is possibleDefined in java.lang.Thread class.Defined in java.lang.Runnable interface and must be overriden in the implementing class.Attention reader! Don’t stop learning now. Get hold of all the important Java Foundation and Collections concepts with the Fundamentals of Java and Java Collections Course at a student-friendly price and become industry ready. To complete your preparation from learning a language to DS Algo and many more, please refer Complete Interview Preparation Course.My Personal Notes arrow_drop_upSave LikePreviousOverriding of Thread class start() methodNext Regular Expressions in JavaRecommended ArticlesPage :Difference Between java.sql.Time, java.sql.Timestamp and java.sql.Date in Java07, Apr 21Difference between Core Java and Advanced Java31, Dec 19Difference between a Java Application and a Java Applet27, Feb 20Difference between Java IO and Java NIO21, May 20Difference between Java and Core Java30, Jun 20Difference and similarities between HashSet, LinkedHashSet and TreeSet in Java02, Jan 19Similarities and Difference between Java and C++29, Jun 20Difference between Difference Engine and Analytical Engine08, Jan 21Difference between x++ and x=x+1 in Java15, Sep 17Difference between super() and this() in java02, Oct 17Difference between Simple and Compound Assignment in Java22, Oct 17Difference between Traditional Collections and Concurrent Collections in java08, Jan 18Difference between Stream.of() and Arrays.stream() method in Java09, Oct 18Difference between an Integer and int in Java with Examples10, Sep 18Java Collection| Difference between Synchronized ArrayList and CopyOnWriteArrayList14, Sep 18Difference Between LinkedList and LinkedHashSet in Java09, Nov 18Difference between length of Array and size of ArrayList in Java05, Nov 18Difference between ArrayList and HashSet in Java10, Nov 18What is the difference between field, variable, attribute, and property in Java11, Nov 18Difference Between Daemon Threads and User Threads In Java16, Nov 18Difference between Abstract Class and Concrete Class in Java11, Jan 19Difference between Java and C language03, Jan 19Difference between print() and println() in Java10, Jan 19Difference between Early and Late Binding in Java17, Jun 19Article Contributed By :raman_257@raman_257Vote for difficultyCurrent difficulty : BasicEasy Normal Medium Hard ExpertArticle Tags :Java-FunctionsJava-MultithreadingDifference BetweenJavaPractice Tags :JavaReport IssueWriting code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load CommentsWhat's NewJava Backend Development- LIVE ClassesView DetailsComplete Interview PreparationView DetailsSystem Design-Live Classes for Working ProfessionalsView DetailsMost popular in Difference BetweenDifference between DDL and DML in DBMSWeb 1.0, Web 2.0 and Web 3.0 with their differenceDifference between C and C++Python | Difference Between List and TupleDifferences between JDK, JRE and JVMMost visited in JavaArrays in JavaObject Oriented Programming (OOPs) Concept in JavaSplit() String method in Java with examplesFor-each loop in JavaArrays.sort() in Java with examples× 5th Floor, A-118,Sector-136, Noida, Uttar Pradesh - 201305 feedback@geeksforgeeks.orgCompanyAbout UsCareersPrivacy PolicyContact UsCopyright PolicyLearnAlgorithmsData StructuresLanguagesCS SubjectsVideo TutorialsWeb DevelopmentWeb TutorialsHTMLCSSJavaScriptBootstrapContributeWrite an ArticleWrite Interview ExperienceInternshipsVideos@geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It ! Start Your Coding Journey Now!Login Register