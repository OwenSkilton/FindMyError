Traverse Through a HashMap in Java - GeeksforGeeksSkip to content TutorialsPractice DS & Algo.Must Do QuestionsDSA Topic-wiseDSA Company-wiseAlgorithmsAnalysis of AlgorithmsAsymptotic AnalysisWorst, Average and Best CasesAsymptotic NotationsLittle o and little omega notationsLower and Upper Bound TheoryAnalysis of LoopsSolving RecurrencesAmortized AnalysisWhat does 'Space Complexity' mean ?Pseudo-polynomial AlgorithmsPolynomial Time Approximation SchemeA Time Complexity QuestionSearching AlgorithmsSorting AlgorithmsGraph AlgorithmsPattern SearchingGeometric AlgorithmsMathematicalBitwise AlgorithmsRandomized AlgorithmsGreedy AlgorithmsDynamic ProgrammingDivide and ConquerBacktrackingBranch and BoundAll AlgorithmsData StructuresArraysLinked ListStackQueueBinary TreeBinary Search TreeHeapHashingGraphAdvanced Data StructureMatrixStringsAll Data StructuresInterview CornerCompany PreparationTop TopicsPractice Company QuestionsInterview ExperiencesExperienced InterviewsInternship InterviewsCompetititve ProgrammingDesign PatternsSystem Design TutorialMultiple Choice QuizzesLanguagesCC++JavaPythonC#JavaScriptjQuerySQLPHPScalaPerlGo LanguageHTMLCSSKotlinCS SubjectsMathematicsOperating SystemDBMSComputer NetworksComputer Organization and ArchitectureTheory of ComputationCompiler DesignDigital LogicSoftware EngineeringGATEGATE Computer Science NotesLast Minute NotesGATE CS Solved PapersGATE CS Original Papers and Official KeysGATE 2021 DatesGATE CS 2021 SyllabusImportant Topics for GATE CSWeb TechnologiesHTMLCSSJavaScriptAngularJSReactJSNodeJSBootstrapjQueryPHPSoftware DesignsSoftware Design PatternsSystem Design TutorialSchool LearningSchool ProgrammingMathematicsNumber SystemAlgebraTrigonometryStatisticsProbabilityGeometryMensurationCalculusMaths Notes (Class 8-12)Class 8 NotesClass 9 NotesClass 10 NotesClass 11 NotesClass 12 NotesNCERT SolutionsClass 8 Maths SolutionClass 9 Maths SolutionClass 10 Maths SolutionClass 11 Maths SolutionClass 12 Maths SolutionRD Sharma SolutionsClass 8 Maths SolutionClass 9 Maths SolutionClass 10 Maths SolutionClass 11 Maths SolutionClass 12 Maths SolutionPhysics Notes (Class 8-11)Class 8 NotesClass 9 NotesClass 10 NotesClass 11 NotesISRO CSISRO CS Solved PapersISRO CS Original Papers and Official KeysISRO CS Syllabus for Scientist/Engineer ExamUGC NET CSUGC NET CS Notes Paper IIUGC NET CS Notes Paper IIIUGC NET CS Solved PapersStudentCampus Ambassador ProgramSchool Ambassador ProgramProjectGeek of the MonthCampus Geek of the MonthPlacement CourseCompetititve ProgrammingTestimonialsGeek on the TopCareersInternshipJobsApply for JobsPost a JobCourses WriteCome write articles for us and get featuredPracticeLearn and code with the best industry expertsPremiumGet access to ad-free content, doubt assistance and more!JobsCome and find your dream job with usGeeks DigestQuizzesGeeks CampusGblog ArticlesIDECampus Mantri HomeSaved VideosCoursesGBlogPuzzlesWhat's New ? Change Language Data StructuresAlgorithmsInterview PreparationTopic-wise PracticeC++JavaPythonCompetitive ProgrammingMachine LearningWeb DevelopmentPuzzlesProject IdeasGFG School Related Articles â–²Related ArticlesPeriod normalized() method in Java with ExamplesMin and Max in a List in JavaCollections min() method in Java with ExamplesFinding minimum and maximum element of a Collection in JavaHow to find the Entry with largest Value in a Java MapHow to find the Entry with largest Key in a Java MapTraverse Through a HashMap in JavaSort an array which contain 1 to n valuesSort 1 to N by swapping adjacent elementsSort an array containing two types of elementsSort elements by frequency | Set 1Sort elements by frequency | Set 2Sort elements by frequency | Set 4 (Efficient approach using hash)Sorting Array Elements By Frequency | Set 3 (Using STL)Sort elements by frequency | Set 5 (using Java Map)Sorting a Hashmap according to valuesSorting a HashMap according to keys in JavaTreeMap in JavaTreeSet in JavaHashSet in JavaHashMap in Java with ExamplesInternal Working of HashMap in JavaPath resolve() method in Java with ExamplesPath relativize() method in Java with ExamplesPath normalize() method in Java with ExamplesArrays in JavaSplit() String method in Java with examplesArrays.sort() in Java with examplesFor-each loop in JavaReverse a string in JavaTable of ContentsPeriod normalized() method in Java with ExamplesMin and Max in a List in JavaCollections min() method in Java with ExamplesFinding minimum and maximum element of a Collection in JavaHow to find the Entry with largest Value in a Java MapHow to find the Entry with largest Key in a Java MapTraverse Through a HashMap in JavaSort an array which contain 1 to n valuesSort 1 to N by swapping adjacent elementsSort an array containing two types of elementsSort elements by frequency | Set 1Sort elements by frequency | Set 2Sort elements by frequency | Set 4 (Efficient approach using hash)Sorting Array Elements By Frequency | Set 3 (Using STL)Sort elements by frequency | Set 5 (using Java Map)Sorting a Hashmap according to valuesSorting a HashMap according to keys in JavaTreeMap in JavaTreeSet in JavaHashSet in JavaHashMap in Java with ExamplesInternal Working of HashMap in JavaPath resolve() method in Java with ExamplesPath relativize() method in Java with ExamplesPath normalize() method in Java with ExamplesArrays in JavaSplit() String method in Java with examplesArrays.sort() in Java with examplesFor-each loop in JavaReverse a string in JavaImprove Article Save Article Like Article Traverse Through a HashMap in JavaDifficulty Level : BasicLast Updated : 06 Jan, 2022HashMap stores the data in (Key, Value) pairs, and you can access them by an index of another type. HashMap class implements Map interface which allows us to store key. hashMap is a part of the java collections framework been up since Java 1.2. It internally uses hashing technique which is pretty fast.Syntax:public class HashMap<K,V> extends AbstractMap<K,V> implements Map<K,V>, Clonnable, Serial Different Ways of TraversalWe can iterate over mapping that is key and value pairs a was listed below that are later described as follows: Methods: Using an IteratorUsing enhanced for Loop (for-each loop)Using forEach() MethodMethod 1: Using an IteratorIterator is an interface in java.util package which is used to iterate through a collection. As such there is nothing special to discuss iterators so do we will be proposing out methods of Iterator interface been used to traverse over HashMap. hm.entrySet() is used to retrieve all the key-value pairs called Map.Entries and stores internally into a set.hm.entrySet().iterator() returns an iterator that acts as a cursor and points at the first element of the set and moves on till the end.hmIterator.hasNext() checks for the next element in the set and returns a booleanhmIterator.next() returns the next element(Map.Entry) from the set.mapElement.getKey() returns the key of the associated Map.EntrymapElement.getValue() return the value of the associated Map.EntryExample:Java// Java Program to Traverse through HashMap// Using Iterator // Importing required classesimport java.util.*; // Main classclass GFG { // Main driver method public static void main(String[] args) { // Creating an Hashmap of string-integer pairs // It contains student name and their marks HashMap<String, Integer> hm = new HashMap<String, Integer>(); // Adding mappings to above HashMap // using put() method hm.put("GeeksforGeeks", 54); hm.put("A computer portal", 80); hm.put("For geeks", 82); // Printing all elements of HashMap System.out.println("Created hashmap is" + hm); // Getting an iterator Iterator hmIterator = hm.entrySet().iterator(); // Display message only System.out.println( "HashMap after adding bonus marks:"); // Iterating through Hashmap and // adding some bonus marks for every student while (hmIterator.hasNext()) { Map.Entry mapElement = (Map.Entry)hmIterator.next(); int marks = ((int)mapElement.getValue() + 10); // Printing mark corresponding to string entries System.out.println(mapElement.getKey() + " : " + marks); } }}OutputCreated hashmap is{GeeksforGeeks=54, A computer portal=80, For geeks=82} HashMap after adding bonus marks: GeeksforGeeks : 64 A computer portal : 90 For geeks : 92Method 2: Using for-each LoopExample:Java// Java program for Traversing through HashMap// Using for-each Loop // Importing required classesimport java.util.*; // Main classclass GFG { // Main driver method public static void main(String[] args) { // creating an empty HashMap of string and integer // pairs Mappings denotes Student name and marks HashMap<String, Integer> hm = new HashMap<String, Integer>(); // Adding mappings to HashMap // using put() method hm.put("GeeksforGeeks", 54); hm.put("A computer portal", 80); hm.put("For geeks", 82); // Printing all elements of above Map System.out.println("Created hashmap is" + hm); // Display message only System.out.println( "HashMap after adding bonus marks:"); // Looping through the HashMap // Using for-each loop for (Map.Entry mapElement : hm.entrySet()) { String key = (String)mapElement.getKey(); // Adding some bonus marks to all the students int value = ((int)mapElement.getValue() + 10); // Printing above marks corresponding to // students names System.out.println(key + " : " + value); } }}Output: Created hashmap is{GeeksforGeeks=54, A computer portal=80, For geeks=82} HashMap after adding bonus marks: GeeksforGeeks : 64 A computer portal : 90 For geeks : 92 Method 3: Using forEach() methodforEach() is a method of HashMap that is introduced in java 8. It is used to iterate through the hashmap and also reduces the number of lines of code as proposed below as follows:Example:Java// Java program for traversing Through HashMap// Using forEach() Method // Importing required classesimport java.util.*; // Main classclass GFG { // Main driver method public static void main(String[] args) { // Creating an empty HashMap of string-integer // pairs HashMap<String, Integer> hm = new HashMap<String, Integer>(); // Adding mappings to HashMap // using put() method hm.put("GeeksforGeeks", 54); hm.put("A computer portal", 80); hm.put("For geeks", 82); // Printing all elements of above HashMap System.out.println("Created hashmap is" + hm); // Display message only System.out.println( "HashMap after adding bonus marks:"); // Looping through HashMap and adding bonus marks // using HashMap.forEach() hm.forEach((k, v) -> System.out.println(k + " : " + (v + 10))); }}Output: Created hashmap is{GeeksforGeeks=54, A computer portal=80, For geeks=82} HashMap after adding bonus marks: GeeksforGeeks : 64 A computer portal : 90 For geeks : 92 Attention reader! Donâ€™t stop learning now. Get hold of all the important Java Foundation and Collections concepts with the Fundamentals of Java and Java Collections Course at a student-friendly price and become industry ready. To complete your preparation from learning a language to DS Algo and many more, please refer Complete Interview Preparation Course.My Personal Notes arrow_drop_upSave LikePreviousHow to find the Entry with largest Key in a Java MapNext Sort an array which contain 1 to n valuesRecommended ArticlesPage :Java Program to Traverse Through ArrayList in Reverse Direction19, Dec 20Traverse Through ArrayList in Forward Direction in Java10, Dec 20Traverse through a HashSet in Java19, Aug 18How to Copy One HashMap to Another HashMap in Java?14, Dec 20Java Program to Traverse in a Directory20, Oct 20How to traverse a C++ set in reverse direction05, Dec 18HashMap Class Methods in Java with Examples | Set 1 (put(), get(), isEmpty() and size())10, Nov 16Hashmap methods in Java with Examples | Set 2 (keySet(), values(), containsKey()..)10, Nov 16Hashmap vs WeakHashMap in Java21, Apr 17Differences between TreeMap, HashMap and LinkedHashMap in Java20, May 17Sorting a HashMap according to keys in Java03, Oct 17Check whether two Strings are Anagram of each other using HashMap in Java01, Feb 19HashMap clear() Method in Java22, Jun 18HashMap containsKey() Method in Java22, Jun 18HashMap clone() Method in Java22, Jun 18HashMap containsValue() Method in Java22, Jun 18HashMap isEmpty() Method in Java22, Jun 18HashMap entrySet() Method in Java22, Jun 18HashMap get() Method in Java22, Jun 18HashMap keySet() Method in Java22, Jun 18HashMap size() Method in Java22, Jun 18HashMap put() Method in Java22, Jun 18HashMap putAll() Method in Java22, Jun 18HashMap remove() Method in Java22, Jun 18Article Contributed By :SujanM@SujanMVote for difficultyCurrent difficulty : BasicEasy Normal Medium Hard ExpertImproved By :solankimayanksurindertarika1234gulshankumarar231surinderdawra388Article Tags :Java - util packageJava 8Java-HashMapJava-IteratorJava-Map-ProgramsPickedJavaJava ProgramsPractice Tags :JavaReport IssueWriting code in comment? Please use ide.geeksforgeeks.org, generate link and share the link here. Load CommentsWhat's NewJava Backend Development- LIVE ClassesView DetailsComplete Interview PreparationView DetailsSystem Design-Live Classes for Working ProfessionalsView DetailsMost popular in JavaObject Oriented Programming (OOPs) Concept in JavaArrayList in JavaMultidimensional Arrays in JavaInitialize an ArrayList in JavaHow to iterate any Map in JavaMost visited in Java ProgramsConvert a String to Character array in JavaInitializing a List in JavaJava Programming ExamplesConvert Double to Integer in JavaImplementing a Linked List in Java using ClassÃ— 5th Floor, A-118,Sector-136, Noida, Uttar Pradesh - 201305 feedback@geeksforgeeks.orgCompanyAbout UsCareersPrivacy PolicyContact UsCopyright PolicyLearnAlgorithmsData StructuresLanguagesCS SubjectsVideo TutorialsWeb DevelopmentWeb TutorialsHTMLCSSJavaScriptBootstrapContributeWrite an ArticleWrite Interview ExperienceInternshipsVideos@geeksforgeeks , Some rights reserved We use cookies to ensure you have the best browsing experience on our website. By using our site, you acknowledge that you have read and understood our Cookie Policy & Privacy Policy Got It ! Start Your Coding Journey Now!Login Register